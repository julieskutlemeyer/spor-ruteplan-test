import tokens__default from '@vygruppen/spor-design-tokens';
import * as tokens from '@vygruppen/spor-design-tokens';
export { tokens };
import * as _chakra_ui_system_dist_system_types from '@chakra-ui/system/dist/system.types';
import { DividerProps as DividerProps$1, As, BoxProps, StackProps as StackProps$1, AccordionProps as AccordionProps$1, AccordionItemProps, BreadcrumbProps as BreadcrumbProps$1, ButtonProps as ButtonProps$1, ButtonGroupProps as ButtonGroupProps$1, IconButtonProps as IconButtonProps$1, ComponentWithAs, ResponsiveValue, FlexProps, CheckboxProps as CheckboxProps$1, CheckboxGroupProps as CheckboxGroupProps$1, StackDirection, FormControlProps as FormControlProps$1, FormLabelProps as FormLabelProps$1, InputProps as InputProps$1, InputElementProps as InputElementProps$1, SelectProps, RadioProps as RadioProps$1, RadioGroupProps as RadioGroupProps$1, SwitchProps as SwitchProps$1, TextareaProps as TextareaProps$1, LinkProps as LinkProps$1, SkeletonTextProps as SkeletonTextProps$1, ModalHeaderProps as ModalHeaderProps$1, DrawerContentProps, DrawerProps as DrawerProps$1, PopoverProps, ChakraProviderProps, TabsProps as TabsProps$1, TableProps as TableProps$1, BadgeProps as BadgeProps$1, CodeProps as CodeProps$1, HeadingProps as HeadingProps$1, TextProps as TextProps$1 } from '@chakra-ui/react';
export { AccordionButton, AccordionButtonProps, AccordionIcon, AccordionItem, AccordionItemProps, AccordionPanel, AccordionPanelProps, Box, BoxProps, CSSWithMultiValues, Center, CenterProps, Collapse, CollapseProps, ComponentStyleConfig, Container, ContainerProps, DarkMode, DrawerBody, DrawerCloseButton, DrawerFooter, DrawerOverlay, DrawerProps, Fade, FadeProps, Flex, FlexProps, FormHelperText, Grid, GridItem, GridItemProps, GridProps, HStack, Image, ImageProps, Img, ImgProps, InputGroup, InputGroupProps, LightMode, ListItem, ListItemProps, ListProps, Modal, ModalBody, ModalBodyProps, ModalCloseButton, ModalContent, ModalContentProps, ModalFooter, ModalFooterProps, ModalOverlay, ModalOverlayProps, ModalProps, OrderedList, Portal, PortalProps, ScaleFade, ScaleFadeProps, SimpleGrid, SimpleGridProps, Slide, SlideFade, SlideFadeProps, SlideProps, Spacer, SpacerProps, Tab, TabList, TabListProps, TabPanel, TabPanelProps, TabPanels, TabPanelsProps, TabProps, TableBodyProps, TableCaption, TableCaptionProps, TableCellProps, TableColumnHeaderProps, TableFooterProps, TableHeadProps, TableRowProps, Tbody, Td, Tfoot, Th, Thead, Tr, UnorderedList, UseClipboardOptions, UseDisclosureProps, UseOutsideClickProps, VStack, Wrap, WrapItem, WrapItemProps, WrapProps, defineStyleConfig, extendTheme, useBreakpointValue, useClipboard, useColorMode, useColorModePreference, useColorModeValue, useControllableProp, useDisclosure, useMediaQuery, useMergeRefs, useOutsideClick, usePrefersReducedMotion, useTheme, useToken } from '@chakra-ui/react';
import React, { ChangeEvent } from 'react';
import * as _chakra_ui_breadcrumb_dist_breadcrumb_link from '@chakra-ui/breadcrumb/dist/breadcrumb-link';
import * as _chakra_ui_breadcrumb_dist_breadcrumb_item from '@chakra-ui/breadcrumb/dist/breadcrumb-item';
import { DateValue } from '@internationalized/date';
export { Time } from '@internationalized/date';
import { AriaDatePickerProps, AriaDateRangePickerProps, AriaPositionProps, AriaComboBoxProps, AriaListBoxProps } from 'react-aria';
import { TimeValue } from '@react-types/datepicker';
import { ListState, SelectState } from 'react-stately';
export { Item, Section } from 'react-stately';
import * as _chakra_ui_styled_system from '@chakra-ui/styled-system';
export { useSize } from '@chakra-ui/react-use-size';

type DividerProps = DividerProps$1 & {
    size?: "sm" | "md" | "lg";
    variant?: "solid" | "dashed";
};
/** A dividing line, used to divide content.
 *
 * You can specify margins if you need to give the content some space, or use a `Stack` component to do it for you
 *
 * ```tsx
 * <Divider marginTop={4} marginBottom={6} />
 * ```
 *
 * There are three different sizes available: `sm`, `md` and `lg`. The default is `md`.
 * There are two different variants available: `solid` and `dashed`. The default is `solid`.
 */
declare const Divider: _chakra_ui_system_dist_system_types.ComponentWithAs<As, BoxProps>;

type StackProps = Exclude<StackProps$1, "direction"> & {
    flexDirection?: StackProps$1["direction"];
};
/**
 * Adds consistent spacing between elements
 *
 * ```tsx
 * <Stack>
 *   <Text>Here's a paragraph</Text>
 *   <Text>Here's another perfectly spaced paragraph</Text>
 * </Stack>
 * ```
 *
 * By default, the stack will be a column. You can change this by setting the `flexDirection` prop to any valid flex direction:
 * ```tsx
 * <Stack flexDirection="row">
 *   <Checkbox>Here's a checkbox</Checkbox>
 *   <Checkbox>Here's another checkbox, almost right next to the first one</Checkbox>
 * </Stack>
 * ```
 *
 * You can specify the spacing between elements with the `spacing` prop:
 *
 * ```tsx
 * <Stack spacing={4}>
 *   <StaticCard>Here's one card</StaticCard>
 *   <StaticCard>Here's another card, with a lot of space between it</StaticCard>
 * </Stack>
 * ```
 */
declare const Stack: _chakra_ui_system_dist_system_types.ComponentWithAs<"div", StackProps>;

/**
 * Radio cards are used to present a set of options where only one option can be selected.
 *
 * RadioCard components must be wrapped in a RadioCardGroup component.
 *
 * @example
 * ```tsx
 * <RadioCardGroup name="ticket">
 *   <RadioCard value="economy">Economy</RadioCard>
 *   <RadioCard value="business">Business</RadioCard>
 *   <RadioCard value="first-class">First Class</RadioCard>
 * </RadioCardGroup>
 * ```
 *
 * RadioCard inherits props from Box.
 *
 * Be advised to not use the `name` prop on the RadioCard component.
 *
 * Changing the semantics may also cause the component to not work as expected.
 *
 * @see Docs https://spor.vy.no/components/radiocard
 */
type RadioCardProps = BoxProps & {
    /** The value that will be passed to the `RadioCardGroup`'s `onChange` function if this `RadioCard` is selected.. */
    value: string;
    /** The content of the RadioCard. */
    children: React.ReactNode;
    /** Determines if the RadioCard is disabled. */
    isDisabled?: boolean;
};
declare const RadioCard: _chakra_ui_system_dist_system_types.ComponentWithAs<_chakra_ui_system_dist_system_types.As, BoxProps & {
    /** The value that will be passed to the `RadioCardGroup`'s `onChange` function if this `RadioCard` is selected.. */
    value: string;
    /** The content of the RadioCard. */
    children: React.ReactNode;
    /** Determines if the RadioCard is disabled. */
    isDisabled?: boolean | undefined;
}>;

/**
 * RadioCardGroupContext is used to pass down the state and handlers to the RadioCard components.
 *
 * @see RadioCard
 */
type RadioGroupContextProps = {
    name: string;
    selectedValue: string;
    onChange: (value: string) => void;
    variant?: "base" | "floating";
    defaultValue?: string;
    value?: string;
};
declare const RadioCardGroupContext: React.Context<RadioGroupContextProps | null>;
type RadioCardGroupProps = BoxProps & {
    /** A string that will be assigned as the name attribute to all RadioCard components within the group. */
    name: string;
    /** The RadioCard components that make up the group. */
    children: React.ReactNode;
    /** Optional. Determines the style of the RadioCard. Can be either "base" or "floating". */
    variant?: "base" | "floating";
    /** Optional. Determines the direction of the group. Can be either "row" or "column". */
    direction?: "row" | "column";
    /** Optional. A label for the group. */
    groupLabel?: string;
    /** Optional. The default value of the RadioCard group. */
    defaultValue?: string;
    /** Optional. A function that will be called when the selected value changes. The function receives the value of the selected RadioCard. */
    onChange?: (value: string) => void;
};
declare const RadioCardGroup: React.FC<RadioCardGroupProps>;

type StaticCardProps = BoxProps & {
    children: React.ReactNode;
    /** Defaults to "white" */
    colorScheme: "white" | "grey" | "green" | "orange" | "red" | "yellow" | "blue" | "darkBlue" | "darkGreen" | "darkYellow";
};
/**
 * `StaticCard` is a component that renders a static card.
 *
 * The `StaticCard` component can be used to create a card that does not respond to user interactions.
 * It can be rendered as any HTML element by specifying the `as` prop.
 *
 * The `colorScheme` prop can be used to control the color scheme of the card. It defaults to "white".
 *
 * Example usage:
 *
 * ```tsx
 * <StaticCard>
 *   Content
 * </StaticCard>
 * ```
 *
 * To render the card as a different HTML element, specify the `as` prop:
 *
 * ```tsx
 * <StaticCard as="section">
 *   This is now a <section /> element
 * </StaticCard>
 * ```
 *
 * To change the color scheme of the card, specify the `colorScheme` prop:
 *
 * ```tsx
 * <StaticCard colorScheme="orange">
 *   An orange card
 * </StaticCard>
 * ```
 *
 * For a card with click functionality, use the `PressableCard` component.
 *
 * @see PressableCard
 */
declare const StaticCard: _chakra_ui_system_dist_system_types.ComponentWithAs<As, StaticCardProps>;

type PressableCardProps = BoxProps & {
    /** Defaults to "base"  */
    variant?: "floating" | "accent" | "base";
};
/**
 * `PressableCard` is a component that renders a pressable card.
 *
 * The `PressableCard` component can be used to create a card that responds to user interactions.
 * It can be rendered as a button, link, label, or any other HTML element by specifying the `as` prop.
 * If no `as` prop is provided, it defaults to a button.
 *
 * The `variant` prop can be used to control the style variant of the card. It defaults to "base".
 *
 * Example usage:
 *
 * ```tsx
 * <PressableCard>
 *   Content
 * </PressableCard>
 * ```
 *
 * To render the card as a different HTML element, specify the `as` prop:
 *
 * ```tsx
 * <PressableCard as="a">
 *   This is now a <a /> element
 * </PressableCard>
 * ```
 *
 * For a static card with other color schemes, use the `StaticCard` component.
 *
 * @see StaticCard
 */
declare const PressableCard: _chakra_ui_system_dist_system_types.ComponentWithAs<As, PressableCardProps>;

type AccordionProps = Omit<AccordionProps$1, "variant" | "size"> & {
    /**
     * The display variant of the accordion items.
     *
     * - `ghost` renders a pretty unstyled expandable list without any borders
     * - `base` renders an outlined version
     * - `floating` renders a version with a drop shadow
     */
    variant?: "ghost" | "base" | "floating";
    size?: "sm" | "md" | "lg";
    /** The margin between accordion items */
    spacing?: StackProps["spacing"];
};
declare const Accordion: _chakra_ui_system_dist_system_types.ComponentWithAs<"div", AccordionProps>;

type HeadingLevel = "h2" | "h3" | "h4" | "h5" | "h6";
type ExpandableProps = Omit<AccordionProps, "title" | "index" | "defaultIndex" | "onChange"> & {
    /** The hidden content */
    children: React.ReactNode;
    /** The title that's shown inside the toggle button */
    title: React.ReactNode;
    /** The semantic heading level of the toggle button */
    headingLevel?: HeadingLevel;
    /**
     * Icon shown to the left of the title
     *
     * Make sure it's the outlined version of the icon.
     *
     * If the size is set to `sm` or `md` the icon should be 24px.
     * If the size is set to `lg`, the icon should be 30px.
     */
    leftIcon?: React.ReactNode;
    /** Controlled value of whether the accordion is open or not */
    isOpen?: boolean;
    /** Default value of when the accordion is open or not */
    defaultOpen?: boolean;
    /** Callback for when the expandable opens or closes */
    onChange?: (isOpen: boolean) => void;
};
/**
 * A standalone expandable component.
 *
 * This one is great to use if you have a single expandable component by itself.
 * If you want several expandables in a row, use the `Accordion` and `ExpandableItem` components instead.
 *
 * ```tsx
 * <Expandable title="Click for more" variant="base" size="lg">
 *   <Text>MORE! 🎉</Text>
 * </Expandable>
 * ```
 */
declare const Expandable: ({ children, headingLevel, title, leftIcon, size, defaultOpen, isOpen, onChange, ...rest }: ExpandableProps) => React.JSX.Element;
type ExpandableItemProps = Omit<AccordionItemProps, "title"> & {
    /** The hidden content */
    children: React.ReactNode;
    /** The title that's shown inside the toggle button */
    title: React.ReactNode;
    /** The semantic heading level of the toggle button */
    headingLevel?: HeadingLevel;
    /**
     * Icon shown to the left of the title
     *
     * Make sure it's the 30px outlined version of the icon
     */
    leftIcon?: React.ReactNode;
};
/**
 * An item in a set of Expandables. Must be wrapped in an `<Accordion>` component.
 *
 * ```tsx
 * <Accordion variant="ghost" size="md">
 *  <ExpandableItem title="Is Spor easy?" headingLevel="h3">
 *    Yes
 *  </ExpandableItem>
 *  <ExpandableItem title="Do you love it?" headingLevel="h3">
 *    🥰
 *  </ExpandableItem>
 * </Accordion>
 * ```
 *
 * If you need even more control, you can put together your own expandable with the `Accordion`, `AccordionItem`, `AccordionButton`, `AccordionIcon` and `AccordionPanel` components.
 */
declare const ExpandableItem: ({ children, title, headingLevel, leftIcon, ...rest }: ExpandableItemProps) => React.JSX.Element;

type BaseAlertProps = BoxProps & {
    /** The color scheme and icon of the alert */
    variant: "info" | "success" | "warning" | "alt-transport" | "error";
    /** The body content of the alert */
    children: React.ReactNode;
    /** The title of the alert */
    title?: string;
};

type ClosableAlertProps = BaseAlertProps & {
    /** Callback for when the close button is clicked */
    onClose?: () => void;
};
/**
 * A closable alert component.
 *
 * A regular alert with a close button that can be used to dismiss the alert.
 *
 * ```tsx
 * <ClosableAlert variant="info" title="Nice to know">
 *   <Text>Some info here</Text>
 * </ClosableAlert>
 * ```
 *
 * You can also pass in an optional `onClose` callback, for things like analytics.
 *
 * ```tsx
 * <ClosableAlert
 *   variant="info"
 *   title="Nice to know"
 *   onClose={() => analytics.track('alert-closed')}
 * >
 *   <Text>Some info here</Text>
 * </ClosableAlert>
 */
declare const ClosableAlert: ({ variant, title, children, onClose: externalOnClose, }: ClosableAlertProps) => React.JSX.Element | null;

type ExpandableAlertProps = BaseAlertProps & {
    /** The title string  */
    title: string;
    /** Callback for when the expandable panel is opened or closed */
    onToggle?: (isOpen: boolean) => void;
    /** Whether or not the default state of the expandable alert is open */
    defaultOpen?: boolean;
    /**
     * The HTML element used for the `title` prop.
     *
     * Defaults to h3 */
    headingLevel?: "h2" | "h3" | "h4" | "h5" | "h6";
};
/**
 * An expandable alert component.
 *
 * A regular alert with an expandable body. The expandable body can be used to provide more information about the alert.
 *
 * ```tsx
 * <ExpandableAlert variant="alt-transport" title="Replacement bus service">
 *   The replacement bus service will be running from 10:00 to 16:00.
 * </ExpandableAlert>
 * ```
 */
declare const ExpandableAlert: ({ variant, children, title, headingLevel, defaultOpen, onToggle, ...boxProps }: ExpandableAlertProps) => React.JSX.Element;

type StaticAlertProps = BaseAlertProps;
/**
 * A static alert component.
 *
 * This alert component cannot be closed, nor dismissed.
 *
 * ```tsx
 * <StaticAlert variant="info" title="Nice to know">
 *   Thomas the Train was originally only a wooden toy made for the creator’s son.
 * </StaticAlert>
 * ```
 */
declare const StaticAlert: ({ children, title, ...props }: StaticAlertProps) => React.JSX.Element;

type BreadcrumbProps = Omit<BreadcrumbProps$1, "variant"> & {
    variant?: "base" | "ghost";
};
/**
 * A breadcrumb component.
 *
 * Used to create customizable breadcrumbs.
 *
 * ```tsx
 * <Breadcrumb>
 *   <BreadcrumbItem>
 *     <BreadcrumbLink href="/">Home</BreadcrumbLink>
 *   </BreadcrumbItem>
 *   <BreadcrumbItem isCurrentPage={true}>
 *    <BreadcrumbLink href="/about">About</BreadcrumbLink>
 *  </BreadcrumbItem>
 * </Breadcrumb>
 * ```
 */
declare const Breadcrumb: (props: BreadcrumbProps) => React.JSX.Element;
declare const BreadcrumbItem: _chakra_ui_system_dist_system_types.ComponentWithAs<"li", _chakra_ui_breadcrumb_dist_breadcrumb_item.BreadcrumbItemProps>;
declare const BreadcrumbLink: _chakra_ui_system_dist_system_types.ComponentWithAs<"a", _chakra_ui_breadcrumb_dist_breadcrumb_link.BreadcrumbLinkProps>;

type ButtonProps = Exclude<ButtonProps$1, "colorScheme" | "loadingText" | "size" | "variant"> & {
    /**
     * The size of the button.
     *
     * Defaults to "md"
     * */
    size?: "xs" | "sm" | "md" | "lg";
    /** The different variants of a button
     *
     * Defaults to "primary".
     *
     * "control" is deprecated, and will be removed in a future version
     */
    variant?: "control" | "primary" | "secondary" | "tertiary" | "ghost" | "floating";
};
/**
 * Buttons are used to trigger actions.
 *
 * There are several button variants. You can specify which one you want with the `variant` prop. The available variants are:
 *
 * - `primary`: This is our main button. It's used for the main actions in a view, like a call to action. There should only be a single primary button in each view.
 * - `secondary`: Used for secondary actions in a view, and when you need to make several actions available at the same time.
 * - `tertiary`: Used for additional choices, like a less important secondary action.
 * - `ghost`: Used inside other interactive elements, like date pickers and input fields.
 * - `floating`: Used for floating actions, like a menu button in a menu.
 *
 * ```tsx
 * <Button variant="primary" onClick={confirmOrder}>
 *  Buy trip
 * </Button>
 * ```
 *
 * There are also different sizes. You can specify which one you want with the `size` prop. The available sizes are "lg", "md", "sm" and "xs".
 *
 * ```tsx
 * <Button variant="secondary" size="sm" onClick={cancelOrder}>
 *   Cancel trip
 * </Button>
 * ```
 *
 * @see https://spor.vy.no/components/button
 */
declare const Button: _chakra_ui_system_dist_system_types.ComponentWithAs<"button", ButtonProps>;

type ButtonGroupProps = ButtonGroupProps$1;
/**
 * Group buttons together with a `ButtonGroup`!
 *
 * If you have more than one button next to eachother, you might want to add a `ButtonGroup` to group them.
 *
 * ```tsx
 * <ButtonGroup>
 *   <Button variant="secondary">Cancel</Button>
 *   <Button variant="primary">Save</Button>
 * </ButtonGroup>
 * ```
 *
 * You can specify the size of all buttons in a group with the `size` prop. You can also set the same variant across all buttons with the `variant` prop.
 *
 * ```tsx
 * <ButtonGroup variant="secondary" size="md">
 *   <Button>Open</Button>
 *   <Button>Save</Button>
 * </ButtonGroup>
 * ```
 *
 * Finally, you can join several buttons together with the `isAttached` prop.
 *
 * ```tsx
 * <ButtonGroup variant="secondary" size="md" isAttached>
 *   <Button>Open</Button>
 *   <IconButton>
 *     <SaveIcon aria-label="Save"/>
 *   </IconButton>
 * </ButtonGroup>
 * ```
 */
declare const ButtonGroup: _chakra_ui_system_dist_system_types.ComponentWithAs<"div", ButtonGroupProps$1>;

type IconButtonProps = Omit<IconButtonProps$1, "variant"> & {
    /** The button variant.
     *
     * "control" is deprecated
     */
    variant: "control" | "primary" | "secondary" | "tertiary" | "ghost" | "floating";
};
/**
 * An icon-only button.
 *
 * Remember to specify the `aria-label` prop for screen readers.
 *
 * There are several icon button variants. You can specify which one you want with the `variant` prop. The available variants are:
 *
 * - `control`: This button is used for ticket controls only.
 * - `primary`: This is our main button. It's used for the main actions in a view, like a call to action. There should only be a single primary button in each view.
 * - `secondary`: Used for secondary actions in a view, and when you need to make several actions available at the same time.
 * - `tertiary`: Used for additional choices, like a less important secondary action.
 * - `ghost`: Used inside other interactive elements, like date pickers and input fields.
 * - `floating`: Used for floating actions, like a menu button in a menu.
 *
 * ```tsx
 * <IconButton
 *   aria-label="Buy trip"
 *   icon={<ShoppingCartIcon />}
 *   variant="primary"
 *   onClick={confirmOrder}
 * />
 * ```
 *
 * There are also different sizes. You can specify which one you want with the `size` prop. The available sizes are "lg", "md", "sm" and "xs".
 *
 * ```tsx
 * <IconButton
 *   aria-label="Cancel trip"
 *   icon={<CancelIcon />}
 *   variant="ghost"
 *   size="sm"
 *   onClick={cancelOrder}
 * />
 * ```
 */
declare const IconButton: _chakra_ui_system_dist_system_types.ComponentWithAs<As, IconButtonProps>;

type CloseButtonProps = Omit<IconButtonProps, "variant" | "aria-label"> & {
    /** Defaults to a localized version of "close" */
    "aria-label"?: string;
};
/**
 * A close button component.
 *
 * This button closes stuff, like modals and dialogs.
 *
 * ```tsx
 * <CloseButton onClick={closeModal} />
 * ```
 */
declare const CloseButton: _chakra_ui_system_dist_system_types.ComponentWithAs<"button", CloseButtonProps>;

type FloatingActionButtonProps = BoxProps & {
    variant?: "accent" | "base" | "brand";
    placement?: "bottom right" | "bottom left" | "top right" | "top left";
    icon: React.ReactNode;
    children: React.ReactNode;
    isTextVisible?: boolean;
};
/**
 * Creates a floating action button.
 *
 * By default it will be placed at the bottom right of the screen. You can override this with specifying the `placement` prop.
 *
 * ```tsx
 * <FloatingActionButton
 *  variant="accent"
 *  icon={<TicketControlFill30Icon />}
 *  placement="bottom right"
 * />
 */
declare const FloatingActionButton: ComponentWithAs<ComponentWithAs<"a" | "button", {}>, FloatingActionButtonProps>;

type CardProps = Exclude<BoxProps, "size"> & {
    size?: "sm" | "lg";
    children: React.ReactNode;
    colorScheme: "white" | "grey" | "blue" | "green" | "teal" | "yellow" | "orange" | "red";
};
/**
 * Renders a card.
 *
 * The most basic version looks like this:
 *
 * ```tsx
 * <Card>
 *   Content
 * </Card>
 * ```
 *
 * There are lots of color schemes available. You can also set the size as either `sm` or `lg`. The default is `sm`.
 *
 * ```tsx
 * <Card colorScheme="orange" size="lg">
 *   A smaller card
 * </Card>
 * ```
 *
 * Cards are not interactive by default. If you specify the `as` prop to be a link or a button, you can make them work as links or buttons respectively. This will also give it a drop shadow.
 *
 * ```tsx
 * <Card colorScheme="blue" as="button" onClick={handleClick}>
 *   Click for profit
 * </Card>
 * <Card colorScheme="green" as="a" href="https://vy.no">
 *   Go to start
 * </Card>
 * ```
 */
/**
 * @deprecated Card is deprecated. Use `StaticCard` or `PressableCard` instead.
 */
declare const Card: _chakra_ui_system_dist_system_types.ComponentWithAs<As, CardProps>;

/**
 * A date picker component.
 *
 * There are three different variants – `base`, `floating` and `ghost`.
 *
 * ```tsx
 * <DatePicker label="Dato" variant="base" />
 * ```
 */
declare const DatePicker: React.ForwardRefExoticComponent<Omit<AriaDatePickerProps<DateValue>, "onChange"> & Pick<BoxProps, "width" | "minHeight"> & {
    variant: ResponsiveValue<"base" | "floating" | "ghost">;
    name?: string | undefined;
    showYearNavigation?: boolean | undefined;
    withPortal?: boolean | undefined;
    onChange?: ((value: DateValue | null) => void) | undefined;
} & React.RefAttributes<HTMLDivElement>>;

type DateRangePickerProps = Omit<AriaDateRangePickerProps<DateValue>, "onChange"> & Pick<BoxProps, "minHeight"> & {
    startLabel?: string;
    startName?: string;
    endLabel?: string;
    endName?: string;
    variant: ResponsiveValue<"base" | "floating" | "ghost">;
    withPortal?: boolean;
    onChange?: (dates: {
        start: DateValue | null;
        end: DateValue | null;
    } | null) => void;
};
/**
 * A date range picker component.
 *
 * There are three variants to choose from – `base`, `floating` and `ghost`.
 *
 * ```tsx
 * <DateRangePicker startLabel="From" startName="from" endLabel="To" endName="to" variant="base" />
 * ```
 */
declare function DateRangePicker({ variant, minHeight, startName, endName, withPortal, ...props }: DateRangePickerProps): React.JSX.Element;

type TimePickerProps = Omit<BoxProps, "defaultValue" | "onChange"> & {
    /** The label. Defaults to a localized version of "Time" */
    label?: string;
    /** The name of the form field, if used in a regular form */
    name?: string;
    /** The controlled value, if any.
     *
     * A `new Time(hours, minutes)` should be passed.
     * Or `null` if the time should be unset.
     **/
    value?: TimeValue | null;
    /** A default value, if any.
     *
     * A `new Time(hours, minutes)` should be passed.
     * Defaults to the current time if not provided.
     * Can be set to null if you don't want a time to be selected by default.
     **/
    defaultValue?: TimeValue | null;
    /** Callback for when the time changes */
    onChange?: (value: TimeValue | null) => void;
    /** The maxiumum number of minutes to move when the step buttons are used.
     *
     * Defaults to 30 minutes.
     *
     * An example: If the time is at 13:37 and the minuteInterval is 15, clicking the step forwards button will move the time to 13:45. Next click will move it to 14:00.
     */
    minuteInterval?: number;
    /** Whether or not the field is disabled */
    isDisabled?: boolean;
};
/** A time picker component.
 *
 * This lets the user select a time of day, either through typing it in, using the up and down arrows to select the hour and minute, or by clicking the step buttons to move the time forwards or backwards in pre-defined increments.
 *
 * ```tsx
 * <TimePicker />
 * ```
 *
 * It can also be controlled:
 *
 * ```tsx
 * <TimePicker value={new Time(13, 37)} onChange={setTime} />
 * ```
 *
 * Note that the TimePicker uses the `Time` class to represent the time. This is a class that is part of the `@internationalized/date` package.
 *
 * @see https://spor.vy.no/komponents/timepicker
 */
declare const TimePicker: ({ label: externalLabel, value, defaultValue, onChange, minuteInterval, isDisabled: isDisabledExternally, name, ...boxProps }: TimePickerProps) => React.JSX.Element;

declare enum Language {
    NorwegianBokmal = "nb",
    NorwegianNynorsk = "nn",
    Swedish = "sv",
    English = "en"
}
type TranslationObject = {
    [key in Language]: string | React.ReactElement;
};
type TranslationFunction = (...args: Array<string | number>) => TranslationObject;
type Translation = TranslationObject | TranslationFunction;
type Translations = {
    [key: string]: Translation | Translations;
};
type LanguageProviderProps = {
    language: Language;
    children: React.ReactElement;
};
/**
 * A language provider component.
 *
 * This component should wrap your entire application. It will provide the language to all components that use it.
 *
 * This is done by the SporProvider component, so most likely, you won't need to use it directly, unless you want to use a specific language for a specific part of your application.
 *
 * ```tsx
 * import { LanguageProvider, Language } from "@vygruppen/spor-react";
 *
 * const App = () => {
 *   return (
 *     <LanguageProvider language={Language.NorwegianBokmal}>
 *       <Routes />
 *     </LanguageProvider>
 *   );
 * }
 * ```
 *
 */
declare function LanguageProvider({ language, children, }: LanguageProviderProps): React.JSX.Element;
/**
 * A hook that returns translation utilities. Typically used to translate text.
 *
 * ```tsx
 * const Example = () => {
 *   const { t } = useTranslation();
 *   return <p>{t(texts.greeting)}</p>;
 * }
 * const texts = {
 *   greeting: {
 *     nb: "Hei",
 *     nn: "Hei",
 *     sv: "Hej",
 *     en: "Hello",
 *   }
 * }
 * ```
 *
 * You can also use it to fetch the current language:
 *
 * ```tsx
 * const Example = () => {
 *   const { language } = useTranslation();
 *   return <p>{language}</p>;
 * };
 * ```
 */
declare function useTranslation(): {
    readonly t: (text: TranslationObject) => string;
    readonly language: Language;
};
/** Utility function that creates type safe text objects with useTranslation
 *
 * ```tsx
 * const texts = createTexts({
 *  example: {
 *   nb: "Eksempel",
 *   nn: "Døme",
 *   sv: "Exempel",
 *   en: "Example",
 *  },
 *  another: {
 *    example: {
 *      nb: <strong>Eksempel</strong>,
 *      nn: <strong>Døme</strong>,
 *      sv: <strong>Exempel</strong>,
 *      en: <strong>Example</strong>,
 *    }
 *  }
 * })
 * ```
 */
declare function createTexts<T extends Translations>(texts: T): T;

type AttachedInputsProps = FlexProps;
/**
 * Attaches several inputs together, so that they look like one input.
 *
 * ```tsx
 * <AttachedInputs>
 *   <Input />
 *   <NativeSelect>
 *     <Item />
 *   </NativeSelect>
 * </AttachedInputs>
 * ```
 */
declare const AttachedInputs: ({ flexDirection, ...rest }: AttachedInputsProps) => React.JSX.Element;

type CardSelectProps = BoxProps & {
    /** The design of the trigger button.
     *
     * - `ghost` is a transparent button with text
     * - `base` is a button with a border and text
     * - `floating` is a button with a drop shadow (like a card) and text
     */
    variant: "base" | "ghost" | "floating";
    /** The size of the trigger button */
    size: "sm" | "md" | "lg";
    /** Whether the card select is open / active, if controlled */
    isOpen?: boolean;
    /** The default state of the card select. Defaults to false (closed) */
    defaultOpen?: boolean;
    /** Callback for when the card select opens or closes. */
    onToggle?: (isOpen: boolean) => void;
    /** An optional trigger button icon, rendered to the left of the label */
    icon?: React.ReactNode;
    /** The content of the card select */
    children: React.ReactNode;
    /** The horizontalOffset of the popover card */
    crossOffset?: number;
    /** The position of the popover card */
    placement?: AriaPositionProps["placement"];
    /** Whether or not to show the chevron. Defaults to true */
    withChevron?: boolean;
    /** Defaults to normal */
    fontWeight?: ResponsiveValue<"normal" | "bold">;
} & ({
    /** The text label of the trigger button */
    label: string;
} | {
    /** Accessible label for the trigger button */
    "aria-label": string;
});
/**
 * A card select component.
 *
 * This component consists of a trigger button and a card select popover. The trigger button has several different variants and sizes, and can have an optional icon.
 *
 * ```tsx
 * <CardSelect label="Languages" variant="card" size="md">
 *   <LanguageSettings />
 * </CardSelect>
 * ```
 *
 * @see https://spor.vy.no/components/card-select
 *
 */
declare const CardSelect: _chakra_ui_system_dist_system_types.ComponentWithAs<"button", CardSelectProps>;

type CheckboxProps = CheckboxProps$1;
/**
 * Creates a checkbox.
 *
 * The checkbox contains its own label, which is passed as a children prop:
 *
 * ```tsx
 * <Checkbox>Accept the terms</Checkbox>
 * ```
 *
 * Unlike regular inputs, it doesn't require its own `FormControl`.
 *
 * You can group several of these together with a `CheckboxGroup`.
 */
declare const Checkbox: _chakra_ui_system_dist_system_types.ComponentWithAs<"input", CheckboxProps$1>;

type CheckboxGroupProps = Exclude<CheckboxGroupProps$1, "colorScheme" | "size" | "variant"> & {
    direction?: StackDirection;
};
/**
 * Used to group several checkboxes together. You can pass the default value, as well as whether or not they're all disabled
 *
 * ```tsx
 * <CheckboxGroup isDisabled defaultValue={['red', 'blue']}>
 *   <Checkbox value="red">Red</Checkbox>
 *   <Checkbox value="blue">Blue</Checkbox>
 *   <Checkbox value="green">Green</Checkbox>
 * </CheckboxGroup>
 * ```
 *
 * By default, checkboxes in a CheckboxGroup show up horizontally. If you want them to show up vertically, please specify the `direction="column"` prop.
 *
 * ```tsx
 * <CheckboxGroup direction="column">
 *   <Checkbox>Economy</Checkbox>
 *   <Checkbox>Business</Checkbox>
 *   <Checkbox>First Class</Checkbox>
 * </CheckboxGroup>
 */
declare const CheckboxGroup: ({ direction, children, ...props }: CheckboxGroupProps) => React.JSX.Element;

type ChoiceChipProps = {
    onChange?: (value: ChangeEvent<HTMLInputElement>) => void;
    isChecked?: boolean;
    isDisabled?: boolean;
    defaultChecked?: boolean;
    /** The button text */
    children: React.ReactNode;
    icon?: {
        default: React.ReactNode;
        checked: React.ReactNode;
    };
    size?: "xs" | "sm" | "md" | "lg";
    chipType?: "icon" | "choice" | "filter";
    variant?: "base" | "accent" | "floating";
};
/**
 * Choice chips are checkboxes that look like selectable buttons.
 *
 * Choice chips are available in four different sizes - `xs`, `sm`, `md` and `lg`.
 *
 * ```tsx
 * <Stack flexDirection="row">
 *   <ChoiceChip size="lg">Bus</ChoiceChip>
 *   <ChoiceChip size="lg">Train</ChoiceChip>
 * </Stack>
 * ```
 *
 * There are also three different chipType - `icon`, `choice` and `filter`.
 *
 * ```tsx
 * <Stack flexDirection="row">
 *  <ChoiceChip chipType="icon" icon={<Bus24Icon />}>Bus</ChoiceChip>
 *  <ChoiceChip chipType="choice" icon={<Bus24Icon />}>Bus</ChoiceChip>
 *  <ChoiceChip chipType="filter" icon={<Bus24Icon />}>Bus</ChoiceChip>
 * </Stack>
 *
 * There are also three different variants - `base`, `accent` and `floating`.
 *
 * ```tsx
 * <Stack flexDirection="row">
 *   <ChoiceChip variant="base">Bus</ChoiceChip>
 *   <ChoiceChip variant="accent">Boat</ChoiceChip>
 *   <ChoiceChip variant="floating">Train</ChoiceChip>
 * </Stack>
 * ```
 */
declare const ChoiceChip: _chakra_ui_system_dist_system_types.ComponentWithAs<_chakra_ui_system_dist_system_types.As, ChoiceChipProps>;

type OverridableInputProps = Pick<InputProps, "marginTop" | "marginBottom" | "marginRight" | "marginLeft" | "marginY" | "marginX" | "paddingTop" | "paddingBottom" | "paddingLeft" | "paddingRight" | "paddingY" | "paddingX" | "leftIcon" | "rightIcon" | "borderTopRightRadius" | "borderTopLeftRadius" | "borderBottomRightRadius" | "borderBottomLeftRadius" | "onFocus">;
type ComboboxProps<T> = AriaComboBoxProps<T> & {
    /** The label of the combobox */
    label: string;
    /** Whether or not the combobox is waiting for new suggestions */
    isLoading?: boolean;
    /** Optional UI to show when there are no matching items */
    emptyContent?: React.ReactNode;
    /** A ref to the input field */
    inputRef?: React.RefObject<HTMLInputElement>;
    /** If you want to allow an empty collection */
    allowsEmptyCollection?: boolean;
} & OverridableInputProps;
/**
 * A combobox is a combination of an input and a list of suggestions.
 *
 * It is used to select a single item from a list of suggestions.
 *
 * @example
 * ```tsx
 * <Combobox
 *   label="Choose a color"
 *   items={[
 *     { label: "Green", value: "green" },
 *     { label: "Blue", value: "blue" },
 *     { label: "Yellow", value: "yellow" },
 *   ]}
 * >
 * {(item) => (
 *   <Item key={item.value} value={item.value}>
 *      {item.label}
 *   </Item>
 *  )}
 * </Combobox>
 * ```
 */
declare function Combobox<T extends object>({ label, isLoading, leftIcon, rightIcon, borderBottomLeftRadius, borderBottomRightRadius, borderTopLeftRadius, borderTopRightRadius, marginBottom, marginTop, marginX, marginY, marginRight, marginLeft, paddingBottom, paddingRight, paddingTop, paddingLeft, paddingX, paddingY, emptyContent, inputRef: externalInputRef, allowsEmptyCollection, ...rest }: ComboboxProps<T>): React.JSX.Element;

type FormControlProps = FormControlProps$1;
declare const FormControl: _chakra_ui_system_dist_system_types.ComponentWithAs<"div", FormControlProps$1>;

type FormErrorMessageProps = BoxProps & {
    /**
     * The error message itself.
     */
    children: React.ReactNode;
};
/** An error message
 *
 * This component is used to show error messages related to a form input.
 * It should _always_ be used inside of a `FormControl` component.
 *
 * It will only render if the `isInvalid` prop of its enclosing `FormControl` component is set to true.
 *
 * ```tsx
 * <FormControl isInvalid={email === ""}>
 *    <Input label="E-mail" value={email} onChange={updateEmail} />
 *    <FormErrorMessage>This field is required</FormErrorMessage>
 * </FormControl>
 * ```
 *
 * If you're using a `FormHelperText` (or any other components inside of the `FormControl`), make sure to render the `FormErrorMessage` before those.
 * ```tsx
 * <FormControl isInvalid={email === ""}>
 *    <Input label="E-mail" value={email} onChange={updateEmail} />
 *    <FormErrorMessage>This field is required</FormErrorMessage>
 *    <FormHelperText>We don't share your email</FormHelperText>
 * </FormControl>
 * ```
 *
 * @see https://spor.vy.no/components/form-control
 */
declare const FormErrorMessage: ({ children, ...boxProps }: FormErrorMessageProps) => React.JSX.Element | null;

type FormLabelProps = FormLabelProps$1;
declare const FormLabel: _chakra_ui_system_dist_system_types.ComponentWithAs<"label", FormLabelProps$1>;

type InfoSelectProps<T extends object> = {
    /**
     * Either a render function accepting an item, and returning a <Item />,
     * or a list of <Item />s.
     *
     * Render function example:
     * ```tsx
     * <Select items={items}>
     *   {(item) => (
     *     <Item key={item.value} value={item.value}>
     *       {item.label}
     *     </Item>
     *   )}
     * </Select>
     * ```
     *
     * For this to work, the members in `items` need either a `key`
     * or an `id` property.
     *
     * List of <Item />s example:
     * ```tsx
     * <Select label="Choose a color">
     *   <Item>Green</Item>
     *   <Item>Blue</Item>
     *   <Item>Yellow</Item>
     * </Select>
     * ```
     **/
    children: React.ReactElement | ((item: T) => React.ReactElement);
    /**
     * The items to render
     *
     * If you have a dynamic list of items you want to display, you should use this prop instead of mapping them out. This is a performance optimization.
     *
     * You can render each item in a render function, passed in as `children`:
     *
     * ```tsx
     * <Select items={items}>
     *   {(item) => <div>{item.someProp}</div>}
     * </Select>
     * ```
     */
    items?: T[];
    /** Callback for when something is selected */
    onChange?: (value: string | number) => void;
    value?: string | number;
    defaultValue?: string | number;
    /** Controlled open state
     *
     * Useful if you want to control the open state from outside the component.
     */
    isOpen?: boolean;
    /** Callback for when the open state of the select box changes.
     *
     * Useful if you want to control the open state from outside the component.
     */
    onOpenChange?: (isOpen: boolean) => void;
    /** The label describing the choice */
    label: string;
    /** Hide the label visually
     *
     * Should be used sparingly, as it makes the component less accessible.
     * Useful for the label is obvious, like a phone number country code select.
     */
    isLabelSrOnly?: boolean;
    /** The name of the select element */
    name?: string;
    /**
     * What's shown if nothing is selected.
     *
     * Defaults to a localized version of "choose an option"
     */
    placeholder?: string;
    /** The width of the select box.
     *
     * Defaults to the width of the selected content
     */
    width?: ResponsiveValue<string | number>;
    /** The height of the select box.
     *
     * Defaults to "auto"
     */
    height?: ResponsiveValue<string | number>;
    isDisabled?: boolean;
    /** A list of disabled keys.
     *
     * ```tsx
     * <Select label="Choose a color" disabledKeys={["blue", "yellow"]}>
     *   <Item key="green">Green</Item>
     *   <Item key="blue">Blue</Item>
     *   <Item key="yellow">Yellow</Item>
     * </Select>
     * ```
     **/
    disabledKeys?: string[];
    /** Whether or not the input is invalid */
    "aria-invalid"?: boolean;
    variant?: "base" | "floating";
};
/**
 * A styled select component.
 *
 * This select component lets you choose between a list of options.
 * Compared to the NativeSelect component, the InfoSelect component lets you style the options however you'd like – including both text, icons and other elements.
 *
 * ```tsx
 * <InfoSelect label="Choose a color">
 *   <SelectOption>Blue</SelectOption>
 *   <SelectOption>Yellow</SelectOption>
 *   <SelectOption>Green</SelectOption>
 * </InfoSelect>
 * ```
 *
 * Alternatvely, you can pass the items into the `items` prop, and create a render function for the items.
 *
 * ```tsx
 * <InfoSelect
 *   label="Choose a color"
 *   items={[
 *     { value: "#f00", label: "Red" },
 *     { value: "#0f0", label: "Green" },
 *     { value: "#00f", label: "Blue" },
 *   ]}
 * >
 *   {(item) => (
 *     <Item key={item.key}>
 *       {item.label}
 *     </Item>
 *   )}
 * </InfoSelect>
 * ```
 *
 * @see https://spor.vy.no/components/info-select
 */
declare function InfoSelect<T extends object>({ placeholder, onChange, value, isLabelSrOnly, defaultValue, variant, ...props }: InfoSelectProps<T>): React.JSX.Element;

type InputProps = Omit<InputProps$1, "variant" | "size"> & {
    /** The input's label */
    label: string;
    /** Icon that shows up to the left */
    leftIcon?: React.ReactNode;
    /** Icon that shows up to the right */
    rightIcon?: React.ReactNode;
};
/**
 * Inputs let you enter text or other data.
 *
 * You need to specify the label as a prop, since it doubles as the placeholder.
 *
 * ```tsx
 * <Input label="E-mail" />
 * ```
 *
 * You can also add icons to the left and right of the input. Please use the 24 px icons for this.
 *
 * ```tsx
 * <Input label="E-mail" leftIcon={<EmailOutline24Icon />} />
 * ```
 */
declare const Input: _chakra_ui_system_dist_system_types.ComponentWithAs<"input", InputProps>;

type InputElementProps = InputElementProps$1;
/**
 * Places an element inside the left side of an input field.
 *
 * Must be used inside of an `InputGroup` component, and before the `Input` component.
 *
 * ```tsx
 * <FormControl>
 *   <InputGroup>
 *     <InputLeftElement>🔎</InputLeftElement>
 *     <Input label="Search" />
 *   </InputGroup>
 * </FormControl>
 * ```
 */
declare const InputLeftElement: _chakra_ui_system_dist_system_types.ComponentWithAs<"div", InputElementProps$1>;
/**
 * Places an element inside the right side of an input field.
 *
 * Must be used inside of an `InputGroup` component, and after the `Input` component.
 *
 * ```tsx
 * <FormControl>
 *   <InputGroup>
 *     <Input label="Search" />
 *     <InputRightElement>🔎</InputRightElement>
 *   </InputGroup>
 * </FormControl>
 * ```
 */
declare const InputRightElement: _chakra_ui_system_dist_system_types.ComponentWithAs<"div", InputElementProps$1>;

type ListBoxProps<T> = AriaListBoxProps<T> & Omit<BoxProps, "filter" | "autoFocus" | "children"> & {
    /** External reference to the ListBox itself */
    listBoxRef: React.RefObject<HTMLUListElement>;
    /** Whether or not the listbox is waiting on new data, i.e. through a autosuggest search */
    isLoading?: boolean;
    /** The state of the listbox, provided externally somehow. */
    state: ListState<T> | SelectState<T>;
    /** UI to render if the collection is empty */
    emptyContent?: React.ReactNode;
    maxWidth?: BoxProps["maxWidth"];
};
/**
 * A component that renders a list box with selectable options.
 *
 * @example
 * ```jsx
 * const options = [
 *   { id: 1, name: "Option 1" },
 *   { id: 2, name: "Option 2" },
 *   { id: 3, name: "Option 3" },
 * ];
 *
 * const state = useListState({ items: options });
 * const ref = useRef(null);
 *
 * return (
 *   <ListBox state={state} listBoxRef={ref}>
 *     {(option) => <div key={option.id}>{option.name}</div>}
 *   </ListBox>
 * );
 * ```
 *
 * @example
 * ```jsx
 * const { data, isLoading } = useSWR('/api/options')
 * const state = useListState({ items: data });
 * const ref = useRef(null);
 *
 * return (
 *   <ListBox state={state} isLoading={isLoading} ref={ref}>
 *     {(option) => <div key={option.id}>{option.name}</div>}
 *   </ListBox>
 * );
 * ```
 */
declare function ListBox<T extends object>({ isLoading, listBoxRef, state, maxWidth, ...props }: ListBoxProps<T>): React.JSX.Element;
/**
 * Renders a label for a listbox item.
 *
 * Useful if you want to render a custom Item - especially if it has a description.
 */
declare function ItemLabel({ children }: {
    children: React.ReactNode;
}): React.JSX.Element;
/**
 * Renders a description for an Item.
 *
 * Useful if you want to render a custom Item with more than just a label.
 */
declare function ItemDescription({ children }: {
    children: React.ReactNode;
}): React.JSX.Element;

type NativeSelectProps = Exclude<SelectProps, "colorScheme" | "variant" | "size"> & {
    label?: string;
};
/**
 * Selects let you choose between several options
 *
 * You should consider only using the Select component when you have more than  4 options. Otherwise, you should use the `<Radio>` component.
 *
 * ```tsx
 * <NativeSelect label="Select level of luxury">
 *  <option>No luxury</option>
 *  <option>Some luxury</option>
 *  <option>Lots of luxury</option>
 *  <option>I'm rich</option>
 * </NativeSelect>
 * ```
 */
declare const NativeSelect: _chakra_ui_system_dist_system_types.ComponentWithAs<"select", NativeSelectProps>;

type NumericStepperProps = {
    /** The name of the input field */
    name?: string;
    /** The current value */
    value?: number;
    /** A default value, if uncontrolled */
    defaultValue?: number;
    /** Callback for when the value changes */
    onChange?: (value: number) => void;
    /** Optional minimum value. Defaults to 0 */
    minValue?: number;
    /** Optional maximum value. Defaults to 99 */
    maxValue?: number;
    /** Whether the stepper is disabled or not */
    isDisabled?: boolean;
    /** Whether to show input field or not */
    withInput?: boolean;
    /** The amount to increase/decrease when pressing +/- */
    stepSize?: number;
    /** Whether to show the number input when value is zero  */
    showZero?: boolean;
} & Omit<BoxProps, "onChange">;
/** A simple stepper component for integer values
 *
 * Allows you to choose a given integer value, like for example the number of
 * adults on your journey.
 *
 * ```tsx
 * <NumericStepper value={value} onChange={setValue} />
 * ```
 *
 * You can also set a minimum and/or maximum value and step size:
 *
 * ```tsx
 * <NumericStepper value={value} onChange={setValue} minValue={1} maxValue={10} stepSize={3} />
 * ```
 *
 * You can use the NumericStepper inside of a FormControl component to get IDs etc linked up automatically:
 *
 * ```tsx
 * <FormControl>
 *   <FormLabel>Number of adults</FormLabel>
 *   <NumericStepper />
 * </FormControl>
 * ```
 */
declare function NumericStepper({ name: nameProp, id: idProp, value: valueProp, defaultValue, onChange: onChangeProp, minValue, maxValue, isDisabled, withInput, stepSize, showZero, ...boxProps }: NumericStepperProps): React.JSX.Element;

type PasswordInputProps = InputProps;
declare const PasswordInput: _chakra_ui_system_dist_system_types.ComponentWithAs<"input", InputProps>;

type CountryCodeAndPhoneNumber = {
    countryCode: string;
    nationalNumber: string;
};
type PhoneNumberInputProps = Omit<BoxProps, "onChange"> & {
    /** The label. Defaults to a localized version of "Phone number" */
    label?: string;
    /** The root name.
     *
     * Please note that when specifying the name, the rendered names will be `${name}-country-code` and `${name}-phone-number`, respectively
     */
    name?: string;
    /** Callback for when the country code or phone number changes */
    onChange?: (change: CountryCodeAndPhoneNumber) => void;
    /** The optional value of the country code and phone number */
    value?: CountryCodeAndPhoneNumber;
};
/**
 * A component for entering phone numbers.
 *
 * ```tsx
 * <PhoneNumberInput name="phone" />
 * ```
 *
 * > Please note that when specifying the name, the rendered names will be `${name}-country-code` and `${name}-phone-number`, respectively
 *
 * The field can be controlled as well:
 * ```tsx
 * <PhoneNumberInput
 *   value={{ countryCode: '+47', phoneNumber: '81549300' }}
 *   onChange={handleChange}
 * />
 * ```
 */
declare const PhoneNumberInput: _chakra_ui_system_dist_system_types.ComponentWithAs<As, PhoneNumberInputProps>;

type RadioProps = Exclude<RadioProps$1, "colorScheme" | "size" | "variant">;
/**
 * The humble radio button.
 *
 * Specify the label as `children` and the value as `value`.
 *
 * ```tsx
 * <Radio value="#f00">Red</Radio>
 * ```
 *
 * You typically want to place Radio components in a group with several other Radio components. You can do that with the `RadioGroup` component.
 *
 * ```tsx
 * <RadioGroup name="ticket">
 *   <Radio value="economy">Economy</Radio>
 *   <Radio value="business">Business</Radio>
 *   <Radio value="first-class">First Class</Radio>
 * </RadioGroup>
 */
declare const Radio: _chakra_ui_system_dist_system_types.ComponentWithAs<"input", RadioProps$1>;

type RadioGroupProps = Exclude<RadioGroupProps$1, "colorScheme" | "size" | "variant"> & {
    direction?: StackDirection;
};
/**
 * Radio groups are used to group several radio buttons together.
 *
 * You can pass the common `name` prop to the `RadioGroup`, instead of to each `Radio` component.
 *
 * ```tsx
 * <RadioGroup name="ticket">
 *   <Radio>Economy</Radio>
 *   <Radio>Business</Radio>
 *   <Radio>First Class</Radio>
 * </RadioGroup>
 * ```
 *
 * By default, radio buttons show up horizontally. If you want them to show up vertically, please specify the `direction="column"` prop.
 *
 * ```tsx
 * <RadioGroup name="ticket" direction="column">
 *   <Radio>Economy</Radio>
 *   <Radio>Business</Radio>
 *   <Radio>First Class</Radio>
 * </RadioGroup>
 * ```
 */
declare const RadioGroup: _chakra_ui_system_dist_system_types.ComponentWithAs<"div", RadioGroupProps>;

type SearchInputProps = Exclude<InputProps$1, "variant" | "size" | "leftIcon" | "rightIcon"> & {
    /** Optional label. Defaults to the localized version of "search" */
    label?: string;
    /** Callback for when the clear button is clicked */
    onReset?: () => void;
};
/** Simple search input component.
 *
 * Includes a search icon, a localized label and a reset button.
 */
declare const SearchInput: _chakra_ui_system_dist_system_types.ComponentWithAs<"input", SearchInputProps>;

type SwitchProps = Omit<SwitchProps$1, "colorScheme" | "variant"> & {
    size?: "sm" | "md" | "lg";
};
/**
 * A switch lets you toggle between on and off, yes and no. It's an alternative to a checkbox.
 *
 * You can use a Switch component inside of a `FormControl` with an associated `FormLabel`:
 *
 * ```tsx
 * <FormControl>
 *   <FormLabel>Enable alerts?</FormLabel>
 *   <Switch />
 * </FormControl>
 * ```
 *
 * Switches are available in three different sizes - `sm`, `md` and `lg`.
 *
 * ```tsx
 * <FormControl>
 *   <FormLabel>Enable alerts?</FormLabel>
 *   <Switch size="sm" />
 * </FormControl>
 * ```
 */
declare const Switch: _chakra_ui_system_dist_system_types.ComponentWithAs<"input", SwitchProps>;

type TextareaProps = Exclude<TextareaProps$1, "variant" | "size"> & {
    label?: string;
};
/**
 * Text area that works with the `FormControl` component.
 *
 * Providing a label is optional.
 *
 * ```tsx
 * <FormControl>
 *   <Textarea label="E-mail" />
 * </FormControl>
 * ```
 */
declare const Textarea: _chakra_ui_system_dist_system_types.ComponentWithAs<"textarea", TextareaProps>;

type Variant =
  | "local-train"
  | "region-train"
  | "region-express-train"
  | "long-distance-train"
  | "airport-express-train"
  | "vy-bus"
  | "local-bus"
  | "ferry"
  | "subway"
  | "tram"
  | "alt-transport"
  | "walk";

type Size = "sm" | "md" | "lg";

type TagProps = VariantProps$1 & {
  size: Size;
  title: string;
  description?: string;
};

type DefaultVariantProps$1 = {
  variant: Variant;
};
type CustomVariantProps$1 = {
  variant: "custom";
  /** When variant="custom", the foreground color of the tag */
  foregroundColor: string;
  /** When variant="custom", the background color of the tag */
  backgroundColor: string;
  /** When variant="custom", this is the icon you want to display.
   * It should be one of the other variants
   */
  customIconVariant: Variant;
};
type VariantProps$1 = DefaultVariantProps$1 | CustomVariantProps$1;

type InfoTagProps = TagProps;
/**
 * An info tag component.
 *
 * Shows a line icon, a title and an optional description.
 *
 * ```tsx
 * <InfoTag variant="subway" title="3" description="Ringen" />
 * ```
 * They support three different sizes – `sm`, `md` and `lg`.
 *
 * ```tsx
 * <InfoTag
 *   variant="subway"
 *   size="lg"
 *   title="3"
 *   description="Ringen"
 * />
 * ```
 *
 * If required, you can also override the colors and icons in these line tags:
 *
 * ```tsx
 * <InfoTag
 *  variant="custom"
 *  customIconVariant="ferry"
 *  foregroundColor="#b4da55"
 *  backgroundColor="#c0ffee"
 * />
 * ```
 *
 * @see https://spor.vy.no/components/line-tags
 */
declare const InfoTag: ({ variant, size, title, description, ...customProps }: InfoTagProps) => React.JSX.Element;

type DefaultVariants = Exclude<TagProps["variant"], "custom">;
type DefaultVariantProps = {
    variant: DefaultVariants;
};
type CustomVariantProps = {
    variant: "custom";
    customIconVariant: DefaultVariants;
    foregroundColor: string;
    backgroundColor: string;
};
type VariantProps = DefaultVariantProps | CustomVariantProps;
type LineIconProps = Exclude<BoxProps, "variant"> & VariantProps & {
    size: TagProps["size"];
};
/**
 * A line icon component.
 *
 * Shows a line icon with the correct color scheme.
 *
 * ```tsx
 * <LineIcon variant="subway" />
 * ```
 *
 * They support three different sizes – `sm`, `md` and `lg`.
 *
 * ```tsx
 * <LineIcon variant="subway" size="lg" />
 * ```
 *
 * If you require some one-off colors, but still want to use the line tag component,
 * you can do so like this:
 *
 * ```tsx
 * <LineIcon
 *  variant="custom"
 *  customIconVariant="ferry"
 *  foregroundColor="#b4da55"
 *  backgroundColor="#c0ffee"
 * />
 * ```
 *
 * @see https://spor.vy.no/components/line-tags
 */
declare const LineIcon: ({ variant, size, sx, ...rest }: LineIconProps) => React.JSX.Element | null;

type TravelTagProps = TagProps & BoxProps & {
    deviationLevel?: "critical" | "major" | "minor" | "info" | "none";
    isDisabled?: boolean;
};
/**
 * A travel tag component.
 *
 * Shows a line icon, a title and an optional description.
 *
 * ```tsx
 * <TravelTag variant="subway" title="3" description="Ringen" />
 * ```
 *
 * They support three different sizes – `sm`, `md` and `lg`.
 *
 * You can also render them with a deviation level to indicate an extra focus:
 *
 * ```tsx
 * <TravelTag
 *   variant="subway"
 *   title="3"
 *   description="Ringen"
 *   size="lg"
 *   deviationLevel="critical"
 * />
 * ```
 *
 * Travel tags can be clickable by passing an `as="button"` prop. They can also be disabled.
 *
 * ```tsx
 * <TravelTag
 *  as="button"
 *  onClick={handleClick}
 *  variant="subway"
 *  title="3"
 *  description="Ringen"
 * />
 * ```
 *
 * If required, you can also override the colors and icons in these travel tags:
 *
 * ```tsx
 * <TravelTag
 *   variant="custom"
 *   customIconVariant="ferry"
 *   foregroundColor="#b4da55"
 *   backgroundColor="#c0ffee"
 *   title="3"
 *   description="Ringen"
 * />
 * ```
 *
 * @see https://spor.vy.no/components/line-tags
 */
declare const TravelTag: _chakra_ui_system_dist_system_types.ComponentWithAs<As, TravelTagProps>;

type LinkProps = Omit<LinkProps$1, "variant"> & {
    variant?: "primary" | "secondary";
};
/** Link to different sites or parts of site
 *
 * You can specify the `variant` prop to get different link designs.
 */
declare const TextLink: _chakra_ui_system_dist_system_types.ComponentWithAs<"a", LinkProps>;

type ColorInlineLoaderProps = Exclude<BoxProps, "children">;
/**
 * Loading component that works well in bounded contexts, like inside a button.
 *
 * This component should only be used on light backgrounds with low saturation (e.g. white, light grey etc.). For colored backgrounds, please use the LightInlineLoader component.
 */
declare const ColorInlineLoader: ({ width, maxWidth, ...props }: ColorInlineLoaderProps) => React.JSX.Element;

type SpinnerProps = BoxProps;
type ColorSpinnerProps = SpinnerProps;
/** A circular spinner
 *
 * Can be used in place of a loading animation, or for reloading app state, for instance.
 *
 * ```tsx
 * <ColorSpinner width="64px" height="64px" />
 * ```
 *
 * You can also pass an explanatory text as `children`:
 *
 * ```tsx
 * <ColorSpinner>
 *   Hold your horses
 * </ColorSpinner>
 */
declare const ColorSpinner: ({ children, width, maxWidth, ...props }: SpinnerProps) => React.JSX.Element;

type ContentLoaderProps = BoxProps;
/**
 * ContentLoader is a component that renders a loading animation.
 * It should mostly be used for
 */
declare const ContentLoader: ({ children, ...props }: ContentLoaderProps) => React.JSX.Element;

type DarkFullScreenLoaderProps = BoxProps;
declare const DarkFullScreenLoader: ({ width, maxWidth, ...props }: DarkFullScreenLoaderProps) => React.JSX.Element;

type DarkInlineLoaderProps = Exclude<BoxProps, "children">;
/**
 * Loading component that works well in bounded contexts, like inside a button.
 */
declare const DarkInlineLoader: ({ width, maxWidth, ...props }: DarkInlineLoaderProps) => React.JSX.Element;

type DarkSpinnerProps = BoxProps;
/** A circular spinner
 *
 * Can be used in place of a loading animation, or for reloading app state, for instance.
 *
 * ```tsx
 * <DarkSpinner width="64px" height="64px" />
 * ```
 *
 * You can also pass an explanatory text as `children`:
 *
 * ```tsx
 * <DarkSpinner>
 *   Hold your horses
 * </DarkSpinner>
 */
declare const DarkSpinner: ({ children, width, maxWidth, ...props }: DarkSpinnerProps) => React.JSX.Element;

type LightFullScreenLoaderProps = BoxProps;
declare const LightFullScreenLoader: ({ width, maxWidth, ...props }: LightFullScreenLoaderProps) => React.JSX.Element;

type LightInlineLoaderProps = Exclude<BoxProps, "children">;
/**
 * Loading component that works well in bounded contexts, like inside a button.
 */
declare const LightInlineLoader: ({ width, maxWidth, ...props }: LightInlineLoaderProps) => React.JSX.Element;

type LightSpinnerProps = BoxProps;
/** A circular spinner
 *
 * Can be used in place of a loading animation, or for reloading app state, for instance.
 *
 * ```tsx
 * <LightSpinner width="64px" height="64px" />
 * ```
 *
 * You can also pass an explanatory text as `children`:
 *
 * ```tsx
 * <LightSpinner>
 *   Hold your horses
 * </LightSpinner>
 */
declare const LightSpinner: ({ children, width, maxWidth, ...props }: LightSpinnerProps) => React.JSX.Element;

type ProgressBarProps = BoxProps & {
    /** The percentage of progress made.
     *
     * The value must be between 0 and 100 */
    value: number;
    /** The height of the progress bar.
     * Defaults to .5rem
     **/
    height?: BoxProps["height"];
    /** The width of the progress bar.
     *
     * Defaults to the width of its container
     **/
    width?: BoxProps["width"];
    /** Pass if no label is passed to the label */
    "aria-label": string;
    /** Optional text shown below the loader.
     *
     * If you pass an array of strings, the text will rotate every 5 seconds. If you want to change the delay, pass the delay in milliseconds to the `labelRotationDelay` prop.
     */
    label: string | string[];
    /** The number of milliseconds a label is shown, if an array of strings is passed to the `label` prop.
     *
     * Defaults to 5000 (5 seconds).
     */
    labelRotationDelay?: number;
};
/**
 * Shows the progress of a loading process.
 *
 * You can pass the amount of progress with the `value` prop:
 *
 * ```tsx
 * <ProgressBar value={50} />
 * ```
 *
 *  You can also pass a label to show below the loader:
 *
 * ```tsx
 * <ProgressBar value={50} label="Loading..." />
 * ```
 *
 * If you pass an array of strings, the text will rotate every 5 seconds. If you want to change the delay, pass the delay in milliseconds to the `labelRotationDelay` prop.
 *
 * ```tsx
 * <ProgressBar value={50} label={["Loading...", "Almost there..."]} />
 * ```
 *
 * If you don't pass a label, you should pass an `aria-label` prop:
 *
 * ```tsx
 * <ProgressBar value={50} aria-label="Loading..." />
 * ```
 */
declare const ProgressBar: ({ value, label, labelRotationDelay, height, width, "aria-label": ariaLabel, ...rest }: ProgressBarProps) => React.JSX.Element;

type ProgressLoaderProps = BoxProps & {
    /** The percentage of progress made.
     *
     * The value must be between 0 and 100 */
    value: number;
    /** The width of the progress bar.
     *
     * Defaults to the width of its container
     **/
    width?: BoxProps["width"];
    /** Pass if no label is passed to the label */
    "aria-label": string;
    /** Optional text shown below the loader.
     *
     * If you pass an array of strings, the text will rotate every 5 seconds. If you want to change the delay, pass the delay in milliseconds to the `labelRotationDelay` prop.
     */
    label: string | string[];
    /** The number of milliseconds a label is shown, if an array of strings is passed to the `label` prop.
     *
     * Defaults to 5000 (5 seconds).
     */
    labelRotationDelay?: number;
};
/**
 * Shows the progress of a loading process.
 *
 * You can pass the amount of progress with the `value` prop:
 *
 * ```tsx
 * <ProgressLoader value={50} />
 * ```
 *
 * You can also pass a label to show below the loader:
 *
 * ```tsx
 * <ProgressLoader value={50} label="Loading..." />
 * ```
 *
 * If you pass an array of strings, the text will rotate every 5 seconds. If you want to change the delay, pass the delay in milliseconds to the `labelRotationDelay` prop.
 *
 * ```tsx
 * <ProgressLoader value={50} label={["Loading...", "Almost done..."]} />
 * ```
 *
 * If you don't pass a label, you should pass an `aria-label` prop:
 *
 * ```tsx
 * <ProgressLoader value={50} aria-label="Fetching your trips..." />
 * ```
 */
declare const ProgressLoader: ({ value, label, labelRotationDelay, "aria-label": ariaLabel, width, ...rest }: ProgressLoaderProps) => React.JSX.Element;

type SkeletonProps = BoxProps & {
    isLoaded?: boolean;
};
/**
 * Skeleton renders a loading animation for a given box. It works great as a placeholder to avoid layout shifts.
 */
declare const Skeleton: _chakra_ui_system_dist_system_types.ComponentWithAs<"div", SkeletonProps>;

type SkeletonCircleProps = BoxProps;
/**
 * SkeletonCircle renders a loading animation for a given circle. It works great as a placeholder to avoid layout shifts.
 */
declare const SkeletonCircle: (props: SkeletonCircleProps) => React.JSX.Element;

type SkeletonTextProps = SkeletonTextProps$1;
/**
 * SkeletonText renders a loading animation for a given text. It works great as a placeholder to avoid layout shifts.
 */
declare const SkeletonText: (props: SkeletonTextProps) => React.JSX.Element;

type VyLogoProps = {
    /** The color of the logo
     *
     * Use `"light"` when the logo is used on a light background.
     * Use `"dark"` when the logo is used on a dark background.
     */
    colorScheme: "light" | "dark";
} & BoxProps;
declare const VyLogo: ({ colorScheme, ...boxProps }: VyLogoProps) => React.JSX.Element;

type VyLogoPrideProps = {
    /** The color of the logo
     *
     * Use `"light"` when the logo is used on a light background.
     * Use `"dark"` when the logo is used on a dark background.
     */
    colorScheme: "light" | "dark";
} & BoxProps;
declare const VyLogoPride: ({ colorScheme, ...boxProps }: VyLogoPrideProps) => React.JSX.Element;

type CargonetLogoProps = {
    /** The color of the logo
     *
     * Use `"light"` when the logo is used on a light background.
     * Use `"dark"` when the logo is used on a dark background.
     */
    colorScheme: "light" | "dark";
} & BoxProps;
declare const CargonetLogo: ({ colorScheme, ...boxProps }: CargonetLogoProps) => React.JSX.Element;

type JumpButtonProps = BoxProps & {
    onClick: () => void;
    "aria-label"?: string;
    isDisabled?: boolean;
    direction: "backward" | "forward";
    size: "sm" | "lg";
};
/**
 * A jump button.
 *
 * Intended to jump 15 seconds forward or backward in a video, podcast, audiobook or similar.
 *
 * Specify what direction you want to skip with the `direction` prop.
 *
 * ```tsx
 * <JumpButton direction="forward" onClick={onGoForward} />
 * ```
 */
declare const JumpButton: ({ direction, isDisabled, size, ...props }: JumpButtonProps) => React.JSX.Element;

type PlayPauseButtonProps = BoxProps & {
    onClick: () => void;
    "aria-label"?: string;
    isDisabled?: boolean;
    isPlaying: boolean;
    size: "sm" | "lg";
};
/**
 * A playback button.
 *
 * Intended to start or pause playback of a video, podcast, audiobook or similar.
 *
 * Specify the current playing state with `isPlaying`.
 *
 * ```tsx
 * <PlayPauseButton isPlaying={isPlaying} onClick={onPlaybackClick} />
 * ```
 */
declare const PlayPauseButton: ({ size, isPlaying, isDisabled, ...props }: PlayPauseButtonProps) => React.JSX.Element;

type SkipButtonProps = BoxProps & {
    onClick: () => void;
    "aria-label"?: string;
    isDisabled?: boolean;
    direction: "backward" | "forward";
    size: "sm" | "lg";
};
/**
 * A skip button.
 *
 * Intended to skip to the next section, chapter og similar.
 *
 * Specify what direction you want to skip with the `direction` prop.
 *
 * ```tsx
 * <SkipButton direction="forward" onClick={onNextChapter} />
 * ```
 */
declare const SkipButton: ({ direction, isDisabled, size, ...props }: SkipButtonProps) => React.JSX.Element;

type ModalHeaderProps = ModalHeaderProps$1 & {
    size?: "sm" | "lg";
};
/**
 * ModalHeader
 *
 * You can specify the size with either `size="sm"` or `size="lg"`.
 */
declare const ModalHeader: _chakra_ui_system_dist_system_types.ComponentWithAs<"header", ModalHeaderProps>;

type DrawerProps = DrawerProps$1;
declare const Drawer: (props: DrawerProps) => React.JSX.Element;
declare const DrawerContent: _chakra_ui_system_dist_system_types.ComponentWithAs<any, DrawerContentProps>;

type DrawerBodyProps = {
    id?: string;
};
type SimpleDrawerProps = {
    children: React.ReactNode;
    title?: React.ReactNode;
    placement: "top" | "right" | "bottom" | "left";
    isOpen: boolean;
    onClose: () => void;
    /** Props for drawer body */
    body?: DrawerBodyProps;
};
/** A very basic drawer component that's easy to use
 *
 * ```tsx
 * <SimpleDrawer placement="bottom" isOpen={isOpen} onClose={handleClose}>
 *   This is the drawer content
 * </SimpleDrawer>
 * ```
 *
 * For more advanced use cases, see the [Drawer](./Drawer.tsx) component.
 */
declare const SimpleDrawer: ({ placement, children, title, body, ...props }: SimpleDrawerProps) => React.JSX.Element;

type DrawerPlacement = "top" | "right" | "bottom" | "left";
type FullScreenDrawerProps = {
    /** The content inside the drawer */
    children: React.ReactNode;
    /** The title in the middle of the top menu */
    title?: String;
    /** Determines which side the drawer slides from */
    placement?: DrawerPlacement;
    /** A React component that will be placed to the left in the modal header */
    leftButton?: React.ReactNode;
    /** A React component that will be placed to the right in the modal header */
    rightButton?: React.ReactNode;
    /** Determines if the drawer is open or closed */
    isOpen: boolean;
    /** Function that will be called when the drawer closes */
    onClose: () => void;
    /** Props for drawer body */
    body?: DrawerBodyProps;
};
declare const FullScreenDrawer: ({ children, title, placement, leftButton, rightButton, isOpen, onClose, body, }: FullScreenDrawerProps) => React.JSX.Element;

type TooltipProps = PopoverProps & {
    /**
     * Whatever is supposed to trigger the tooltip.
     * Must be focusable - like a link or button */
    children: React.ReactNode;
    /** Callback for when the tooltip is requested to close */
    onClose?: () => void;
    /** Should the tooltip have a close button? */
    withCloseButton?: boolean;
    /** The content of the tooltip */
    content: React.ReactNode;
    /** Use this prop if you want to control the open state */
    isOpen?: boolean;
    /** Whether or not the tooltip is open by default */
    defaultIsOpen?: boolean;
    /**
     * Where the tooltip should be placed by default.
     *
     * Note - this is a suggestion, and may be overridden by space concerns.
     */
    placement?: "top" | "bottom" | "left" | "right";
    /**
     * The amount of spacing.
     * Tooltips with lots of content should be `lg`. Defaults to `sm`.
     **/
    size?: "sm" | "lg";
};
/** A tooltip component. */
declare const Tooltip: ({ children, content, onClose, isOpen, defaultIsOpen, placement, size, withCloseButton, ...props }: TooltipProps) => React.JSX.Element;

type NudgeProps = {
    /**
     * The ISO-formatted date of when the Nudge was introduced.
     *
     * After this date has been surpassed by 30 days, the nudge will no longer be shown,
     * and an error will be logged in development mode.
     *
     * ```tsx
     * <Nudge introducedDate="2024-02-19" {...otherProps} />
     * ```
     **/
    introducedDate: string;
    /**
     * The name of the nudge.
     * This will be used to check whether or not the nudge has been viewed.
     **/
    name: string;
    /**
     * The anchor of the nudge.
     *
     * The element that should be nudged toward.
     *
     * ```tsx
     * <Nudge content="This is a great new feature! Try it out.">
     *  <MyFeature />
     * </Nudge>
     * ```
     * */
    children: React.ReactNode;
    /**
     * The content of the nudge.
     */
    content: React.ReactNode;
    /**
     * Any actions you want to provide. Defaults to a close button and a "Show me" button.
     */
    actions?: React.ReactNode;
} & Omit<TooltipProps, "name" | "triggerElement" | "children" | "withCloseButton" | "defaultIsOpen" | "size" | "borderRadius">;
/** A nudge.
 *
 * A nudge is a way to hint of a new feature.
 *
 * You're required to set an `introducedDate` to the nudge, which is the timestamp of when the nudge was introduced. After 30 days, the nudge will no longer be shown, and an error will be logged in development mode.
 *
 * ```tsx
 * <Nudge
 *  introducedDate="2024-02-19"
 *  name="my-nudge"
 *  content="Check out this enormous new feature!"
 * >
 *   <StaticCard variant="base" padding={2} width="fit-content">My new feature</StaticCard>
 * </Nudge>
 * ```
 */
declare const Nudge: ({ introducedDate, name, children, content, actions, ...props }: NudgeProps) => React.JSX.Element | null;

type WizardNudgeProps = Omit<NudgeProps, "actions" | "content"> & {
    /** Steps in the wizard. Each item is its own step. Should only be Step components */
    content: React.ReactNode[];
    /**
     * Where the nudge should be placed by default.
     *
     * Note - this is a suggestion, and may be overridden by space concerns.
     */
    placement?: "top" | "bottom" | "left" | "right";
};
/**
 * A nudge that displays its children one at a time, with a step indicator.
 *
 * ```tsx
 * <WizardNudge
 *  content={["First step", "Second step"]}
 *  name="my-wizard-nudge"
 *  introducedDate="2024-02-19"
 * >
 *   <StaticCard width="fit-content" padding={2}>
 *    My new feature
 *  </StaticCard>
 * </WizardNudge>
 * ```
 */
declare const WizardNudge: ({ children, name, onClose, content, ...props }: WizardNudgeProps) => React.JSX.Element;

type PaginationProps = {
    /** Specify the total amount of pages */
    totalPages: number;
    /** Specify the currently selected page */
    selectedPage: number;
    /** Callback for when a page is clicked */
    onPageChange: (selected: number) => void;
};
/**
 * A pagination component is used to navigate between multiple pages.
 *
 * You specify the total amount of pages and the currently selected page.
 *
 * ```tsx
 * <Pagination
 *   totalPages={10}
 *   selectedPage={3}
 *   onPageChange={handlePageChange}
 * />
 * ```
 **/
declare const Pagination: ({ totalPages, selectedPage, onPageChange, }: PaginationProps) => React.JSX.Element;

type ProgressIndicatorProps = {
    numberOfSteps: number;
    activeStep: number;
};
/**
 * A progress indicator is used to show which step of a process a user is currently in
 * to give them a sense of progress.
 *
 * You specify the active step, which starts at 1 (not 0)
 *
 * ```tsx
 * <ProgressIndicator
 *  numberOfSteps={3}
 *  activeStep={2}
 * />
 * ```
 */
declare const ProgressIndicator: ({ numberOfSteps, activeStep, }: ProgressIndicatorProps) => React.JSX.Element;

type SporProviderProps = ChakraProviderProps & {
    language?: Language;
    brand?: Brand;
};
/**
 * This component is used to provide the specified theme of colors and other
 * design tokens to the remainder of the application, as well as the current language.
 *
 * Please place it as close to the root of your application as possible -
 * at least before rendering any UI.
 *
 * You can pass your own theme to this component. If you don't (and most of the time you won't), the default Spor theme will be used.
 *
 * You should specify the current language of your application. This is specified to provide any built-in microcopy and labels for any Spor components. The default is Norwegian (bokmål).
 *
 * ```tsx
 * * import { SporProvider, Language } from "@vygruppen/spor-react";
 * const root = React.createRoot(document.getElementById("root"))
 * root.render(
 *  <SporProvider language={Language.English}>
 *    <App />
 *  </SporProvider>
 * );
 * ```
 *
 * You can pass specific overrides to the theme if you need to. Adding application specific design tokens, for example could be a useful thing to do.
 *
 * ```tsx
 * import { extendTheme, SporProvider } from "@vygruppen/spor-react";
 * const theme = extendTheme({
 *  colors: { myApp: { primary: "tomato" } }
 * });
 * const root = React.createRoot(document.getElementById("root"))
 * root.render(
 *  <SporProvider language={Language.Swedish} theme={theme}>
 *    <App />
 *  </SporProvider>
 * );
 * ```
 */
declare const SporProvider: ({ theme, language, brand, children, ...props }: SporProviderProps) => React.JSX.Element;

type StepperProps = {
    /** Callback for when a step is clicked */
    onClick: (clickedStep: number) => void;
    /** Callback for when the back button is clicked (on smaller screens).
     *
     * If this is not provided, the back button will not be shown on smaller screens on the first step.
     */
    onBackButtonClick?: (stepNumberToGoTo: number) => void;
    /**
     * Heading shown on smaller devices
     * @deprecated Use `heading` instead
     */
    title?: string;
    /** Heading shown on smaller devices */
    heading?: string;
    /**
     * The heading level rendered for the heading shown on smaller devices.
     *
     * Defaults to h2
     * */
    headingLevel?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "p";
    /** The currently active step */
    activeStep: number;
    /** The labels of each step */
    steps: string[];
    /** The variant.
     * "base" has a transparent background,
     * while "accent" has a slight accent color  */
    variant: "base" | "accent";
    /** Disables all clicks */
    isDisabled?: boolean;
};
/**
 * A stepper is used to show which step of a process a user is currently in.
 *
 * You specify the active step, which starts at 1 (not 0)
 *
 * ```tsx
 * <Stepper
 *   title="Example"
 *   onClick={handleStepClick}
 *   activeStep={2}
 *   steps={['Where', 'When', 'How']}
 * />
 * ```
 **/
declare const Stepper: ({ onClick, onBackButtonClick, steps, activeStep: activeStepAsStringOrNumber, title, heading, headingLevel, variant, isDisabled, }: StepperProps) => React.JSX.Element;

type StepperStepProps = {
    children: React.ReactNode;
    stepNumber: number;
    variant: "base" | "accent";
    isDisabled?: boolean;
};
declare const StepperStep: ({ children, stepNumber, variant, isDisabled: isDisabledOverride, }: StepperStepProps) => React.JSX.Element;

type TabsProps = Exclude<TabsProps$1, "colorScheme" | "variant" | "orientation" | "size"> & {
    /** Defaults to `base` */
    variant: "base" | "accent";
    /** Defaults to `sm` */
    size?: "xs" | "sm" | "md" | "lg";
};
declare const Tabs: _chakra_ui_system_dist_system_types.ComponentWithAs<"div", TabsProps>;

type TableProps = Omit<TableProps$1, "variant" | "colorScheme"> & {
    variant?: "simple" | "outline";
    colorScheme?: "grey" | "green";
};
/**
 * These components are used the same way as in Chakra UI. Please refer to [their documentation](https://chakra-ui.com/docs/data-display/table).
 *
 * The `Table` component has support for two different variants - `simple` and `outline`. The `simple` variant has basic lines between rows, while the `outline` variant has borders for each cell, plus a hover effect per row.
 *
 * You can also specify a `grey` or `green` `colorScheme` prop. Use `green` if you want to place the table on a light green background.
 *
 * Finally, there are three different `size` props you can specify - `sm`, `md` and `lg`.
 *
 * ```tsx
 * <Table variant="outlined" size="lg">
 *   <Thead>
 *    ...
 *   </Thead>
 *   ...
 * </Table>
 * ```
 */
declare const Table: _chakra_ui_system_dist_system_types.ComponentWithAs<"table", TableProps>;

type ColorsType = typeof tokens__default.color.alias & typeof tokens__default.color.palette & typeof tokens__default.color.vyDigital & {
    linjetag: typeof tokens__default.color.linjetag;
};

declare const textStyles: {
    "2xl": {
        fontSize: (string | null)[];
        fontFamily: string;
        lineHeight: string;
    };
    "xl-display": {
        fontSize: (string | null)[];
        fontFamily: string;
        lineHeight: string;
    };
    "xl-sans": {
        fontSize: (string | null)[];
        fontFamily: string;
        lineHeight: string;
    };
    lg: {
        fontSize: (string | null)[];
        fontFamily: string;
        lineHeight: string;
    };
    md: {
        fontSize: (string | null)[];
        fontFamily: string;
        lineHeight: string;
    };
    sm: {
        fontSize: (string | null)[];
        fontFamily: string;
        lineHeight: string;
    };
    xs: {
        fontSize: (string | null)[];
        fontFamily: string;
        lineHeight: string;
    };
};

/** A string of CSS that should be injected in the global CSS space */
declare const fontFaces: string;

declare enum Brand {
    VyDigital = "VyDigital",
    VyUtvikling = "VyUtvikling",
    CargoNet = "CargoNet"
}
declare const theme: {
    components: {
        Accordion: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                container: {
                    borderRadius: string;
                };
                button: {
                    _disabled: {
                        pointerEvents: string;
                        opacity: number;
                    };
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    textAlign: string;
                    fontFamily: string;
                    fontWeight: string;
                    outlineOffset: string;
                    color: string;
                    transitionProperty: string;
                    transitionDuration: string;
                    borderRadius: string;
                    display: string;
                    justifyContent: string;
                };
                panel: {
                    paddingY: number;
                    borderBottomRadius: string;
                };
                icon: {
                    fontSize: string;
                };
            }) | undefined;
            sizes?: {
                sm: {
                    button: {
                        fontSize: ("mobile.xs" | "desktop.xs" | null)[];
                        paddingX: number;
                        paddingY: number;
                        minHeight: number;
                    };
                    panel: {
                        fontSize: ("mobile.xs" | "desktop.xs" | null)[];
                        paddingX: number;
                    };
                };
                md: {
                    button: {
                        fontSize: ("mobile.sm" | "desktop.sm" | null)[];
                        paddingX: number;
                        paddingY: number;
                        minHeight: number;
                    };
                    panel: {
                        fontSize: ("mobile.sm" | "desktop.sm" | null)[];
                        paddingX: number;
                    };
                };
                lg: {
                    button: {
                        fontSize: ("mobile.sm" | "desktop.sm" | null)[];
                        paddingX: number;
                        paddingY: number;
                        minHeight: number;
                    };
                    panel: {
                        fontSize: ("mobile.sm" | "desktop.sm" | null)[];
                        paddingX: number;
                    };
                };
            } | undefined;
            variants?: {
                ghost: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    button: {
                        _hover: {
                            backgroundColor: string;
                        };
                        _active: {
                            backgroundColor: string;
                        };
                    };
                };
                base: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    container: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                    };
                    button: {
                        _expanded: {
                            borderBottomRadius: string;
                        };
                        _hover: {
                            outlineOffset: number;
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                        } | {
                            outlineOffset: number;
                            outline: string;
                            outlineColor: string;
                        };
                        _active: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                            backgroundColor: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                        };
                    };
                };
                floating: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    container: {
                        boxShadow: string;
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                    button: {
                        _expanded: {
                            borderBottomRadius: string;
                        };
                        _hover: {
                            outlineOffset: number;
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                        };
                        _active: {
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                        };
                    };
                };
            } | undefined;
            defaultProps?: {
                size?: "sm" | "md" | "lg" | undefined;
                variant?: "base" | "ghost" | "floating" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("button" | "container" | "icon" | "root" | "panel")[];
        };
        Alert: {
            baseStyle?: {
                container: {
                    borderRadius: string;
                    color: string;
                    paddingX: number;
                    paddingY: number;
                    display: string;
                    position: string;
                    textStyle: string;
                };
                icon: {
                    marginRight: number;
                };
                closeButton: {
                    position: string;
                    top: number;
                    right: number;
                    color: string;
                };
            } | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("container" | "icon" | "closeButton")[];
                }>;
            } | undefined;
            variants?: {
                success: {
                    container: {
                        backgroundColor: string;
                    };
                };
                info: {
                    container: {
                        backgroundColor: string;
                    };
                };
                warning: {
                    container: {
                        backgroundColor: string;
                    };
                };
                error: {
                    container: {
                        backgroundColor: string;
                    };
                };
                "alt-transport": {
                    container: {
                        backgroundColor: string;
                    };
                };
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: "error" | "info" | "success" | "warning" | "alt-transport" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("container" | "icon" | "closeButton")[];
        };
        AlertExpandable: {
            baseStyle?: {
                container: {
                    paddingX: number;
                    paddingY: number;
                    fontSize: string;
                    transitionProperty: string;
                    transitionDuration: string;
                    _expanded: {
                        borderBottomRadius: string;
                    };
                    _hover: {
                        outline: string;
                    };
                };
            } | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: "container"[];
                }>;
            } | undefined;
            variants?: {
                info: {
                    container: {
                        _hover: {
                            outlineColor: string;
                        };
                        _active: {
                            backgroundColor: string;
                        };
                    };
                };
                success: {
                    container: {
                        _hover: {
                            outlineColor: string;
                        };
                        _active: {
                            backgroundColor: string;
                        };
                    };
                };
                warning: {
                    container: {
                        _hover: {
                            outlineColor: string;
                        };
                        _active: {
                            backgroundColor: string;
                        };
                    };
                };
                "alt-transport": {
                    container: {
                        _hover: {
                            outlineColor: string;
                        };
                        _active: {
                            backgroundColor: string;
                        };
                    };
                };
                error: {
                    container: {
                        _hover: {
                            outlineColor: string;
                        };
                        _active: {
                            backgroundColor: string;
                        };
                    };
                };
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: "error" | "info" | "success" | "warning" | "alt-transport" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: "container"[];
        };
        Badge: {
            baseStyle?: (({ colorScheme }: _chakra_ui_styled_system.StyleFunctionProps) => {
                backgroundColor: string;
                color: string;
                borderColor?: string | undefined;
                borderStyle: string;
                display: string;
                alignItems: string;
                justifyContent: string;
                fontSize: ("mobile.xs" | "desktop.xs")[];
                borderRadius: string;
                fontWeight: string;
                paddingLeft: number[];
                paddingRight: number[];
                minHeight: number[];
            }) | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
            } | undefined;
            variants?: {
                solid: {
                    borderWidth: number;
                };
                outline: {
                    borderWidth: number;
                };
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: "solid" | "outline" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
        };
        Breadcrumb: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                link: {
                    transitionProperty: string;
                    transitionDuration: string;
                    transitionTimingFunction: string;
                    color: string;
                    textDecoration: string;
                    textStyle: string;
                    paddingX: number;
                    borderRadius: string;
                    "&:not([aria-current=page])": {
                        _focusVisible: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        };
                        cursor: string;
                    };
                };
                list: {
                    flexWrap: string;
                    alignItems: string;
                };
            }) | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("link" | "container" | "separator" | "item")[];
                }>;
            } | undefined;
            variants?: {
                base: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    link: {
                        "&:not([aria-current=page])": {
                            _hover: {
                                outlineWidth: string;
                                outlineColor: string;
                                outlineStyle: string;
                                outlineOffset: string;
                            } | {
                                outline: string;
                                outlineColor: string;
                            };
                            _active: {
                                backgroundColor: string;
                            };
                        };
                    };
                };
                ghost: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    link: {
                        "&:not([aria-current=page])": {
                            _hover: {
                                backgroundColor: string;
                            };
                            _active: {
                                backgroundColor: string;
                            };
                        };
                    };
                };
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: "base" | "ghost" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("link" | "container" | "separator" | "item")[];
        };
        Button: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                _disabled: {
                    color: string;
                    backgroundColor: string;
                    cursor: string;
                    pointerEvents: string;
                    boxShadow: string;
                };
                _focusVisible: {
                    outlineWidth: string;
                    outlineColor: string;
                    outlineStyle: string;
                    outlineOffset: string;
                };
                border: number;
                borderRadius: string;
                display: string;
                alignItems: string;
                justifyContent: string;
                transitionProperty: string;
                transitionDuration: string;
                textWrap: string;
                paddingX: number;
                paddingY: number;
            }) | undefined;
            sizes?: {
                lg: {
                    minHeight: number;
                    minWidth: number;
                    fontSize: string;
                    fontWeight: string;
                };
                md: {
                    minHeight: number;
                    minWidth: number;
                    fontSize: string;
                    fontWeight: string;
                };
                sm: {
                    minHeight: number;
                    minWidth: number;
                    fontSize: string;
                    fontWeight: string;
                };
                xs: {
                    minHeight: number;
                    minWidth: number;
                    paddingY: number;
                    fontSize: string;
                    fontWeight: string;
                };
            } | undefined;
            variants?: {
                primary: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    _hover: {
                        backgroundColor: string;
                    };
                    _active: {
                        backgroundColor: string;
                    };
                    color: string;
                    backgroundColor: string;
                };
                secondary: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    _hover: {
                        backgroundColor: string;
                    };
                    _active: {
                        backgroundColor: string;
                    };
                    color: string;
                    backgroundColor: string;
                };
                tertiary: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    _hover: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                    };
                    _active: {
                        backgroundColor: string;
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        backgroundColor: string;
                        outline: string;
                        outlineColor: string;
                    };
                    outlineWidth: string;
                    outlineColor: string;
                    outlineStyle: string;
                    outlineOffset: string;
                    color: string;
                    backgroundColor: string;
                } | {
                    _hover: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                    };
                    _active: {
                        backgroundColor: string;
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        backgroundColor: string;
                        outline: string;
                        outlineColor: string;
                    };
                    outline: string;
                    outlineColor: string;
                    color: string;
                    backgroundColor: string;
                };
                ghost: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    _hover: {
                        _disabled: {
                            color: string;
                        };
                        backgroundColor: string;
                    };
                    _active: {
                        backgroundColor: string;
                    };
                    color: string;
                    backgroundColor: string;
                };
                floating: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    boxShadow: string;
                    _hover: {
                        boxShadow: string;
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                    _active: {
                        boxShadow: string;
                        backgroundColor: string;
                    };
                    outline: string;
                    outlineColor: string;
                    backgroundColor: string;
                };
            } | undefined;
            defaultProps?: {
                size?: "sm" | "md" | "lg" | "xs" | undefined;
                variant?: "ghost" | "floating" | "primary" | "secondary" | "tertiary" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
        };
        Card: {
            baseStyle?: ((props: any) => {
                "button&, a&, label&, &.is-clickable": {
                    _hover: {
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    } | {
                        outlineColor: string;
                        backgroundColor?: undefined;
                    } | {
                        backgroundColor: string;
                        outlineColor: string;
                    };
                    _active: {
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    } | {
                        backgroundColor: string;
                        outlineColor: string;
                    };
                    _disabled: {
                        pointerEvents: string;
                        color: string;
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        backgroundColor: string;
                    } | {
                        pointerEvents: string;
                        color: string;
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    outline: string;
                    outlineColor: string;
                    backgroundColor?: undefined;
                } | {
                    _hover: {
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    } | {
                        outlineColor: string;
                        backgroundColor?: undefined;
                    } | {
                        backgroundColor: string;
                        outlineColor: string;
                    };
                    _active: {
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    } | {
                        backgroundColor: string;
                        outlineColor: string;
                    };
                    _disabled: {
                        pointerEvents: string;
                        color: string;
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        backgroundColor: string;
                    } | {
                        pointerEvents: string;
                        color: string;
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    outlineColor: string;
                    backgroundColor?: undefined;
                    outline: string;
                } | {
                    _hover: {
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    } | {
                        outlineColor: string;
                        backgroundColor?: undefined;
                    } | {
                        backgroundColor: string;
                        outlineColor: string;
                    };
                    _active: {
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    } | {
                        backgroundColor: string;
                        outlineColor: string;
                    };
                    _disabled: {
                        pointerEvents: string;
                        color: string;
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        backgroundColor: string;
                    } | {
                        pointerEvents: string;
                        color: string;
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    backgroundColor: string;
                    outlineColor: string;
                    outline: string;
                };
                backgroundColor: string;
                color: string;
                outlineWidth: string;
                outlineColor: string;
                outlineStyle: string;
                outlineOffset: string;
                appearance: string;
                border: string;
                overflow: string;
                fontSize: string;
                display: string;
                transitionProperty: string;
                transitionDuration: string;
                borderRadius: string;
            } | {
                "button&, a&, label&, &.is-clickable": {
                    _hover: {
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    } | {
                        outlineColor: string;
                        backgroundColor?: undefined;
                    } | {
                        backgroundColor: string;
                        outlineColor: string;
                    };
                    _active: {
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    } | {
                        backgroundColor: string;
                        outlineColor: string;
                    };
                    _disabled: {
                        pointerEvents: string;
                        color: string;
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        backgroundColor: string;
                    } | {
                        pointerEvents: string;
                        color: string;
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    outline: string;
                    outlineColor: string;
                    backgroundColor?: undefined;
                } | {
                    _hover: {
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    } | {
                        outlineColor: string;
                        backgroundColor?: undefined;
                    } | {
                        backgroundColor: string;
                        outlineColor: string;
                    };
                    _active: {
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    } | {
                        backgroundColor: string;
                        outlineColor: string;
                    };
                    _disabled: {
                        pointerEvents: string;
                        color: string;
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        backgroundColor: string;
                    } | {
                        pointerEvents: string;
                        color: string;
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    outlineColor: string;
                    backgroundColor?: undefined;
                    outline: string;
                } | {
                    _hover: {
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    } | {
                        outlineColor: string;
                        backgroundColor?: undefined;
                    } | {
                        backgroundColor: string;
                        outlineColor: string;
                    };
                    _active: {
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    } | {
                        backgroundColor: string;
                        outlineColor: string;
                    };
                    _disabled: {
                        pointerEvents: string;
                        color: string;
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        backgroundColor: string;
                    } | {
                        pointerEvents: string;
                        color: string;
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    backgroundColor: string;
                    outlineColor: string;
                    outline: string;
                };
                backgroundColor: string;
                color: string;
                outline: string;
                outlineColor: string;
                appearance: string;
                border: string;
                overflow: string;
                fontSize: string;
                display: string;
                transitionProperty: string;
                transitionDuration: string;
                borderRadius: string;
            } | {
                "button&, a&, label&, &.is-clickable": {
                    _hover: {
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    } | {
                        outlineColor: string;
                        backgroundColor?: undefined;
                    } | {
                        backgroundColor: string;
                        outlineColor: string;
                    };
                    _active: {
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    } | {
                        backgroundColor: string;
                        outlineColor: string;
                    };
                    _disabled: {
                        pointerEvents: string;
                        color: string;
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        backgroundColor: string;
                    } | {
                        pointerEvents: string;
                        color: string;
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    outline: string;
                    outlineColor: string;
                    backgroundColor?: undefined;
                } | {
                    _hover: {
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    } | {
                        outlineColor: string;
                        backgroundColor?: undefined;
                    } | {
                        backgroundColor: string;
                        outlineColor: string;
                    };
                    _active: {
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    } | {
                        backgroundColor: string;
                        outlineColor: string;
                    };
                    _disabled: {
                        pointerEvents: string;
                        color: string;
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        backgroundColor: string;
                    } | {
                        pointerEvents: string;
                        color: string;
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    outlineColor: string;
                    backgroundColor?: undefined;
                    outline: string;
                } | {
                    _hover: {
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    } | {
                        outlineColor: string;
                        backgroundColor?: undefined;
                    } | {
                        backgroundColor: string;
                        outlineColor: string;
                    };
                    _active: {
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    } | {
                        backgroundColor: string;
                        outlineColor: string;
                    };
                    _disabled: {
                        pointerEvents: string;
                        color: string;
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        backgroundColor: string;
                    } | {
                        pointerEvents: string;
                        color: string;
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    backgroundColor: string;
                    outlineColor: string;
                    outline: string;
                };
                backgroundColor: string;
                appearance: string;
                border: string;
                overflow: string;
                fontSize: string;
                display: string;
                transitionProperty: string;
                transitionDuration: string;
                borderRadius: string;
                color: string;
            }) | undefined;
            sizes?: {
                sm: {
                    "button&, a&, label&, &.is-clickable": {
                        boxShadow: string;
                        _hover: {
                            boxShadow: string;
                        };
                        _active: {
                            boxShadow: string;
                        };
                    };
                };
                lg: {
                    "button&, a&, label&, &.is-clickable": {
                        boxShadow: string;
                        _hover: {
                            boxShadow: string;
                        };
                        _active: {
                            boxShadow: string;
                        };
                    };
                };
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
            } | undefined;
            defaultProps?: {
                size?: "sm" | "lg" | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
        };
        CardSelect: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                trigger: {
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    color: string;
                    appearance: string;
                    display: string;
                    alignItems: string;
                    transitionProperty: string;
                    transitionDuration: string;
                };
                card: {
                    backgroundColor: string;
                    color: string;
                    borderRadius: string;
                    boxShadow: string;
                    padding: number;
                };
            }) | undefined;
            sizes?: {
                sm: {
                    trigger: {
                        paddingX: number;
                        paddingY: number;
                        minHeight: string;
                        fontSize: string;
                        borderRadius: string;
                    };
                };
                md: {
                    trigger: {
                        paddingX: number;
                        paddingY: number;
                        minHeight: string;
                        fontSize: string;
                        borderRadius: string;
                    };
                };
                lg: {
                    trigger: {
                        paddingX: number;
                        paddingY: number;
                        minHeight: string;
                        fontSize: string;
                        borderRadius: string;
                    };
                };
            } | undefined;
            variants?: {
                base: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    trigger: {
                        _hover: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                        };
                        _active: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                            backgroundColor: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                        };
                        _expanded: {
                            backgroundColor: string;
                        };
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        _hover: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                        };
                        _active: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                            backgroundColor: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                        };
                        _expanded: {
                            backgroundColor: string;
                        };
                        outline: string;
                        outlineColor: string;
                    };
                };
                ghost: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    trigger: {
                        _hover: {
                            backgroundColor: string;
                        };
                        _active: {
                            backgroundColor: string;
                        };
                        _expanded: {
                            backgroundColor: string;
                        };
                    };
                };
                floating: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    trigger: {
                        transition: string;
                        _hover: {
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                        };
                        _active: {
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                        };
                        _expanded: {
                            backgroundColor: string;
                        };
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                        boxShadow: string;
                    };
                    card: {};
                };
            } | undefined;
            defaultProps?: {
                size?: "sm" | "md" | "lg" | undefined;
                variant?: "base" | "ghost" | "floating" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("trigger" | "card")[];
        };
        Checkbox: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                container: {
                    _hover: {
                        "input:enabled:not([aria-invalid]) + .chakra-checkbox__control": {
                            borderColor: string;
                            backgroundColor: string;
                        };
                        "input:enabled[aria-invalid] + .chakra-checkbox__control": {
                            backgroundColor: string;
                            borderColor: (props: Record<string, any> | _chakra_ui_styled_system.StyleFunctionProps) => string;
                        };
                        "input:enabled:checked:not([aria-invalid]) + .chakra-checkbox__control": {
                            borderColor: string;
                            backgroundColor: string;
                        };
                        "input:enabled:checked[aria-invalid] + .chakra-checkbox__control": {
                            borderColor: (props: Record<string, any> | _chakra_ui_styled_system.StyleFunctionProps) => string;
                            backgroundColor: (props: Record<string, any> | _chakra_ui_styled_system.StyleFunctionProps) => string;
                        };
                    };
                };
                icon: {
                    fontSize: string;
                    transitionProperty: string;
                    transitionDuration: string;
                    strokeWidth: string;
                };
                control: {
                    _checked: {
                        borderColor: string;
                        _disabled: {
                            borderColor: string;
                            color: string;
                            backgroundColor: string;
                        };
                        _invalid: {
                            backgroundColor: string;
                            borderColor: string;
                        };
                        backgroundColor: string;
                        color: string;
                    };
                    _disabled: {
                        borderColor: string;
                        backgroundColor: string;
                    };
                    _invalid: {
                        borderColor: string;
                        backgroundColor: string;
                    };
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    backgroundColor: string;
                    width: number;
                    height: number;
                    transitionProperty: string;
                    transitionDuration: string;
                    border: string;
                    borderColor: string;
                    borderRadius: string;
                };
                label: {
                    userSelect: string;
                    _disabled: {
                        opacity: number;
                    };
                };
            }) | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("label" | "container" | "icon" | "control")[];
                }>;
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("label" | "container" | "icon" | "control")[];
                }>;
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("label" | "container" | "icon" | "control")[];
        };
        ChoiceChip: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                container: {
                    display: string;
                    alignItems: string;
                    fontSize: string;
                    cursor: string;
                    transitionProperty: string;
                    borderRadius: string;
                    transitionDuration: string;
                    _checked: {
                        _hover: {
                            outlineColor: string;
                            color: string;
                            backgroundColor: string;
                        };
                        _active: {
                            backgroundColor: string;
                            color: string;
                        };
                        backgroundColor: string;
                        color: string;
                        outlineColor: string;
                    };
                    _disabled: {
                        _hover: {
                            color: string;
                            boxShadow: string;
                            backgroundColor: string;
                        };
                        _checked: {
                            _hover: {
                                color: string;
                                boxShadow: string;
                                backgroundColor: string;
                            };
                            backgroundColor: string;
                            color: string;
                            cursor: string;
                            boxShadow: string;
                        };
                        backgroundColor: string;
                        color: string;
                        pointerEvents: string;
                        boxShadow: string;
                    };
                    "input:focus-visible + &": {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                };
                icon: {
                    marginRight: number;
                };
            }) | undefined;
            sizes?: {
                xs: {
                    container: {
                        _checked: {
                            borderRadius: string;
                        };
                        height: number;
                        paddingX: number;
                    };
                };
                sm: {
                    container: {
                        _checked: {
                            borderRadius: string;
                        };
                        height: number;
                        paddingX: number;
                    };
                };
                md: {
                    container: {
                        _checked: {
                            borderRadius: string;
                        };
                        height: number;
                        paddingX: number;
                    };
                };
                lg: {
                    container: {
                        _checked: {
                            borderRadius: string;
                        };
                        height: number;
                        paddingX: number;
                    };
                };
            } | undefined;
            variants?: {
                base: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    container: {
                        _hover: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                            color: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                            color: string;
                        };
                        _active: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                            backgroundColor: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                        };
                        color: string;
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        _hover: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                            color: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                            color: string;
                        };
                        _active: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                            backgroundColor: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                        };
                        color: string;
                        outline: string;
                        outlineColor: string;
                    };
                };
                accent: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    container: {
                        _hover: {
                            color: string;
                            backgroundColor: string;
                        };
                        _active: {
                            backgroundColor: string;
                            color: string;
                        };
                        color: string;
                        backgroundColor: string;
                    };
                    _active: {
                        backgroundColor: string;
                        color: string;
                    };
                };
                floating: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    container: {
                        boxShadow: string;
                        _hover: {
                            boxShadow: string;
                            color: string;
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                        };
                        _active: {
                            color: string;
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                        };
                        outline: string;
                        outlineColor: string;
                        color: string;
                        backgroundColor: string;
                    };
                };
            } | undefined;
            defaultProps?: {
                size?: "sm" | "md" | "lg" | "xs" | undefined;
                variant?: "base" | "floating" | "accent" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("label" | "container" | "icon")[];
        };
        CloseButton: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                _hover: {
                    _disabled: {
                        color: string;
                    };
                    backgroundColor: string;
                };
                _active: {
                    backgroundColor: string;
                };
                _focusVisible: {
                    outlineWidth: string;
                    outlineColor: string;
                    outlineStyle: string;
                    outlineOffset: string;
                };
                w: string[];
                h: string[];
                transitionProperty: string;
                transitionDuration: string;
                borderRadius: string;
                backgroundColor: string;
                color: string;
                fontWeight: string;
            }) | undefined;
            sizes?: {
                lg: {
                    [x: string]: string;
                    fontSize: string;
                };
                md: {
                    [x: string]: string;
                    fontSize: string;
                };
                sm: {
                    [x: string]: string;
                    fontSize: string;
                };
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
            } | undefined;
            defaultProps?: {
                size?: "sm" | "md" | "lg" | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
        };
        Code: {
            baseStyle?: {
                fontFamily: string;
                fontSize: ("mobile.xs" | "desktop.xs")[];
                borderRadius: string;
                paddingX: number;
            } | undefined;
            sizes?: {
                [x: string]: {};
            } | undefined;
            variants?: {
                solid: {
                    borderWidth: number;
                };
                outline: {
                    borderWidth: number;
                };
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: "solid" | "outline" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
        };
        Datepicker: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                wrapper: {
                    transitionProperty: string;
                    transitionDuration: string;
                    borderRadius: string;
                    display: string;
                    flex: number;
                    paddingY: number;
                    alignItems: string;
                    _hover: {
                        zIndex: number;
                    };
                    _disabled: {
                        backgroundColor: string;
                        pointerEvents: string;
                    };
                    _focusWithin: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                };
                inputLabel: {
                    fontSize: string;
                    color: string;
                    margin: number;
                    cursor: string;
                };
                dateTimeSegment: {
                    color: string;
                    _focus: {
                        color: string;
                        backgroundColor: string;
                    };
                };
                calendarTriggerButton: {
                    _hover: {
                        backgroundColor: string;
                    };
                    _active: {
                        backgroundColor: string;
                    };
                    _invalid: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                    };
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    width: number;
                    display: string;
                    alignItems: string;
                    justifyContent: string;
                    borderLeftRadius: string;
                    transitionProperty: string;
                    transitionSpeed: string;
                    position: string;
                    paddingTop: number;
                    paddingBottom: number;
                    borderRadius: string;
                    right: string;
                };
                arrow: {
                    [x: string]: string;
                };
                calendarPopover: {
                    boxShadow: string;
                    outline: string;
                    outlineColor: string;
                    color: string;
                    backgroundColor: string;
                };
                weekdays: {
                    color: string;
                };
                weekend: {
                    color: string;
                };
                cell: {
                    '&[aria-selected="true"] + [aria-selected="true"] > button': {
                        "&::before": {
                            backgroundColor: string;
                            content: string;
                            display: string;
                            width: string;
                            height: string;
                            position: string;
                            left: string;
                            top: number;
                            bottom: number;
                            zIndex: number;
                        };
                    };
                };
                dateCell: {
                    _active: {
                        backgroundColor: string;
                    };
                    _disabled: {
                        pointerEvents: string;
                        color: string;
                        backgroundColor: string;
                    };
                    _selected: {
                        _active: {
                            color: string;
                            backgroundColor: string;
                        };
                        color: string;
                        backgroundColor: string;
                    };
                    "&[data-today]": {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                    };
                    "&[data-unavailable]": {
                        color: string;
                        backgroundColor: string;
                        pointerEvents: string;
                    };
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    borderRadius: string;
                    position: string;
                    transition: string;
                    userSelect: string;
                    width: number[];
                    height: number[];
                    transitionProperty: string;
                    transitionSpeed: string;
                    _hover: {
                        backgroundColor: string;
                    };
                    color: string;
                    backgroundColor: string;
                };
            }) | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("cell" | "dateCell" | "weekdays" | "weekend" | "calendar" | "calendarTriggerButton" | "dateTimeSegment" | "inputLabel" | "wrapper" | "calendarPopover" | "arrow")[];
                }>;
            } | undefined;
            variants?: {
                base: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    wrapper: {
                        _hover: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                        };
                        _invalid: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                        };
                        _disabled: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                        };
                        backgroundColor: string;
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        _hover: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                        };
                        _invalid: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                        };
                        _disabled: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                        };
                        backgroundColor: string;
                        outline: string;
                        outlineColor: string;
                    };
                };
                floating: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    wrapper: {
                        boxShadow: string;
                        _hover: {
                            outline: string;
                            outlineColor: string;
                        };
                        _invalid: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                        };
                        _disabled: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                        };
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                };
                ghost: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    wrapper: {
                        _hover: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                        };
                        _invalid: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                        };
                    };
                };
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: "base" | "ghost" | "floating" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("cell" | "dateCell" | "weekdays" | "weekend" | "calendar" | "calendarTriggerButton" | "dateTimeSegment" | "inputLabel" | "wrapper" | "calendarPopover" | "arrow")[];
        };
        Divider: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                borderColor: string;
            }) | undefined;
            sizes?: {
                sm: {
                    borderWidth: string;
                    borderRadius: string;
                };
                md: {
                    borderWidth: string;
                    borderRadius: string;
                };
                lg: {
                    borderWidth: string;
                    borderRadius: string;
                };
            } | undefined;
            variants?: {
                solid: {
                    borderStyle: string;
                };
                dashed: {
                    borderStyle: string;
                };
            } | undefined;
            defaultProps?: {
                size?: "sm" | "md" | "lg" | undefined;
                variant?: "solid" | "dashed" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
        };
        Drawer: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                overlay: {
                    backgroundColor: string;
                    zIndex: string;
                    color: string;
                };
                dialogContainer: {
                    display: string;
                    zIndex: string;
                    justifyContent: string;
                    alignItems: string;
                    overflow: string;
                };
                dialog: {
                    zIndex: string;
                    maxHeight: string | undefined;
                    boxShadow: string;
                    color: string;
                    backgroundColor: string;
                };
                header: {
                    paddingX: number;
                    paddingTop: number;
                    paddingBottom: number;
                    fontWeight: string;
                    fontFamily: string;
                };
                closeButton: {
                    position: string;
                    top: number;
                    insetEnd: number;
                    zIndex: string;
                };
                body: {
                    paddingX: number;
                    paddingBottom: number;
                    flex: number;
                    overflow: string | undefined;
                };
                footer: {
                    paddingX: number;
                    paddingBottom: number;
                };
            }) | undefined;
            sizes?: {
                xs: Partial<Record<"body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer", _chakra_ui_styled_system.SystemStyleObject>>;
                sm: Partial<Record<"body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer", _chakra_ui_styled_system.SystemStyleObject>>;
                md: Partial<Record<"body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer", _chakra_ui_styled_system.SystemStyleObject>>;
                lg: Partial<Record<"body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer", _chakra_ui_styled_system.SystemStyleObject>>;
                xl: Partial<Record<"body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer", _chakra_ui_styled_system.SystemStyleObject>>;
                "2xl": Partial<Record<"body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer", _chakra_ui_styled_system.SystemStyleObject>>;
                "3xl": Partial<Record<"body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer", _chakra_ui_styled_system.SystemStyleObject>>;
                "4xl": Partial<Record<"body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer", _chakra_ui_styled_system.SystemStyleObject>>;
                "5xl": Partial<Record<"body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer", _chakra_ui_styled_system.SystemStyleObject>>;
                "6xl": Partial<Record<"body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer", _chakra_ui_styled_system.SystemStyleObject>>;
                full: Partial<Record<"body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer", _chakra_ui_styled_system.SystemStyleObject>>;
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer")[];
                }>;
            } | undefined;
            defaultProps?: {
                size?: "sm" | "md" | "lg" | "xs" | "2xl" | "full" | "xl" | "3xl" | "4xl" | "5xl" | "6xl" | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer")[];
        };
        FloatingActionButton: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                container: {
                    _disabled: {
                        pointerEvents: string;
                        color: string;
                        backgroundColor: string;
                    };
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    display: string;
                    alignItems: string;
                    paddingY: number;
                    paddingLeft: number;
                    paddingRight: number;
                    cursor: string;
                    overflowX: string;
                    whiteSpace: string;
                    borderRadius: string;
                    boxShadow: string;
                    transitionDuration: string;
                    transitionProperty: string;
                    position: string;
                    zIndex: string;
                } | {
                    _disabled: {
                        pointerEvents: string;
                        color: string;
                        backgroundColor: string;
                    };
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    top: string;
                    left: string;
                    right?: undefined;
                    bottom?: undefined;
                    display: string;
                    alignItems: string;
                    paddingY: number;
                    paddingLeft: number;
                    paddingRight: number;
                    cursor: string;
                    overflowX: string;
                    whiteSpace: string;
                    borderRadius: string;
                    boxShadow: string;
                    transitionDuration: string;
                    transitionProperty: string;
                    position: string;
                    zIndex: string;
                } | {
                    _disabled: {
                        pointerEvents: string;
                        color: string;
                        backgroundColor: string;
                    };
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    top: string;
                    right: string;
                    left?: undefined;
                    bottom?: undefined;
                    display: string;
                    alignItems: string;
                    paddingY: number;
                    paddingLeft: number;
                    paddingRight: number;
                    cursor: string;
                    overflowX: string;
                    whiteSpace: string;
                    borderRadius: string;
                    boxShadow: string;
                    transitionDuration: string;
                    transitionProperty: string;
                    position: string;
                    zIndex: string;
                } | {
                    _disabled: {
                        pointerEvents: string;
                        color: string;
                        backgroundColor: string;
                    };
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    bottom: string;
                    left: string;
                    top?: undefined;
                    right?: undefined;
                    display: string;
                    alignItems: string;
                    paddingY: number;
                    paddingLeft: number;
                    paddingRight: number;
                    cursor: string;
                    overflowX: string;
                    whiteSpace: string;
                    borderRadius: string;
                    boxShadow: string;
                    transitionDuration: string;
                    transitionProperty: string;
                    position: string;
                    zIndex: string;
                } | {
                    _disabled: {
                        pointerEvents: string;
                        color: string;
                        backgroundColor: string;
                    };
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    bottom: string;
                    right: string;
                    top?: undefined;
                    left?: undefined;
                    display: string;
                    alignItems: string;
                    paddingY: number;
                    paddingLeft: number;
                    paddingRight: number;
                    cursor: string;
                    overflowX: string;
                    whiteSpace: string;
                    borderRadius: string;
                    boxShadow: string;
                    transitionDuration: string;
                    transitionProperty: string;
                    position: string;
                    zIndex: string;
                };
                icon: {
                    marginRight: number;
                };
                text: {
                    display: string;
                    flex: string;
                    alignItems: string;
                    fontWeight: string;
                    textStyle: string;
                };
            }) | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("text" | "container" | "icon")[];
                }>;
            } | undefined;
            variants?: {
                brand: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    container: {
                        _hover: {
                            backgroundColor: string;
                        };
                        _active: {
                            backgroundColor: string;
                        };
                        color: string;
                        backgroundColor: string;
                    };
                };
                base: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    container: {
                        _hover: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                            backgroundColor: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                        };
                        _active: {
                            backgroundColor: string;
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        } | {
                            backgroundColor: string;
                            outline: string;
                            outlineColor: string;
                        };
                        color: string;
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        backgroundColor: string;
                    } | {
                        _hover: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                            backgroundColor: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                        };
                        _active: {
                            backgroundColor: string;
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        } | {
                            backgroundColor: string;
                            outline: string;
                            outlineColor: string;
                        };
                        color: string;
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                };
                accent: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    container: {
                        _hover: {
                            color: string;
                            backgroundColor: string;
                        };
                        _active: {
                            backgroundColor: string;
                        };
                        color: string;
                        backgroundColor: string;
                    };
                };
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: "base" | "accent" | "brand" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("text" | "container" | "icon")[];
        };
        Form: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                container: {
                    width: string;
                    position: string;
                    transitionProperty: string;
                    transitionDuration: string;
                };
                requiredIndicator: {
                    marginStart: number;
                    color: string;
                };
                helperText: {
                    marginTop: number;
                    color: string;
                    lineHeight: string;
                    fontSize: string;
                };
            }) | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("container" | "requiredIndicator" | "helperText")[];
                }>;
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("container" | "requiredIndicator" | "helperText")[];
                }>;
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("container" | "requiredIndicator" | "helperText")[];
        };
        FormLabel: {
            baseStyle?: {
                fontSize: string;
                marginEnd: number;
                marginBottom: number;
                transitionProperty: string;
                transitionDuration: string;
                opacity: number;
                _disabled: {
                    opacity: number;
                };
            } | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
        };
        InfoSelect: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                container: {};
                label: {
                    border?: string | undefined;
                    clip?: string | undefined;
                    clipPath?: string | undefined;
                    height?: string | undefined;
                    margin?: string | undefined;
                    overflow?: string | undefined;
                    padding?: string | undefined;
                    position: string;
                    width?: string | undefined;
                    whiteSpace?: string | undefined;
                    fontSize: ("mobile.xs" | "desktop.sm")[];
                };
                innerButton: {
                    display: string;
                    flexDir: string;
                    alignItems: string;
                    justifyContent: string;
                };
                button: {
                    _disabled: {
                        backgroundColor: string;
                        color: string;
                        pointerEvents: string;
                    };
                    _active: {
                        backgroundColor: string;
                    };
                    _invalid: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                    };
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    _hover: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                    };
                    outlineWidth: string;
                    outlineColor: string;
                    outlineStyle: string;
                    outlineOffset: string;
                    display: string;
                    appearance: string;
                    width: string;
                    height: number;
                    borderTopRadius: string;
                    borderBottomRadius: string | number;
                    paddingY: number;
                    paddingX: number;
                    justifyContent: string;
                    alignItems: string;
                    fontSize: string;
                } | {
                    _disabled: {
                        backgroundColor: string;
                        color: string;
                        pointerEvents: string;
                    };
                    _active: {
                        backgroundColor: string;
                    };
                    _invalid: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                    };
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    _hover: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                    };
                    outline: string;
                    outlineColor: string;
                    display: string;
                    appearance: string;
                    width: string;
                    height: number;
                    borderTopRadius: string;
                    borderBottomRadius: string | number;
                    paddingY: number;
                    paddingX: number;
                    justifyContent: string;
                    alignItems: string;
                    fontSize: string;
                };
                placeholder: {};
                arrowIcon: {};
            }) | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("button" | "label" | "container" | "arrowIcon")[];
                }>;
            } | undefined;
            variants?: {
                base: () => {};
                floating: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    button: {
                        _hover: {
                            backgroundColor: string;
                            outline: string;
                            outlineColor: string;
                        };
                        _active: {
                            backgroundColor: string;
                            outline: string;
                            outlineColor: string;
                        };
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                };
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: "base" | "floating" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("button" | "label" | "container" | "arrowIcon")[];
        };
        InfoTag: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                iconContainer: {
                    padding: number;
                    "[aria-disabled=true] &": {
                        backgroundColor: string;
                        color: string;
                    };
                };
                textContainer: {
                    color: string;
                };
                container: {
                    transitionDuration: string;
                    transitionProperty: string;
                    _disabled: {
                        backgroundColor: string;
                    };
                    "button&, a&": {
                        _active: {
                            opacity: number;
                            boxShadow: string;
                        };
                        _focusVisible: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        };
                        boxShadow: string;
                        _hover: {
                            boxShadow: string;
                        };
                    };
                    border: string;
                    borderColor: string;
                    position: string;
                    display: string;
                    alignItems: string;
                    padding: number;
                    width: string;
                } | {
                    transitionDuration: string;
                    transitionProperty: string;
                    _disabled: {
                        backgroundColor: string;
                    };
                    "button&, a&": {
                        _active: {
                            opacity: number;
                            boxShadow: string;
                        };
                        _focusVisible: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        };
                        boxShadow: string;
                        _hover: {
                            boxShadow: string;
                        };
                    };
                    border?: undefined;
                    borderColor?: undefined;
                    position: string;
                    display: string;
                    alignItems: string;
                    padding: number;
                    width: string;
                };
                title: {
                    fontWeight: string;
                };
                description: {
                    fontWeight: string;
                };
                deviationIcon: {
                    position: string;
                    top: string;
                    right: string;
                    transform: string;
                    zIndex: string;
                    stroke: string;
                    color: "brightRed" | "golden" | "ocean";
                };
            }) | undefined;
            sizes?: {
                sm: {
                    iconContainer: {
                        borderRadius: string;
                    };
                    container: {
                        borderRadius: string;
                    };
                    textContainer: {
                        marginLeft: number;
                        fontSize: string;
                    };
                };
                md: {
                    iconContainer: {
                        borderRadius: string;
                    };
                    container: {
                        borderRadius: string;
                    };
                    textContainer: {
                        marginLeft: number;
                        fontSize: string;
                    };
                };
                lg: {
                    iconContainer: {
                        borderRadius: string;
                    };
                    container: {
                        borderRadius: string;
                    };
                    textContainer: {
                        marginLeft: number;
                        fontSize: string;
                    };
                };
            } | undefined;
            variants?: {
                walk: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    iconContainer: {
                        backgroundColor: string;
                        boxShadow: string;
                    };
                };
            } | undefined;
            defaultProps?: {
                size?: "sm" | "md" | "lg" | undefined;
                variant?: "walk" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("title" | "container" | "icon" | "description" | "iconContainer" | "textContainer")[];
        };
        Input: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                field: {
                    _hover: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                    };
                    _active: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        backgroundColor: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                    _focusVisible: {
                        outlineOffset: number;
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                    };
                    _disabled: {
                        pointerEvents: string;
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        backgroundColor: string;
                    } | {
                        pointerEvents: string;
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                    _invalid: {
                        _hover: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                        };
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        _hover: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                        };
                        outline: string;
                        outlineColor: string;
                    };
                    " + label": {
                        fontSize: ("mobile.sm" | "desktop.sm")[];
                        top: string;
                        left: any;
                        zIndex: number;
                        position: string;
                        marginY: number;
                        transition: string;
                        transformOrigin: string;
                        cursor: string;
                    };
                    "&:not(:placeholder-shown)": {
                        paddingTop: string;
                        "& + label": {
                            transform: string;
                        };
                    };
                    outlineWidth: string;
                    outlineColor: string;
                    outlineStyle: string;
                    outlineOffset: string;
                    backgroundColor: string;
                    appearance: string;
                    width: string;
                    outline: string;
                    border: number;
                    borderRadius: string;
                    transitionProperty: string;
                    transitionDuration: string;
                    position: string;
                    paddingX: number;
                    height: number;
                    fontSize: string;
                } | {
                    _hover: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                    };
                    _active: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        backgroundColor: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                    _focusVisible: {
                        outlineOffset: number;
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                    };
                    _disabled: {
                        pointerEvents: string;
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        backgroundColor: string;
                    } | {
                        pointerEvents: string;
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                    _invalid: {
                        _hover: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                        };
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        _hover: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                        };
                        outline: string;
                        outlineColor: string;
                    };
                    " + label": {
                        fontSize: ("mobile.sm" | "desktop.sm")[];
                        top: string;
                        left: any;
                        zIndex: number;
                        position: string;
                        marginY: number;
                        transition: string;
                        transformOrigin: string;
                        cursor: string;
                    };
                    "&:not(:placeholder-shown)": {
                        paddingTop: string;
                        "& + label": {
                            transform: string;
                        };
                    };
                    outline: string;
                    outlineColor: string;
                    backgroundColor: string;
                    appearance: string;
                    width: string;
                    border: number;
                    borderRadius: string;
                    transitionProperty: string;
                    transitionDuration: string;
                    position: string;
                    paddingX: number;
                    height: number;
                    fontSize: string;
                };
                element: {
                    height: string;
                };
                group: {
                    ":has(:disabled)": {
                        color: string;
                    };
                };
            }) | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("group" | "element" | "addon" | "field")[];
                }>;
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("group" | "element" | "addon" | "field")[];
                }>;
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("group" | "element" | "addon" | "field")[];
        };
        LineIcon: {
            baseStyle?: {
                iconContainer: {
                    display: string;
                    justifyContent: string;
                    alignItems: string;
                };
                icon: {
                    color: string;
                };
            } | undefined;
            sizes?: {
                sm: {
                    iconContainer: {
                        borderRadius: string;
                        padding: number;
                    };
                };
                md: {
                    iconContainer: {
                        borderRadius: string;
                        padding: number;
                    };
                };
                lg: {
                    iconContainer: {
                        borderRadius: string;
                        padding: number;
                    };
                };
            } | undefined;
            variants?: {
                "local-train": {
                    iconContainer: {
                        backgroundColor: string;
                    };
                };
                "region-train": {
                    iconContainer: {
                        backgroundColor: string;
                    };
                };
                "region-express-train": {
                    iconContainer: {
                        backgroundColor: string;
                    };
                };
                "long-distance-train": {
                    iconContainer: {
                        backgroundColor: string;
                    };
                };
                "airport-express-train": {
                    iconContainer: {
                        backgroundColor: string;
                    };
                };
                "vy-bus": {
                    iconContainer: {
                        backgroundColor: string;
                    };
                };
                "local-bus": {
                    iconContainer: {
                        backgroundColor: string;
                    };
                };
                ferry: {
                    iconContainer: {
                        backgroundColor: string;
                    };
                };
                subway: {
                    iconContainer: {
                        backgroundColor: string;
                    };
                };
                tram: {
                    iconContainer: {
                        backgroundColor: string;
                    };
                };
                "alt-transport": {
                    iconContainer: {
                        backgroundColor: string;
                    };
                    icon: {
                        color: string;
                        "[aria-disabled=true] &": {
                            color: string;
                        };
                    };
                };
                walk: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    iconContainer: {
                        backgroundColor: string;
                        borderWidth: number;
                        borderStyle: string;
                        borderColor: string;
                    };
                    icon: {
                        color: string;
                        "[aria-disabled=true] &": {
                            color: string;
                        };
                    };
                };
                custom: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    iconContainer: {
                        backgroundColor: any;
                    };
                };
            } | undefined;
            defaultProps?: {
                size?: "sm" | "md" | "lg" | undefined;
                variant?: "custom" | "alt-transport" | "local-train" | "region-train" | "region-express-train" | "long-distance-train" | "airport-express-train" | "vy-bus" | "local-bus" | "ferry" | "subway" | "tram" | "walk" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("icon" | "iconContainer")[];
        };
        Link: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                svg: {
                    display: string;
                    width: string;
                    height: string;
                    position: string;
                    bottom: string;
                };
                _focusVisible: {
                    outlineWidth: string;
                    outlineColor: string;
                    outlineStyle: string;
                    outlineOffset: string;
                };
                transitionProperty: string;
                transitionDuration: string;
                transitionTimingFunction: string;
                cursor: string;
                backgroundImage: string;
                backgroundSize: string;
                backgroundPosition: string;
                backgroundRepeat: string;
                borderRadius: string;
                padding: string;
                color: string;
                display: string;
                position: string;
                boxDecorationBreak: string;
                "&:focus, &:focus-visible, &:active, &:hover": {
                    backgroundImage: string;
                    backgroundSize: string;
                    outline: string;
                    borderRadius: string;
                };
            }) | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
            } | undefined;
            variants?: {
                primary: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    _hover: {
                        backgroundColor: string;
                        color: string;
                    };
                    _active: {
                        backgroundColor: string;
                        color: string;
                    };
                    color: string;
                };
                secondary: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    _hover: {
                        outlineWidth: number;
                        backgroundColor: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        outlineWidth: number;
                        backgroundColor: string;
                        outline: string;
                        outlineColor: string;
                    };
                    _active: {
                        backgroundColor: string;
                    };
                    backgroundColor: string;
                    "&:focus, &:focus-visible, &:active, &:hover": {
                        outline: string;
                    };
                    color: string;
                    backgroundImage: string;
                };
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: "primary" | "secondary" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
        };
        List: {
            baseStyle?: {
                container: {
                    fontSize: ("mobile.sm" | "desktop.sm")[];
                };
                item: {
                    fontFamily: string;
                };
                icon: {
                    marginEnd: string;
                    display: string;
                    verticalAlign: string;
                };
            } | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("container" | "icon" | "item")[];
                }>;
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("container" | "icon" | "item")[];
                }>;
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("container" | "icon" | "item")[];
        };
        ListBox: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                container: {
                    outlineWidth: string;
                    outlineColor: string;
                    outlineStyle: string;
                    outlineOffset: string;
                    boxShadow: string;
                    overflowY: string;
                    maxHeight: string;
                    width: string;
                    listStyle: string;
                    borderBottomRadius: string;
                    backgroundColor: string;
                } | {
                    outline: string;
                    outlineColor: string;
                    boxShadow: string;
                    overflowY: string;
                    maxHeight: string;
                    width: string;
                    listStyle: string;
                    borderBottomRadius: string;
                    backgroundColor: string;
                };
                item: {
                    cursor: string;
                    outline: string;
                    _active: {
                        backgroundColor: string;
                    };
                    _focusVisible: {
                        outlineColor: string;
                    };
                    _hover: {
                        backgroundColor: string;
                    };
                    _selected: {
                        backgroundColor: string;
                    };
                    color: string;
                    paddingX: number;
                    paddingY: number;
                    marginY: number;
                    marginX: number;
                    borderRadius: string;
                };
                label: {};
                description: {
                    "[aria-selected='true'] &": {
                        color: string;
                    };
                    color: string;
                    fontSize: ("mobile.xs" | "desktop.xs")[];
                };
            }) | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("label" | "container" | "description" | "item")[];
                }>;
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("label" | "container" | "description" | "item")[];
                }>;
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("label" | "container" | "description" | "item")[];
        };
        MediaControllerButton: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                container: {
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    fontSize: number;
                    transitionProperty: string;
                    transitionDuration: string;
                    borderRadius: string;
                    appearance: string;
                    background: string;
                    border: string;
                    cursor: string;
                    display: string;
                    padding: number;
                    alignSelf: string;
                    color: string;
                };
                icon: {
                    flex: string;
                    display: string;
                    width: string;
                    height: string;
                };
            }) | undefined;
            sizes?: {
                sm: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    container: {
                        fontSize: number;
                        width: string | undefined;
                        height: string | undefined;
                    };
                };
                lg: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    container: {
                        fontSize: number;
                        width: string | undefined;
                        height: string | undefined;
                    };
                };
            } | undefined;
            variants?: {
                play: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    container: {
                        _hover: {
                            backgroundColor: string;
                            color: string;
                        };
                        _active: {
                            backgroundColor: string;
                            color: string;
                        };
                        _disabled: {
                            backgroundColor: string;
                            pointerEvents: string;
                            color: string;
                        };
                        backgroundColor: string;
                        color: string;
                        padding: number;
                    };
                };
                jumpSkip: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    container: {
                        _hover: {
                            backgroundColor: string;
                        };
                        _active: {
                            backgroundColor: string;
                        };
                        _disabled: {
                            color: string;
                            backgroundColor: string;
                            pointerEvents: string;
                        };
                    };
                    icon: {
                        width: string;
                        height: string;
                    };
                };
            } | undefined;
            defaultProps?: {
                size?: "sm" | "lg" | undefined;
                variant?: "play" | "jumpSkip" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("container" | "icon")[];
        };
        Modal: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                overlay: {
                    backgroundColor: string;
                    zIndex: string;
                };
                dialogContainer: {
                    display: string;
                    zIndex: string;
                    justifyContent: string;
                    alignItems: string;
                    overflow: string;
                };
                dialog: {
                    marginY: string;
                    zIndex: string;
                    maxHeight: string | undefined;
                    boxShadow: string;
                    color: string;
                    backgroundColor: string;
                    borderRadius: string;
                };
                header: {
                    paddingX: number;
                    paddingTop: number;
                    paddingBottom: number;
                    fontWeight: string;
                    fontFamily: string;
                };
                closeButton: {
                    position: string;
                    color: string;
                    top: number;
                    insetEnd: number;
                };
                body: {
                    paddingX: number;
                    paddingBottom: number;
                    flex: number;
                    overflow: string | undefined;
                };
                footer: {
                    paddingX: number;
                    paddingBottom: number;
                };
            }) | undefined;
            sizes?: {
                xs: Partial<Record<"body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer", _chakra_ui_styled_system.SystemStyleObject>>;
                sm: Partial<Record<"body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer", _chakra_ui_styled_system.SystemStyleObject>>;
                md: Partial<Record<"body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer", _chakra_ui_styled_system.SystemStyleObject>>;
                lg: Partial<Record<"body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer", _chakra_ui_styled_system.SystemStyleObject>>;
                xl: Partial<Record<"body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer", _chakra_ui_styled_system.SystemStyleObject>>;
                "2xl": Partial<Record<"body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer", _chakra_ui_styled_system.SystemStyleObject>>;
                "3xl": Partial<Record<"body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer", _chakra_ui_styled_system.SystemStyleObject>>;
                "4xl": Partial<Record<"body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer", _chakra_ui_styled_system.SystemStyleObject>>;
                "5xl": Partial<Record<"body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer", _chakra_ui_styled_system.SystemStyleObject>>;
                "6xl": Partial<Record<"body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer", _chakra_ui_styled_system.SystemStyleObject>>;
                full: Partial<Record<"body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer", _chakra_ui_styled_system.SystemStyleObject>>;
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer")[];
                }>;
            } | undefined;
            defaultProps?: {
                size?: "sm" | "md" | "lg" | "xs" | "2xl" | "full" | "xl" | "3xl" | "4xl" | "5xl" | "6xl" | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("body" | "dialog" | "footer" | "header" | "overlay" | "closeButton" | "dialogContainer")[];
        };
        NumericStepper: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                container: {
                    display: string;
                    flexDirection: string;
                    alignItems: string;
                };
                input: {
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    _disabled: {
                        pointerEvents: string;
                        opacity: number;
                    };
                    _hover: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                    };
                    _active: {
                        backgroundColor: string;
                    };
                    backgroundColor: string;
                    color: string;
                    fontSize: string;
                    fontWeight: string;
                    marginX: number;
                    paddingX: number;
                    borderRadius: string;
                    textAlign: string;
                    transitionProperty: string;
                    transitionDuration: string;
                };
                text: {
                    color: string;
                    fontSize: string;
                    fontWeight: string;
                    marginX: number;
                    paddingX: number;
                    textAlign: string;
                    width: string;
                };
                button: {
                    minWidth: string;
                    minHeight: string;
                };
            }) | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("button" | "input" | "text" | "container")[];
                }>;
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("button" | "input" | "text" | "container")[];
                }>;
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("button" | "input" | "text" | "container")[];
        };
        Pagination: {
            baseStyle?: ((props: any) => {
                activeButton: {
                    _hover: {
                        borderRadius: number;
                        backgroundColor: string;
                    };
                    _active: {
                        backgroundColor: string;
                        borderRadius: number;
                    };
                    backgroundColor: string;
                    display: string;
                    alignItems: string;
                    justifyContent: string;
                    width: number;
                    height: number;
                    backgroundImage: string;
                    borderRadius: number;
                    fontSize: string;
                    fontWeight: string;
                };
                disabled: {
                    color: string;
                    cursor: string;
                    pointerEvents: string;
                    boxShadow: string;
                    display: string;
                    alignItems: string;
                    justifyContent: string;
                    width: number;
                    height: number;
                    backgroundImage: string;
                    borderRadius: number;
                    fontSize: string;
                };
                listItem: {
                    display: string;
                };
                link: {
                    _hover: {
                        borderRadius: number;
                        _disabled: {
                            color: string;
                        };
                        backgroundColor: string;
                    };
                    _active: {
                        backgroundColor: string;
                        borderRadius: number;
                    };
                    color: string;
                    backgroundColor: string;
                    display: string;
                    alignItems: string;
                    justifyContent: string;
                    width: number;
                    height: number;
                    backgroundImage: string;
                    borderRadius: number;
                    fontSize: string;
                };
                icon: {
                    bottom: string;
                };
            }) | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("link" | "icon" | "disabled" | "listItem" | "activeButton")[];
                }>;
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("link" | "icon" | "disabled" | "listItem" | "activeButton")[];
                }>;
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("link" | "icon" | "disabled" | "listItem" | "activeButton")[];
        };
        Popover: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                popper: {
                    zIndex: string;
                };
                content: {
                    [x: string]: string | number;
                    backgroundColor: string;
                    color: string;
                    borderRadius: string;
                    padding: number;
                    zIndex: string;
                    maxWidth: string;
                };
                arrow: {
                    backgroundColor: string;
                    boxShadow: string;
                    clipPath: string;
                };
                closeButton: {
                    _hover: {
                        backgroundColor: string;
                    };
                    _active: {
                        backgroundColor: string;
                    };
                    borderRadius: string;
                    top: number;
                    right: number;
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    position: string;
                    color: string;
                };
            }) | undefined;
            sizes?: {
                sm: {
                    content: {
                        paddingX: number;
                        paddingY: number;
                    };
                };
                lg: {
                    content: {
                        paddingX: number;
                        paddingY: number;
                    };
                };
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("body" | "footer" | "header" | "content" | "closeButton" | "arrow" | "popper")[];
                }>;
            } | undefined;
            defaultProps?: {
                size?: "sm" | "lg" | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("body" | "footer" | "header" | "content" | "closeButton" | "arrow" | "popper")[];
        };
        ProgressBar: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                container: {
                    minWidth: string;
                };
                background: {
                    display: string;
                    backgroundColor: string;
                    borderRadius: string;
                    justifyContent: string;
                    marginX: string;
                };
                progress: {
                    backgroundColor: string;
                    borderRadius: string;
                    maxWidth: string;
                    transition: string;
                };
                description: {
                    textAlign: string;
                    marginTop: number;
                    marginX: string;
                    fontWeight: string;
                };
            }) | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("progress" | "background" | "container" | "description")[];
                }>;
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("progress" | "background" | "container" | "description")[];
                }>;
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("progress" | "background" | "container" | "description")[];
        };
        ProgressIndicator: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                root: {
                    width: string;
                };
                container: {
                    display: string;
                    alignItems: string;
                    gap: number;
                    justifyContent: ("center" | "space-between")[];
                };
                progressDot: {
                    height: number;
                    width: number;
                    "&[aria-current='step']": {
                        circle: {
                            fill: string;
                        };
                    };
                    circle: {
                        fill: string;
                    };
                };
            }) | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("container" | "root" | "progressDot")[];
                }>;
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("container" | "root" | "progressDot")[];
                }>;
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("container" | "root" | "progressDot")[];
        };
        RadioCard: {
            baseStyle?: ((props: any) => {
                container: {
                    overflow: string;
                    fontSize: string;
                    display: string;
                    cursor: string;
                    borderRadius: string;
                    transitionProperty: string;
                    transitionDuration: string;
                    _disabled: {
                        color: string;
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        backgroundColor: string;
                        pointerEvents: string;
                    } | {
                        color: string;
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                        pointerEvents: string;
                    };
                };
                checked: {
                    backgroundColor: string;
                    outlineColor: string;
                    outline: string;
                };
                radioInput: {
                    appearance: string;
                    position: string;
                    opacity: number;
                    zIndex: number;
                };
            }) | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("container" | "checked" | "radioInput" | "focused" | "focusedChecked")[];
                }>;
            } | undefined;
            variants?: {
                base: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    container: {
                        _hover: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                            backgroundColor: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                        };
                        _active: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                            backgroundColor: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                        };
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        backgroundColor: string;
                        color: string;
                    } | {
                        _hover: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                            backgroundColor: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                        };
                        _active: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                            backgroundColor: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                        };
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                        color: string;
                    };
                    checked: {
                        _hover: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                        };
                        _active: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                            backgroundColor: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                        };
                    };
                    focusedChecked: {
                        outlineOffset: string;
                        outlineColor: string;
                        outline: string;
                        outlineStyle: string;
                    };
                    focused: {
                        outlineOffset: string;
                        boxShadow: string;
                        _hover: {
                            boxShadow: string;
                            outlineOffset: string;
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                        } | {
                            boxShadow: string;
                            outlineOffset: string;
                            outline: string;
                            outlineColor: string;
                        };
                        outlineColor: string;
                        outline: string;
                    };
                };
                floating: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    container: {
                        boxShadow: string;
                        _hover: {
                            boxShadow: string;
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                        };
                        _active: {
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                        };
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                    checked: {
                        _hover: {
                            boxShadow: string;
                            outline: string;
                            outlineColor: string;
                        };
                        _active: {
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                        };
                    };
                    focusedChecked: {
                        outlineOffset: string;
                        outlineColor: string;
                        outline: string;
                        outlineStyle: string;
                    };
                    focused: {
                        outlineOffset: string;
                        boxShadow: string;
                        _hover: {
                            boxShadow: string;
                            outlineOffset: string;
                            outline: string;
                            outlineColor: string;
                        };
                        outlineColor: string;
                        outline: string;
                    };
                };
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: "base" | "floating" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("container" | "checked" | "radioInput" | "focused" | "focusedChecked")[];
        };
        Radio: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                container: {
                    _hover: {
                        "input:enabled + .chakra-radio__control": {
                            backgroundColor: string;
                            borderColor: string;
                        };
                        "input:enabled:checked + .chakra-radio__control": {
                            color: string;
                            borderColor: string;
                        };
                    };
                };
                label: {
                    userSelect: string;
                    _disabled: {
                        opacity: number;
                    };
                };
                control: {
                    _disabled: {
                        color: string;
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        backgroundColor: string;
                    } | {
                        color: string;
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                    _checked: {
                        color: string;
                        borderColor: string;
                        _before: {
                            content: string;
                            display: string;
                            position: string;
                            width: string;
                            height: string;
                            borderRadius: string;
                            background: string;
                        };
                        _disabled: {
                            color: string;
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                            backgroundColor: string;
                            pointerEvents: string;
                        } | {
                            color: string;
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                            pointerEvents: string;
                        };
                    };
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    width: number;
                    height: number;
                    backgroundColor: string;
                    border: string;
                    borderColor: string;
                    borderRadius: string;
                };
            }) | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("label" | "container" | "control")[];
                }>;
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("label" | "container" | "control")[];
                }>;
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("label" | "container" | "control")[];
        };
        Select: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                root: {
                    width: string;
                    height: string;
                    position: string;
                    "& + label": {
                        fontSize: ("mobile.sm" | "desktop.sm")[];
                        top: string;
                        left: number;
                        zIndex: number;
                        position: string;
                        marginY: number;
                        transformOrigin: string;
                        transform: ("scale(0.825) translateY(-12px)" | "scale(0.825) translateY(-14px)")[];
                    };
                };
                field: {
                    appearance: string;
                    paddingTop: string;
                    "option, optgroup": {};
                    _hover: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                    };
                    _active: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        backgroundColor: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                    _focusVisible: {
                        outlineOffset: number;
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                    };
                    _disabled: {
                        pointerEvents: string;
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        backgroundColor: string;
                    } | {
                        pointerEvents: string;
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                    _invalid: {
                        _hover: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                        };
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        _hover: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                        };
                        outline: string;
                        outlineColor: string;
                    };
                    " + label": {
                        fontSize: ("mobile.sm" | "desktop.sm")[];
                        top: string;
                        left: any;
                        zIndex: number;
                        position: string;
                        marginY: number;
                        transition: string;
                        transformOrigin: string;
                        cursor: string;
                    };
                    "&:not(:placeholder-shown)": {
                        paddingTop: string;
                        "& + label": {
                            transform: string;
                        };
                    };
                    outlineWidth: string;
                    outlineColor: string;
                    outlineStyle: string;
                    outlineOffset: string;
                    backgroundColor: string;
                    width: string;
                    outline: string;
                    border: number;
                    borderRadius: string;
                    transitionProperty: string;
                    transitionDuration: string;
                    position: string;
                    paddingX: number;
                    height: number;
                    fontSize: string;
                } | {
                    appearance: string;
                    paddingTop: string;
                    "option, optgroup": {};
                    _hover: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                    };
                    _active: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        backgroundColor: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                    _focusVisible: {
                        outlineOffset: number;
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                    };
                    _disabled: {
                        pointerEvents: string;
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        backgroundColor: string;
                    } | {
                        pointerEvents: string;
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                    _invalid: {
                        _hover: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                        };
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        _hover: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                        };
                        outline: string;
                        outlineColor: string;
                    };
                    " + label": {
                        fontSize: ("mobile.sm" | "desktop.sm")[];
                        top: string;
                        left: any;
                        zIndex: number;
                        position: string;
                        marginY: number;
                        transition: string;
                        transformOrigin: string;
                        cursor: string;
                    };
                    "&:not(:placeholder-shown)": {
                        paddingTop: string;
                        "& + label": {
                            transform: string;
                        };
                    };
                    outline: string;
                    outlineColor: string;
                    backgroundColor: string;
                    width: string;
                    border: number;
                    borderRadius: string;
                    transitionProperty: string;
                    transitionDuration: string;
                    position: string;
                    paddingX: number;
                    height: number;
                    fontSize: string;
                };
                icon: {
                    width: number;
                    height: number;
                    insetEnd: string;
                    position: string;
                    color: string;
                    strokeLinecap: string;
                    fontSize: string;
                    _disabled: {
                        color: string;
                    };
                };
            }) | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("icon" | "root" | "field")[];
                }>;
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("icon" | "root" | "field")[];
                }>;
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("icon" | "root" | "field")[];
        };
        Skeleton: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                [x: string]: any;
                opacity: number;
                borderRadius: string;
                borderColor: any;
                background: any;
                animation: string;
            }) | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
        };
        Stepper: {
            baseStyle?: {
                root: {
                    display: string;
                    alignItems: string;
                    justifyContent: ("center" | "space-between" | null)[];
                    minHeight: ("48px" | "60px" | null)[];
                    overflowX: string;
                    width: string;
                };
                container: {
                    paddingX: (number | null)[];
                    maxWidth: string;
                    marginX: string;
                    width: string;
                };
                innerContainer: {
                    overflow: string;
                    display: ("flex" | "none" | null)[];
                    alignItems: string;
                    justifyContent: string;
                    gap: number;
                };
                title: {
                    overflow: string;
                    fontWeight: string;
                    WebkitLineClamp: number;
                    display: string;
                    WebkitBoxOrient: string;
                    textAlign: string;
                    maxWidth: string;
                };
                stepContainer: {
                    display: string;
                    alignItems: string;
                };
                stepTitle: {
                    textStyle: string;
                    whiteSpace: string;
                };
            } | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("title" | "container" | "root" | "closeButton" | "innerContainer" | "stepCounter" | "stepContainer" | "stepButton" | "stepNumber" | "stepTitle")[];
                }>;
            } | undefined;
            variants?: {
                base: () => {
                    root: {
                        backgroundColor: string;
                    };
                };
                accent: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    root: {
                        color: string;
                        backgroundColor: string;
                    };
                    stepButton: {
                        color: string;
                        _hover: {
                            backgroundColor: string;
                        };
                    };
                    backButton: {
                        _hover: {
                            backgroundColor: string;
                        };
                    };
                };
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: "base" | "accent" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("title" | "container" | "root" | "closeButton" | "innerContainer" | "stepCounter" | "stepContainer" | "stepButton" | "stepNumber" | "stepTitle")[];
        };
        Switch: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                container: {
                    [x: string]: string | {
                        [x: string]: string;
                    };
                    _rtl: {
                        [x: string]: string;
                    };
                };
                track: {
                    _hover: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                    };
                    _checked: {
                        outlineColor: string;
                        _hover: {
                            backgroundColor: string;
                        };
                        backgroundColor: string;
                    };
                    _disabled: {
                        _checked: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                            backgroundColor: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                        };
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        backgroundColor: string;
                        pointerEvents: string;
                    } | {
                        _checked: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                            backgroundColor: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                        };
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                        pointerEvents: string;
                    };
                    backgroundColor: string;
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    outlineWidth: string;
                    outlineColor: string;
                    outlineStyle: string;
                    outlineOffset: string;
                    width: string[];
                    height: string[];
                    transitionProperty: string;
                    transitionDuration: string;
                } | {
                    _hover: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                    };
                    _checked: {
                        outlineColor: string;
                        _hover: {
                            backgroundColor: string;
                        };
                        backgroundColor: string;
                    };
                    _disabled: {
                        _checked: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                            backgroundColor: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                        };
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        backgroundColor: string;
                        pointerEvents: string;
                    } | {
                        _checked: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                            backgroundColor: string;
                        } | {
                            outline: string;
                            outlineColor: string;
                            backgroundColor: string;
                        };
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                        pointerEvents: string;
                    };
                    backgroundColor: string;
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    outline: string;
                    outlineColor: string;
                    width: string[];
                    height: string[];
                    transitionProperty: string;
                    transitionDuration: string;
                };
                thumb: {
                    transitionProperty: string;
                    transitionDuration: string;
                    borderRadius: string;
                    width: string[];
                    height: string[];
                    backgroundColor: string;
                    "[data-disabled] &": {
                        backgroundColor: string;
                    };
                    _checked: {
                        backgroundColor: string;
                        transform: string;
                    };
                };
            }) | undefined;
            sizes?: {
                sm: {
                    container: {
                        [x: string]: string;
                    };
                    track: {
                        borderRadius: string;
                        padding: string;
                    };
                };
                md: {
                    container: {
                        [x: string]: string;
                    };
                    track: {
                        borderRadius: string;
                        padding: string;
                    };
                };
                lg: {
                    container: {
                        [x: string]: string;
                    };
                    track: {
                        borderRadius: string;
                        padding: string;
                    };
                };
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("label" | "track" | "container" | "thumb")[];
                }>;
            } | undefined;
            defaultProps?: {
                size?: "sm" | "md" | "lg" | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("label" | "track" | "container" | "thumb")[];
        };
        Table: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                table: {
                    width: string;
                    color: string;
                    borderCollapse: string;
                };
                th: {
                    fontWeight: string;
                    textAlign: string;
                };
                td: {
                    textAlign: string;
                };
                tfoot: {
                    tr: {
                        "&:last-of-type": {
                            th: {
                                borderBottomWidth: number;
                            };
                        };
                    };
                };
                caption: {
                    marginTop: number;
                    fontFamily: string;
                    textAlign: string;
                    fontWeight: string;
                    color: string;
                };
            }) | undefined;
            sizes?: {
                sm: {
                    table: {
                        fontSize: ("mobile.xs" | "desktop.xs")[];
                    };
                    th: {
                        paddingX: number;
                        paddingY: number;
                    };
                    td: {
                        paddingX: number;
                        paddingY: number;
                    };
                    caption: {
                        paddingX: number;
                        paddingY: number;
                    };
                };
                md: {
                    table: {
                        fontSize: ("mobile.sm" | "desktop.sm")[];
                    };
                    th: {
                        paddingX: number;
                        paddingY: number;
                    };
                    td: {
                        paddingX: number;
                        paddingY: number;
                    };
                    caption: {
                        paddingX: number;
                        paddingY: number;
                    };
                };
                lg: {
                    table: {
                        fontSize: ("mobile.sm" | "desktop.sm")[];
                    };
                    th: {
                        paddingX: number;
                        paddingY: string;
                    };
                    td: {
                        paddingX: number;
                        paddingY: string;
                    };
                    caption: {
                        paddingX: number;
                        paddingY: string;
                    };
                };
            } | undefined;
            variants?: {
                simple: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    th: {
                        "&[data-is-numeric=true]": {
                            textAlign: string;
                        };
                        borderBottom: string;
                        borderColor: string;
                    };
                    td: {
                        "&[data-is-numeric=true]": {
                            textAlign: string;
                        };
                        borderBottom: string;
                        borderColor: string;
                    };
                };
                outline: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    tbody: {
                        tr: {
                            transitionDuration: string;
                            transitionProperty: string;
                            _hover: {
                                outlineOffset: string;
                                backgroundColor: string;
                                outlineWidth: string;
                                outlineColor: string;
                                outlineStyle: string;
                            } | {
                                outlineOffset: string;
                                backgroundColor: string;
                                outline: string;
                                outlineColor: string;
                            };
                            _last: {
                                borderBottomRadius: string;
                            };
                        };
                    };
                    th: {
                        "&[data-is-numeric=true]": {
                            textAlign: string;
                        };
                        border: (props: Record<string, any> | _chakra_ui_styled_system.StyleFunctionProps) => string;
                        borderColor: string;
                        backgroundColor: string;
                    };
                    td: {
                        _first: {
                            borderLeft: string;
                        };
                        "&[data-is-numeric=true]": {
                            textAlign: string;
                        };
                        border: (props: Record<string, any> | _chakra_ui_styled_system.StyleFunctionProps) => string;
                        borderColor: string;
                    };
                    tr: {
                        _last: {
                            td: {
                                borderBottom: string;
                            };
                        };
                    };
                };
                unstyled: {};
            } | undefined;
            defaultProps?: {
                size?: "sm" | "md" | "lg" | undefined;
                variant?: "outline" | "simple" | "unstyled" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("caption" | "table" | "tbody" | "td" | "tfoot" | "th" | "thead" | "tr")[];
        };
        Tabs: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                root: {
                    display: string;
                    flexDirection: string;
                };
                tablist: {
                    display: string;
                    alignItems: string;
                    gap: number;
                    width: string;
                    borderRadius: string;
                };
                tab: {
                    _disabled: {
                        color: string;
                        backgroundColor: string;
                    };
                    _selected: {
                        _hover: {
                            color: string;
                            backgroundColor: string;
                        };
                        _active: {
                            color: string;
                            backgroundColor: string;
                        };
                        color: string;
                        backgroundColor: string;
                        pointerEvents: string;
                    };
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                    display: string;
                    justifyContent: string;
                    alignItems: string;
                    transitionProperty: string;
                    transitionDuration: string;
                    width: string;
                    height: string;
                    whiteSpace: string;
                    borderRadius: string;
                };
            }) | undefined;
            sizes?: {
                xs: {
                    tablist: {
                        height: number;
                        padding: string;
                    };
                    tab: {
                        paddingX: number;
                        paddingY: number;
                    };
                };
                sm: {
                    tablist: {
                        height: number;
                        padding: number;
                    };
                    tab: {
                        paddingX: number;
                    };
                };
                md: {
                    tablist: {
                        height: number;
                        padding: number;
                    };
                    tab: {
                        fontWeight: string;
                        paddingX: number;
                    };
                };
                lg: {
                    tablist: {
                        height: number;
                        padding: string;
                    };
                    tab: {
                        fontWeight: string;
                        paddingX: number;
                    };
                };
            } | undefined;
            variants?: {
                base: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    tablist: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        color: string;
                        backgroundColor: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                        color: string;
                        backgroundColor: string;
                    };
                    tab: {
                        _hover: {
                            outlineOffset: string;
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                        } | {
                            outlineOffset: string;
                            outline: string;
                            outlineColor: string;
                        };
                        _accent: {
                            backgroundColor: string;
                        };
                        color: string;
                    };
                };
                accent: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    tablist: {
                        color: string;
                        backgroundColor: string;
                    };
                    tab: {
                        _hover: {
                            backgroundColor: string;
                        };
                        _accent: {
                            backgroundColor: string;
                        };
                        color: string;
                    };
                };
            } | undefined;
            defaultProps?: {
                size?: "sm" | "md" | "lg" | "xs" | undefined;
                variant?: "base" | "accent" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("tab" | "tablist" | "tabpanel" | "tabpanels" | "root" | "indicator")[];
        };
        Textarea: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                minHeight: string;
                verticalAlign: string;
                appearance: string;
                paddingTop: number;
                "&:not(:placeholder-shown)": {
                    "&:has(+ label)": {
                        paddingTop: number;
                    };
                    "& + label": {
                        transform: string;
                    };
                };
                _hover: {
                    outlineWidth: string;
                    outlineColor: string;
                    outlineStyle: string;
                    outlineOffset: string;
                } | {
                    outline: string;
                    outlineColor: string;
                };
                _active: {
                    outlineWidth: string;
                    outlineColor: string;
                    outlineStyle: string;
                    outlineOffset: string;
                    backgroundColor: string;
                } | {
                    outline: string;
                    outlineColor: string;
                    backgroundColor: string;
                };
                _focusVisible: {
                    outlineOffset: number;
                    outlineWidth: string;
                    outlineColor: string;
                    outlineStyle: string;
                };
                _disabled: {
                    pointerEvents: string;
                    outlineWidth: string;
                    outlineColor: string;
                    outlineStyle: string;
                    outlineOffset: string;
                    backgroundColor: string;
                } | {
                    pointerEvents: string;
                    outline: string;
                    outlineColor: string;
                    backgroundColor: string;
                };
                _invalid: {
                    _hover: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                    };
                    outlineWidth: string;
                    outlineColor: string;
                    outlineStyle: string;
                    outlineOffset: string;
                } | {
                    _hover: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                    };
                    outline: string;
                    outlineColor: string;
                };
                " + label": {
                    fontSize: ("mobile.sm" | "desktop.sm")[];
                    top: string;
                    left: any;
                    zIndex: number;
                    position: string;
                    marginY: number;
                    transition: string;
                    transformOrigin: string;
                    cursor: string;
                };
                outlineWidth: string;
                outlineColor: string;
                outlineStyle: string;
                outlineOffset: string;
                backgroundColor: string;
                width: string;
                outline: string;
                border: number;
                borderRadius: string;
                transitionProperty: string;
                transitionDuration: string;
                position: string;
                paddingX: number;
                height: number;
                fontSize: string;
            } | {
                minHeight: string;
                verticalAlign: string;
                appearance: string;
                paddingTop: number;
                "&:not(:placeholder-shown)": {
                    "&:has(+ label)": {
                        paddingTop: number;
                    };
                    "& + label": {
                        transform: string;
                    };
                };
                _hover: {
                    outlineWidth: string;
                    outlineColor: string;
                    outlineStyle: string;
                    outlineOffset: string;
                } | {
                    outline: string;
                    outlineColor: string;
                };
                _active: {
                    outlineWidth: string;
                    outlineColor: string;
                    outlineStyle: string;
                    outlineOffset: string;
                    backgroundColor: string;
                } | {
                    outline: string;
                    outlineColor: string;
                    backgroundColor: string;
                };
                _focusVisible: {
                    outlineOffset: number;
                    outlineWidth: string;
                    outlineColor: string;
                    outlineStyle: string;
                };
                _disabled: {
                    pointerEvents: string;
                    outlineWidth: string;
                    outlineColor: string;
                    outlineStyle: string;
                    outlineOffset: string;
                    backgroundColor: string;
                } | {
                    pointerEvents: string;
                    outline: string;
                    outlineColor: string;
                    backgroundColor: string;
                };
                _invalid: {
                    _hover: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                    };
                    outlineWidth: string;
                    outlineColor: string;
                    outlineStyle: string;
                    outlineOffset: string;
                } | {
                    _hover: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                    };
                    outline: string;
                    outlineColor: string;
                };
                " + label": {
                    fontSize: ("mobile.sm" | "desktop.sm")[];
                    top: string;
                    left: any;
                    zIndex: number;
                    position: string;
                    marginY: number;
                    transition: string;
                    transformOrigin: string;
                    cursor: string;
                };
                outline: string;
                outlineColor: string;
                backgroundColor: string;
                width: string;
                border: number;
                borderRadius: string;
                transitionProperty: string;
                transitionDuration: string;
                position: string;
                paddingX: number;
                height: number;
                fontSize: string;
            }) | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
        };
        Toast: {
            baseStyle?: {
                display: string;
                alignItems: string;
                width: string;
                maxWidth: string;
                minWidth: string;
                paddingX: number;
                paddingY: number;
                boxShadow: string;
                borderRadius: string;
            } | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
            } | undefined;
            variants?: {
                success: {
                    backgroundColor: string;
                };
                info: {
                    backgroundColor: string;
                };
                error: {
                    backgroundColor: string;
                };
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: "error" | "info" | "success" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
        };
        StaticCard: {
            baseStyle?: ((props: any) => {
                color: string;
                backgroundColor: string;
                _focusVisible: {
                    outlineWidth: string;
                    outlineColor: string;
                    outlineStyle: string;
                    outlineOffset: string;
                };
                appearance: string;
                border: string;
                overflow: string;
                fontSize: string;
                display: string;
                borderRadius: string;
            } | {
                backgroundColor: string;
                _focusVisible: {
                    outlineWidth: string;
                    outlineColor: string;
                    outlineStyle: string;
                    outlineOffset: string;
                };
                appearance: string;
                border: string;
                overflow: string;
                fontSize: string;
                display: string;
                borderRadius: string;
                color: string;
            }) | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
        };
        PressableCard: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                appearance: string;
                border: string;
                overflow: string;
                fontSize: string;
                display: string;
                borderRadius: string;
                cursor: string;
                transitionProperty: string;
                transitionDuration: string;
                "button&, a&, label&, &.is-clickable": {
                    _focusVisible: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    };
                };
                _disabled: {
                    outline: string;
                    pointerEvents: string;
                    color: string;
                    outlineWidth: string;
                    outlineColor: string;
                    outlineStyle: string;
                    outlineOffset: string;
                    backgroundColor: string;
                } | {
                    outline: string;
                    pointerEvents: string;
                    color: string;
                    outlineColor: string;
                    backgroundColor: string;
                };
            }) | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
            } | undefined;
            variants?: {
                base: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    _hover: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                    };
                    _active: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        backgroundColor: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                    outlineWidth: string;
                    outlineColor: string;
                    outlineStyle: string;
                    outlineOffset: string;
                    cursor: string;
                } | {
                    _hover: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                    };
                    _active: {
                        outlineWidth: string;
                        outlineColor: string;
                        outlineStyle: string;
                        outlineOffset: string;
                        backgroundColor: string;
                    } | {
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                    outline: string;
                    outlineColor: string;
                    cursor: string;
                };
                accent: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    boxShadow: string;
                    _hover: {
                        boxShadow: string;
                        backgroundColor: string;
                    };
                    _active: {
                        boxShadow: string;
                        backgroundColor: string;
                    };
                    backgroundColor: string;
                    color: string;
                };
                floating: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    boxShadow: string;
                    _hover: {
                        boxShadow: string;
                        outline: string;
                        outlineColor: string;
                        backgroundColor: string;
                    };
                    _active: {
                        boxShadow: string;
                        backgroundColor: string;
                        outline: string;
                        outlineColor: string;
                    };
                    outline: string;
                    outlineColor: string;
                    backgroundColor: string;
                };
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: "base" | "floating" | "accent" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
        };
        TravelTag: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                container: {
                    transitionDuration: string;
                    transitionProperty: string;
                    _disabled: {
                        backgroundColor: string;
                    };
                    "button&, a&": {
                        _active: {
                            opacity: number;
                            boxShadow: string;
                        };
                        _focusVisible: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        };
                        boxShadow: string;
                        _hover: {
                            boxShadow: string;
                        };
                    };
                    border: string;
                    borderColor: string;
                    position: string;
                    display: string;
                    alignItems: string;
                    padding: number;
                    width: string;
                } | {
                    transitionDuration: string;
                    transitionProperty: string;
                    _disabled: {
                        backgroundColor: string;
                    };
                    "button&, a&": {
                        _active: {
                            opacity: number;
                            boxShadow: string;
                        };
                        _focusVisible: {
                            outlineWidth: string;
                            outlineColor: string;
                            outlineStyle: string;
                            outlineOffset: string;
                        };
                        boxShadow: string;
                        _hover: {
                            boxShadow: string;
                        };
                    };
                    border?: undefined;
                    borderColor?: undefined;
                    position: string;
                    display: string;
                    alignItems: string;
                    padding: number;
                    width: string;
                };
                iconContainer: {
                    padding: number;
                    "[aria-disabled=true] &": {
                        backgroundColor: string;
                        color: string;
                    };
                };
                textContainer: {
                    color: string;
                    paddingRight: number;
                    whiteSpace: string;
                    "[aria-disabled=true] &": {
                        color: string;
                    };
                };
                title: {
                    fontWeight: string;
                };
                description: {
                    fontWeight: string;
                };
                deviationIcon: {
                    position: string;
                    top: string;
                    right: string;
                    transform: string;
                    zIndex: string;
                    stroke: string;
                    color: "brightRed" | "golden" | "ocean";
                };
            }) | undefined;
            sizes?: {
                sm: {
                    container: {
                        borderRadius: string;
                    };
                    iconContainer: {
                        borderRadius: string;
                    };
                    textContainer: {
                        marginLeft: number;
                        fontSize: string;
                    };
                };
                md: {
                    container: {
                        borderRadius: string;
                    };
                    iconContainer: {
                        borderRadius: string;
                    };
                    textContainer: {
                        marginLeft: number;
                        fontSize: string;
                    };
                };
                lg: {
                    container: {
                        borderRadius: string;
                    };
                    iconContainer: {
                        borderRadius: string;
                    };
                    textContainer: {
                        marginLeft: number;
                        fontSize: string;
                    };
                };
            } | undefined;
            variants?: {
                "local-train": {
                    container: {
                        backgroundColor: string;
                    };
                };
                "region-train": {
                    container: {
                        backgroundColor: string;
                    };
                };
                "region-express-train": {
                    container: {
                        backgroundColor: string;
                    };
                };
                "long-distance-train": {
                    container: {
                        backgroundColor: string;
                    };
                };
                "airport-express-train": {
                    container: {
                        backgroundColor: string;
                    };
                };
                "vy-bus": {
                    container: {
                        backgroundColor: string;
                    };
                };
                "local-bus": {
                    container: {
                        backgroundColor: string;
                    };
                };
                ferry: {
                    container: {
                        backgroundColor: string;
                    };
                };
                subway: {
                    container: {
                        backgroundColor: string;
                    };
                };
                tram: {
                    container: {
                        backgroundColor: string;
                    };
                };
                "alt-transport": {
                    container: {
                        backgroundColor: string;
                    };
                };
                walk: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    container: {
                        backgroundColor: string;
                        _disabled: {
                            backgroundColor: string;
                        };
                    };
                    iconContainer: {
                        border: string;
                        position: string;
                        left: number;
                        backgroundColor: string;
                        "[aria-disabled=true] &": {
                            backgroundColor: string;
                            color: string;
                        };
                    };
                    textContainer: {
                        position: string;
                        left: number;
                        bottom: number;
                        "[aria-disabled=true] &": {
                            color: string;
                        };
                    };
                    title: {
                        fontSize: string;
                        fontWeight: string;
                        color: string;
                    };
                    description: {
                        display: string;
                    };
                };
                custom: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    container: {
                        backgroundColor: any;
                    };
                };
            } | undefined;
            defaultProps?: {
                size?: "sm" | "md" | "lg" | undefined;
                variant?: "custom" | "alt-transport" | "local-train" | "region-train" | "region-express-train" | "long-distance-train" | "airport-express-train" | "vy-bus" | "local-bus" | "ferry" | "subway" | "tram" | "walk" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("title" | "container" | "icon" | "description" | "iconContainer" | "textContainer" | "deviationIcon")[];
        };
        Avatar: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                badge: {
                    [x: string]: string | {
                        [x: string]: string;
                    };
                    borderRadius: string;
                    border: string;
                    borderColor: string;
                    _dark: {
                        [x: string]: string;
                    };
                };
                excessLabel: {
                    [x: string]: string | {
                        [x: string]: string;
                    };
                    bg: string;
                    fontSize: string;
                    width: string;
                    height: string;
                    lineHeight: string;
                    _dark: {
                        [x: string]: string;
                    };
                };
                container: {
                    [x: string]: string | {
                        [x: string]: string;
                    };
                    bg: string;
                    fontSize: string;
                    color: string;
                    borderColor: string;
                    verticalAlign: string;
                    width: string;
                    height: string;
                    "&:not([data-loaded])": {
                        [x: string]: string;
                    };
                    _dark: {
                        [x: string]: string;
                    };
                };
                label: {
                    fontSize: string;
                    lineHeight: string;
                };
            }) | undefined;
            sizes?: {
                "2xs": {
                    container: {
                        [x: string]: string | 1 | 12 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 14 | 16 | 20 | 1.5 | 0.5 | 24 | 2.5 | 60 | {
                            sm: string;
                            md: string;
                            lg: string;
                            xl: string;
                        } | 3.5 | 28 | 32 | 36 | 40 | 44 | 48 | 52 | 56 | 64 | 72 | 80 | 96;
                    };
                    excessLabel: {
                        [x: string]: string | 1 | 12 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 14 | 16 | 20 | 1.5 | 0.5 | 24 | 2.5 | 60 | 3.5 | 28 | 32 | 36 | 40 | 44 | 48 | 52 | 56 | 64 | 72 | 80 | 96 | {
                            sm: string;
                            md: string;
                            lg: string;
                            xl: string;
                        };
                    };
                };
                xs: {
                    container: {
                        [x: string]: string | 1 | 12 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 14 | 16 | 20 | 1.5 | 0.5 | 24 | 2.5 | 60 | 3.5 | 28 | 32 | 36 | 40 | 44 | 48 | 52 | 56 | 64 | 72 | 80 | 96 | {
                            sm: string;
                            md: string;
                            lg: string;
                            xl: string;
                        };
                    };
                    excessLabel: {
                        [x: string]: string | 1 | 12 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 14 | 16 | 20 | 1.5 | 0.5 | 24 | 2.5 | 60 | 3.5 | 28 | 32 | 36 | 40 | 44 | 48 | 52 | 56 | 64 | 72 | 80 | 96 | {
                            sm: string;
                            md: string;
                            lg: string;
                            xl: string;
                        };
                    };
                };
                sm: {
                    container: {
                        [x: string]: string | 1 | 12 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 14 | 16 | 20 | 1.5 | 0.5 | 24 | 2.5 | 60 | 3.5 | 28 | 32 | 36 | 40 | 44 | 48 | 52 | 56 | 64 | 72 | 80 | 96 | {
                            sm: string;
                            md: string;
                            lg: string;
                            xl: string;
                        };
                    };
                    excessLabel: {
                        [x: string]: string | 1 | 12 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 14 | 16 | 20 | 1.5 | 0.5 | 24 | 2.5 | 60 | 3.5 | 28 | 32 | 36 | 40 | 44 | 48 | 52 | 56 | 64 | 72 | 80 | 96 | {
                            sm: string;
                            md: string;
                            lg: string;
                            xl: string;
                        };
                    };
                };
                md: {
                    container: {
                        [x: string]: string | 1 | 12 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 14 | 16 | 20 | 1.5 | 0.5 | 24 | 2.5 | 60 | 3.5 | 28 | 32 | 36 | 40 | 44 | 48 | 52 | 56 | 64 | 72 | 80 | 96 | {
                            sm: string;
                            md: string;
                            lg: string;
                            xl: string;
                        };
                    };
                    excessLabel: {
                        [x: string]: string | 1 | 12 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 14 | 16 | 20 | 1.5 | 0.5 | 24 | 2.5 | 60 | 3.5 | 28 | 32 | 36 | 40 | 44 | 48 | 52 | 56 | 64 | 72 | 80 | 96 | {
                            sm: string;
                            md: string;
                            lg: string;
                            xl: string;
                        };
                    };
                };
                lg: {
                    container: {
                        [x: string]: string | 1 | 12 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 14 | 16 | 20 | 1.5 | 0.5 | 24 | 2.5 | 60 | 3.5 | 28 | 32 | 36 | 40 | 44 | 48 | 52 | 56 | 64 | 72 | 80 | 96 | {
                            sm: string;
                            md: string;
                            lg: string;
                            xl: string;
                        };
                    };
                    excessLabel: {
                        [x: string]: string | 1 | 12 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 14 | 16 | 20 | 1.5 | 0.5 | 24 | 2.5 | 60 | 3.5 | 28 | 32 | 36 | 40 | 44 | 48 | 52 | 56 | 64 | 72 | 80 | 96 | {
                            sm: string;
                            md: string;
                            lg: string;
                            xl: string;
                        };
                    };
                };
                xl: {
                    container: {
                        [x: string]: string | 1 | 12 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 14 | 16 | 20 | 1.5 | 0.5 | 24 | 2.5 | 60 | 3.5 | 28 | 32 | 36 | 40 | 44 | 48 | 52 | 56 | 64 | 72 | 80 | 96 | {
                            sm: string;
                            md: string;
                            lg: string;
                            xl: string;
                        };
                    };
                    excessLabel: {
                        [x: string]: string | 1 | 12 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 14 | 16 | 20 | 1.5 | 0.5 | 24 | 2.5 | 60 | 3.5 | 28 | 32 | 36 | 40 | 44 | 48 | 52 | 56 | 64 | 72 | 80 | 96 | {
                            sm: string;
                            md: string;
                            lg: string;
                            xl: string;
                        };
                    };
                };
                "2xl": {
                    container: {
                        [x: string]: string | 1 | 12 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 14 | 16 | 20 | 1.5 | 0.5 | 24 | 2.5 | 60 | 3.5 | 28 | 32 | 36 | 40 | 44 | 48 | 52 | 56 | 64 | 72 | 80 | 96 | {
                            sm: string;
                            md: string;
                            lg: string;
                            xl: string;
                        };
                    };
                    excessLabel: {
                        [x: string]: string | 1 | 12 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 14 | 16 | 20 | 1.5 | 0.5 | 24 | 2.5 | 60 | 3.5 | 28 | 32 | 36 | 40 | 44 | 48 | 52 | 56 | 64 | 72 | 80 | 96 | {
                            sm: string;
                            md: string;
                            lg: string;
                            xl: string;
                        };
                    };
                };
                full: {
                    container: {
                        [x: string]: string | 1 | 12 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 14 | 16 | 20 | 1.5 | 0.5 | 24 | 2.5 | 60 | 3.5 | 28 | 32 | 36 | 40 | 44 | 48 | 52 | 56 | 64 | 72 | 80 | 96 | {
                            sm: string;
                            md: string;
                            lg: string;
                            xl: string;
                        };
                    };
                    excessLabel: {
                        [x: string]: string | 1 | 12 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 14 | 16 | 20 | 1.5 | 0.5 | 24 | 2.5 | 60 | 3.5 | 28 | 32 | 36 | 40 | 44 | 48 | 52 | 56 | 64 | 72 | 80 | 96 | {
                            sm: string;
                            md: string;
                            lg: string;
                            xl: string;
                        };
                    };
                };
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("label" | "container" | "group" | "badge" | "excessLabel")[];
                }>;
            } | undefined;
            defaultProps?: {
                size?: "sm" | "md" | "lg" | "xs" | "2xl" | "full" | "xl" | "2xs" | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("label" | "container" | "group" | "badge" | "excessLabel")[];
        };
        Container: {
            baseStyle?: {
                w: string;
                mx: string;
                maxW: string;
                px: string;
            } | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
        };
        Editable: {
            baseStyle?: {
                preview: {
                    borderRadius: string;
                    py: string;
                    transitionProperty: string;
                    transitionDuration: string;
                };
                input: {
                    borderRadius: string;
                    py: string;
                    transitionProperty: string;
                    transitionDuration: string;
                    width: string;
                    _focusVisible: {
                        boxShadow: string;
                    };
                    _placeholder: {
                        opacity: number;
                    };
                };
                textarea: {
                    borderRadius: string;
                    py: string;
                    transitionProperty: string;
                    transitionDuration: string;
                    width: string;
                    _focusVisible: {
                        boxShadow: string;
                    };
                    _placeholder: {
                        opacity: number;
                    };
                };
            } | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("input" | "textarea" | "preview")[];
                }>;
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("input" | "textarea" | "preview")[];
                }>;
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("input" | "textarea" | "preview")[];
        };
        FormError: {
            baseStyle?: {
                text: {
                    [x: string]: string | {
                        [x: string]: string;
                    };
                    _dark: {
                        [x: string]: string;
                    };
                    color: string;
                    mt: string;
                    fontSize: string;
                    lineHeight: string;
                };
                icon: {
                    [x: string]: string | {
                        [x: string]: string;
                    };
                    marginEnd: string;
                    _dark: {
                        [x: string]: string;
                    };
                    color: string;
                };
            } | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("text" | "icon")[];
                }>;
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("text" | "icon")[];
                }>;
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("text" | "icon")[];
        };
        Heading: {
            baseStyle?: {
                fontFamily: string;
                fontWeight: string;
            } | undefined;
            sizes?: {
                "4xl": {
                    fontSize: (string | null)[];
                    lineHeight: number;
                };
                "3xl": {
                    fontSize: (string | null)[];
                    lineHeight: number;
                };
                "2xl": {
                    fontSize: (string | null)[];
                    lineHeight: (number | null)[];
                };
                xl: {
                    fontSize: (string | null)[];
                    lineHeight: (number | null)[];
                };
                lg: {
                    fontSize: (string | null)[];
                    lineHeight: (number | null)[];
                };
                md: {
                    fontSize: string;
                    lineHeight: number;
                };
                sm: {
                    fontSize: string;
                    lineHeight: number;
                };
                xs: {
                    fontSize: string;
                    lineHeight: number;
                };
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
            } | undefined;
            defaultProps?: {
                size?: "sm" | "md" | "lg" | "xs" | "2xl" | "xl" | "3xl" | "4xl" | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
        };
        Kbd: {
            baseStyle?: {
                [x: string]: string | {
                    [x: string]: string;
                };
                _dark: {
                    [x: string]: string;
                };
                bg: string;
                borderRadius: string;
                borderWidth: string;
                borderBottomWidth: string;
                fontSize: string;
                fontWeight: string;
                lineHeight: string;
                px: string;
                whiteSpace: string;
            } | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
        };
        Menu: {
            baseStyle?: {
                button: {
                    transitionProperty: string;
                    transitionDuration: string;
                };
                list: {
                    [x: string]: string | number | {
                        [x: string]: string;
                    };
                    _dark: {
                        [x: string]: string;
                    };
                    color: string;
                    minW: string;
                    py: string;
                    zIndex: number;
                    borderRadius: string;
                    borderWidth: string;
                    bg: string;
                    boxShadow: string;
                };
                item: {
                    py: string;
                    px: string;
                    transitionProperty: string;
                    transitionDuration: string;
                    transitionTimingFunction: string;
                    _focus: {
                        [x: string]: string | {
                            [x: string]: string;
                        };
                        _dark: {
                            [x: string]: string;
                        };
                    };
                    _active: {
                        [x: string]: string | {
                            [x: string]: string;
                        };
                        _dark: {
                            [x: string]: string;
                        };
                    };
                    _expanded: {
                        [x: string]: string | {
                            [x: string]: string;
                        };
                        _dark: {
                            [x: string]: string;
                        };
                    };
                    _disabled: {
                        opacity: number;
                        cursor: string;
                    };
                    bg: string;
                };
                groupTitle: {
                    mx: number;
                    my: number;
                    fontWeight: string;
                    fontSize: string;
                };
                icon: {
                    display: string;
                    alignItems: string;
                    justifyContent: string;
                    flexShrink: number;
                };
                command: {
                    opacity: number;
                };
                divider: {
                    border: number;
                    borderBottom: string;
                    borderColor: string;
                    my: string;
                    opacity: number;
                };
            } | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("button" | "list" | "divider" | "icon" | "item" | "groupTitle" | "command")[];
                }>;
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("button" | "list" | "divider" | "icon" | "item" | "groupTitle" | "command")[];
                }>;
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("button" | "list" | "divider" | "icon" | "item" | "groupTitle" | "command")[];
        };
        NumberInput: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                root: {
                    [x: string]: string;
                };
                field: {};
                stepperGroup: {
                    width: string;
                };
                stepper: {
                    [x: string]: string | {
                        [x: string]: string;
                        _dark?: undefined;
                        opacity?: undefined;
                        cursor?: undefined;
                    } | {
                        [x: string]: string | {
                            [x: string]: string;
                        };
                        _dark: {
                            [x: string]: string;
                        };
                        opacity?: undefined;
                        cursor?: undefined;
                    } | {
                        opacity: number;
                        cursor: string;
                        _dark?: undefined;
                    };
                    borderStart: string;
                    borderStartColor: string;
                    color: string;
                    bg: string;
                    _dark: {
                        [x: string]: string;
                    };
                    _active: {
                        [x: string]: string | {
                            [x: string]: string;
                        };
                        _dark: {
                            [x: string]: string;
                        };
                    };
                    _disabled: {
                        opacity: number;
                        cursor: string;
                    };
                };
            }) | undefined;
            sizes?: {
                xs: {
                    field: any;
                    stepper: {
                        fontSize: string;
                        _first: {
                            borderTopEndRadius: string | undefined;
                        };
                        _last: {
                            borderBottomEndRadius: string | undefined;
                            mt: string;
                            borderTopWidth: number;
                        };
                    };
                };
                sm: {
                    field: any;
                    stepper: {
                        fontSize: string;
                        _first: {
                            borderTopEndRadius: string | undefined;
                        };
                        _last: {
                            borderBottomEndRadius: string | undefined;
                            mt: string;
                            borderTopWidth: number;
                        };
                    };
                };
                md: {
                    field: any;
                    stepper: {
                        fontSize: string;
                        _first: {
                            borderTopEndRadius: string | undefined;
                        };
                        _last: {
                            borderBottomEndRadius: string | undefined;
                            mt: string;
                            borderTopWidth: number;
                        };
                    };
                };
                lg: {
                    field: any;
                    stepper: {
                        fontSize: string;
                        _first: {
                            borderTopEndRadius: string | undefined;
                        };
                        _last: {
                            borderBottomEndRadius: string | undefined;
                            mt: string;
                            borderTopWidth: number;
                        };
                    };
                };
            } | undefined;
            variants?: {
                outline: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    field: {
                        border: string;
                        borderColor: string;
                        bg: string;
                        _hover: {
                            borderColor: string;
                        };
                        _readOnly: {
                            boxShadow: string;
                            userSelect: string;
                        };
                        _invalid: {
                            borderColor: any;
                            boxShadow: string;
                        };
                        _focusVisible: {
                            zIndex: number;
                            borderColor: any;
                            boxShadow: string;
                        };
                    };
                    addon: {
                        border: string;
                        borderColor: string;
                        bg: string;
                    };
                };
                filled: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    field: {
                        border: string;
                        borderColor: string;
                        bg: string;
                        _hover: {
                            bg: string;
                        };
                        _readOnly: {
                            boxShadow: string;
                            userSelect: string;
                        };
                        _invalid: {
                            borderColor: any;
                        };
                        _focusVisible: {
                            bg: string;
                            borderColor: any;
                        };
                    };
                    addon: {
                        border: string;
                        borderColor: string;
                        bg: string;
                    };
                };
                flushed: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    field: {
                        borderBottom: string;
                        borderColor: string;
                        borderRadius: string;
                        px: string;
                        bg: string;
                        _readOnly: {
                            boxShadow: string;
                            userSelect: string;
                        };
                        _invalid: {
                            borderColor: any;
                            boxShadow: string;
                        };
                        _focusVisible: {
                            borderColor: any;
                            boxShadow: string;
                        };
                    };
                    addon: {
                        borderBottom: string;
                        borderColor: string;
                        borderRadius: string;
                        px: string;
                        bg: string;
                    };
                };
                unstyled: {
                    field: {
                        bg: string;
                        px: string;
                        height: string;
                    };
                    addon: {
                        bg: string;
                        px: string;
                        height: string;
                    };
                };
            } | undefined;
            defaultProps?: {
                size?: "sm" | "md" | "lg" | "xs" | undefined;
                variant?: "outline" | "filled" | "unstyled" | "flushed" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("root" | "field" | "stepper" | "stepperGroup")[];
        };
        PinInput: {
            baseStyle?: {
                textAlign: string;
                width?: string | undefined;
                height?: string | undefined;
                fontSize?: string | undefined;
                px?: string | undefined;
                borderRadius?: string | undefined;
                minWidth?: number | undefined;
                outline?: number | undefined;
                position?: string | undefined;
                appearance?: string | undefined;
                transitionProperty?: string | undefined;
                transitionDuration?: string | undefined;
                _disabled?: {
                    opacity: number;
                    cursor: string;
                } | undefined;
            } | undefined;
            sizes?: {
                lg: {
                    fontSize: string;
                    w: number;
                    h: number;
                    borderRadius: string;
                };
                md: {
                    fontSize: string;
                    w: number;
                    h: number;
                    borderRadius: string;
                };
                sm: {
                    fontSize: string;
                    w: number;
                    h: number;
                    borderRadius: string;
                };
                xs: {
                    fontSize: string;
                    w: number;
                    h: number;
                    borderRadius: string;
                };
            } | undefined;
            variants?: {
                outline: (props: _chakra_ui_styled_system.StyleFunctionProps) => {};
                flushed: (props: _chakra_ui_styled_system.StyleFunctionProps) => {};
                filled: (props: _chakra_ui_styled_system.StyleFunctionProps) => {};
                unstyled: {};
            } | undefined;
            defaultProps?: {
                size?: "sm" | "md" | "lg" | "xs" | undefined;
                variant?: "outline" | "filled" | "unstyled" | "flushed" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
        };
        Progress: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                label: {
                    lineHeight: string;
                    fontSize: string;
                    fontWeight: string;
                    color: string;
                };
                filledTrack: any;
                track: {
                    bg: string;
                };
            }) | undefined;
            sizes?: {
                xs: {
                    track: {
                        h: string;
                    };
                };
                sm: {
                    track: {
                        h: string;
                    };
                };
                md: {
                    track: {
                        h: string;
                    };
                };
                lg: {
                    track: {
                        h: string;
                    };
                };
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("label" | "track" | "filledTrack")[];
                }>;
            } | undefined;
            defaultProps?: {
                size?: "sm" | "md" | "lg" | "xs" | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("label" | "track" | "filledTrack")[];
        };
        SkipLink: {
            baseStyle?: {
                borderRadius: string;
                fontWeight: string;
                _focusVisible: {
                    [x: string]: string | {
                        [x: string]: string;
                    };
                    boxShadow: string;
                    padding: string;
                    position: string;
                    top: string;
                    insetStart: string;
                    _dark: {
                        [x: string]: string;
                    };
                    bg: string;
                };
            } | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
        };
        Slider: {
            baseStyle?: ((props: _chakra_ui_styled_system.StyleFunctionProps) => {
                container: {
                    h: string;
                    w?: undefined;
                    display: string;
                    position: string;
                    cursor: string;
                    _disabled: {
                        opacity: number;
                        cursor: string;
                        pointerEvents: string;
                    };
                } | {
                    w: string;
                    h?: undefined;
                    display: string;
                    position: string;
                    cursor: string;
                    _disabled: {
                        opacity: number;
                        cursor: string;
                        pointerEvents: string;
                    };
                } | {
                    display: string;
                    position: string;
                    cursor: string;
                    _disabled: {
                        opacity: number;
                        cursor: string;
                        pointerEvents: string;
                    };
                };
                track: {
                    overflow: string;
                    borderRadius: string;
                    _dark: {
                        [x: string]: string;
                    };
                    _disabled: {
                        [x: string]: string | {
                            [x: string]: string;
                        };
                        _dark: {
                            [x: string]: string;
                        };
                    };
                    bg: string;
                    h: string;
                    w?: undefined;
                } | {
                    overflow: string;
                    borderRadius: string;
                    _dark: {
                        [x: string]: string;
                    };
                    _disabled: {
                        [x: string]: string | {
                            [x: string]: string;
                        };
                        _dark: {
                            [x: string]: string;
                        };
                    };
                    bg: string;
                    w: string;
                    h?: undefined;
                } | {
                    overflow: string;
                    borderRadius: string;
                    _dark: {
                        [x: string]: string;
                    };
                    _disabled: {
                        [x: string]: string | {
                            [x: string]: string;
                        };
                        _dark: {
                            [x: string]: string;
                        };
                    };
                    bg: string;
                };
                thumb: {
                    w: string;
                    h: string;
                    display: string;
                    alignItems: string;
                    justifyContent: string;
                    position: string;
                    outline: number;
                    zIndex: number;
                    borderRadius: string;
                    bg: string;
                    boxShadow: string;
                    border: string;
                    borderColor: string;
                    transitionProperty: string;
                    transitionDuration: string;
                    _focusVisible: {
                        boxShadow: string;
                    };
                    _disabled: {
                        bg: string;
                    };
                    left: string;
                    transform: string;
                    _active: {
                        transform: string;
                    };
                    top?: undefined;
                } | {
                    w: string;
                    h: string;
                    display: string;
                    alignItems: string;
                    justifyContent: string;
                    position: string;
                    outline: number;
                    zIndex: number;
                    borderRadius: string;
                    bg: string;
                    boxShadow: string;
                    border: string;
                    borderColor: string;
                    transitionProperty: string;
                    transitionDuration: string;
                    _focusVisible: {
                        boxShadow: string;
                    };
                    _disabled: {
                        bg: string;
                    };
                    top: string;
                    transform: string;
                    _active: {
                        transform: string;
                    };
                    left?: undefined;
                } | {
                    w: string;
                    h: string;
                    display: string;
                    alignItems: string;
                    justifyContent: string;
                    position: string;
                    outline: number;
                    zIndex: number;
                    borderRadius: string;
                    bg: string;
                    boxShadow: string;
                    border: string;
                    borderColor: string;
                    transitionProperty: string;
                    transitionDuration: string;
                    _focusVisible: {
                        boxShadow: string;
                    };
                    _disabled: {
                        bg: string;
                    };
                };
                filledTrack: {
                    [x: string]: string | {
                        [x: string]: string;
                    };
                    width: string;
                    height: string;
                    _dark: {
                        [x: string]: string;
                    };
                    bg: string;
                };
            }) | undefined;
            sizes?: {
                lg: {
                    container: {
                        [x: string]: string;
                    };
                };
                md: {
                    container: {
                        [x: string]: string;
                    };
                };
                sm: {
                    container: {
                        [x: string]: string;
                    };
                };
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("mark" | "track" | "container" | "thumb" | "filledTrack")[];
                }>;
            } | undefined;
            defaultProps?: {
                size?: "sm" | "md" | "lg" | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("mark" | "track" | "container" | "thumb" | "filledTrack")[];
        };
        Spinner: {
            baseStyle?: {
                width: string[];
                height: string[];
            } | undefined;
            sizes?: {
                xs: {
                    [x: string]: string;
                };
                sm: {
                    [x: string]: string;
                };
                md: {
                    [x: string]: string;
                };
                lg: {
                    [x: string]: string;
                };
                xl: {
                    [x: string]: string;
                };
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
            } | undefined;
            defaultProps?: {
                size?: "sm" | "md" | "lg" | "xs" | "xl" | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
        };
        Stat: {
            baseStyle?: {
                container: {};
                label: {
                    fontWeight: string;
                };
                helpText: {
                    opacity: number;
                    marginBottom: string;
                };
                number: {
                    verticalAlign: string;
                    fontWeight: string;
                };
                icon: {
                    marginEnd: number;
                    w: string;
                    h: string;
                    verticalAlign: string;
                };
            } | undefined;
            sizes?: {
                md: {
                    label: {
                        fontSize: string;
                    };
                    helpText: {
                        fontSize: string;
                    };
                    number: {
                        fontSize: string;
                    };
                };
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.PartsStyleInterpolation<{
                    keys: ("number" | "label" | "container" | "icon" | "helpText")[];
                }>;
            } | undefined;
            defaultProps?: {
                size?: "md" | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("number" | "label" | "container" | "icon" | "helpText")[];
        };
        Tag: {
            baseStyle?: {
                container: {
                    [x: string]: string | number | {
                        [x: string]: string;
                    };
                    fontWeight: string;
                    lineHeight: number;
                    outline: number;
                    color: string;
                    bg: string;
                    boxShadow: string;
                    borderRadius: string;
                    minH: string;
                    minW: string;
                    fontSize: string;
                    px: string;
                    _focusVisible: {
                        [x: string]: string;
                    };
                };
                label: {
                    lineHeight: number;
                    overflow: string;
                };
                closeButton: {
                    fontSize: string;
                    w: string;
                    h: string;
                    transitionProperty: string;
                    transitionDuration: string;
                    borderRadius: string;
                    marginStart: string;
                    marginEnd: string;
                    opacity: number;
                    _disabled: {
                        opacity: number;
                    };
                    _focusVisible: {
                        boxShadow: string;
                        bg: string;
                    };
                    _hover: {
                        opacity: number;
                    };
                    _active: {
                        opacity: number;
                    };
                };
            } | undefined;
            sizes?: {
                sm: {
                    container: {
                        [x: string]: string;
                    };
                    closeButton: {
                        marginEnd: string;
                        marginStart: string;
                    };
                };
                md: {
                    container: {
                        [x: string]: string;
                    };
                };
                lg: {
                    container: {
                        [x: string]: string;
                    };
                };
            } | undefined;
            variants?: {
                subtle: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    container: {
                        [x: string]: string | {
                            [x: string]: string;
                        };
                        _dark: {
                            [x: string]: string;
                        };
                    } | undefined;
                };
                solid: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    container: {
                        [x: string]: string | {
                            [x: string]: string;
                        };
                        _dark: {
                            [x: string]: string;
                        };
                    } | undefined;
                };
                outline: (props: _chakra_ui_styled_system.StyleFunctionProps) => {
                    container: {
                        [x: string]: string | {
                            [x: string]: string;
                        };
                        _dark: {
                            [x: string]: string;
                        };
                    } | undefined;
                };
            } | undefined;
            defaultProps?: {
                size?: "sm" | "md" | "lg" | undefined;
                variant?: "solid" | "outline" | "subtle" | undefined;
                colorScheme?: string | undefined;
            } | undefined;
            parts: ("label" | "container" | "closeButton")[];
        };
        Tooltip: {
            baseStyle?: {
                [x: string]: string | {
                    [x: string]: string;
                };
                bg: string;
                color: string;
                _dark: {
                    [x: string]: string;
                };
                px: string;
                py: string;
                borderRadius: string;
                fontWeight: string;
                fontSize: string;
                boxShadow: string;
                maxW: string;
                zIndex: string;
            } | undefined;
            sizes?: {
                [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
            } | undefined;
            variants?: {
                [key: string]: _chakra_ui_styled_system.SystemStyleInterpolation;
            } | undefined;
            defaultProps?: {
                size?: string | number | undefined;
                variant?: string | number | undefined;
                colorScheme?: string | undefined;
            } | undefined;
        };
    };
    borders: {
        none: string;
        sm: string;
        "sm-dashed": string;
        md: string;
        "md-dashed": string;
        lg: string;
        "lg-dashed": string;
    };
    breakpoints: {
        base: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
    };
    colors: ColorsType;
    config: {
        cssVarPrefix: string;
        initialColorMode: string;
        useSystemColorMode: boolean;
    };
    fonts: {
        body: string;
        heading: string;
        mono: string;
    };
    fontSizes: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        mobile: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            xxl: string;
        };
        desktop: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            xxl: string;
        };
    };
    fontWeights: {
        light: number;
        medium: number;
        bold: number;
    };
    lineHeights: {
        base: string;
        normal: string;
    };
    radii: {
        none: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        round: string;
    };
    shadows: {
        none: string;
        sm: string;
        md: string;
        lg: string;
    };
    sizes: {
        container: {
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        max: string;
        min: string;
        full: string;
        "3xs": string;
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
        0: string;
        1: string;
        12: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        1.5: string;
        0.5: string;
    };
    spacing: Record<keyof {
        0: {
            value: {
                number: number;
            };
        };
        0.5: {
            value: {
                number: number;
            };
        };
        1: {
            value: {
                number: number;
            };
        };
        1.5: {
            value: {
                number: number;
            };
        };
        2: {
            value: {
                number: number;
            };
        };
        3: {
            value: {
                number: number;
            };
        };
        4: {
            value: {
                number: number;
            };
        };
        5: {
            value: {
                number: number;
            };
        };
        6: {
            value: {
                number: number;
            };
        };
        7: {
            value: {
                number: number;
            };
        };
        8: {
            value: {
                number: number;
            };
        };
        9: {
            value: {
                number: number;
            };
        };
        10: {
            value: {
                number: number;
            };
        };
        11: {
            value: {
                number: number;
            };
        };
        12: {
            value: {
                number: number;
            };
        };
    }, string>;
    space: Record<keyof {
        0: {
            value: {
                number: number;
            };
        };
        0.5: {
            value: {
                number: number;
            };
        };
        1: {
            value: {
                number: number;
            };
        };
        1.5: {
            value: {
                number: number;
            };
        };
        2: {
            value: {
                number: number;
            };
        };
        3: {
            value: {
                number: number;
            };
        };
        4: {
            value: {
                number: number;
            };
        };
        5: {
            value: {
                number: number;
            };
        };
        6: {
            value: {
                number: number;
            };
        };
        7: {
            value: {
                number: number;
            };
        };
        8: {
            value: {
                number: number;
            };
        };
        9: {
            value: {
                number: number;
            };
        };
        10: {
            value: {
                number: number;
            };
        };
        11: {
            value: {
                number: number;
            };
        };
        12: {
            value: {
                number: number;
            };
        };
    }, string>;
    textStyles: {
        "2xl": {
            fontSize: (string | null)[];
            fontFamily: string;
            lineHeight: string;
        };
        "xl-display": {
            fontSize: (string | null)[];
            fontFamily: string;
            lineHeight: string;
        };
        "xl-sans": {
            fontSize: (string | null)[];
            fontFamily: string;
            lineHeight: string;
        };
        lg: {
            fontSize: (string | null)[];
            fontFamily: string;
            lineHeight: string;
        };
        md: {
            fontSize: (string | null)[];
            fontFamily: string;
            lineHeight: string;
        };
        sm: {
            fontSize: (string | null)[];
            fontFamily: string;
            lineHeight: string;
        };
        xs: {
            fontSize: (string | null)[];
            fontFamily: string;
            lineHeight: string;
        };
    };
    zIndices: {
        hide: number;
        auto: string;
        base: number;
        docked: number;
        dropdown: number;
        sticky: number;
        banner: number;
        overlay: number;
        modal: number;
        popover: number;
        skipLink: number;
        toast: number;
        tooltip: number;
    };
    styles: {
        global: (props: Record<string, any> | _chakra_ui_styled_system.StyleFunctionProps) => {
            "html, body": {
                color: string;
            };
            svg: {
                display: string;
            };
        };
    };
    transition: {
        property: {
            common: string;
            colors: string;
            dimensions: string;
            position: string;
            background: string;
        };
        easing: {
            "ease-in": string;
            "ease-out": string;
            "ease-in-out": string;
        };
        duration: {
            "ultra-fast": string;
            faster: string;
            fast: string;
            normal: string;
            slow: string;
            slower: string;
            "ultra-slow": string;
        };
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    blur: {
        none: number;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
    };
    semanticTokens: {
        colors: {
            "chakra-body-text": {
                _light: string;
                _dark: string;
            };
            "chakra-body-bg": {
                _light: string;
                _dark: string;
            };
            "chakra-border-color": {
                _light: string;
                _dark: string;
            };
            "chakra-inverse-text": {
                _light: string;
                _dark: string;
            };
            "chakra-subtle-bg": {
                _light: string;
                _dark: string;
            };
            "chakra-subtle-text": {
                _light: string;
                _dark: string;
            };
            "chakra-placeholder-color": {
                _light: string;
                _dark: string;
            };
        };
    };
    direction: "ltr";
};
declare const brandTheme: {
    VyDigital: {};
    VyUtvikling: {
        colors: {
            bg: {
                default: {
                    dark: string;
                };
            };
            surface: {
                default: {
                    dark: string;
                };
            };
        };
    };
    CargoNet: {
        colors: any;
    };
};

type BaseToastProps = {
    children: React.ReactNode;
    variant: "success" | "info" | "error";
    id?: string;
};

type ClosableToastOptions = {
    isClosable: true;
    /** Callback for when the close button is clicked */
    onClose?: () => void;
};
type ActionToastOptions = {
    isClosable?: false;
    /** Callback for when the button is clicked */
    onClick: () => void;
    /** The button text */
    buttonText: string;
};
type BaseToastOptions = {
    /** How the toast looks */
    variant: BaseToastProps["variant"];
    /** The content of the toast. Keep it short! */
    text: string;
    /**
     * Number of milliseconds to show the toast.
     *
     * Defaults to 6000.
     */
    duration?: number;
};
type ToastOptions = BaseToastOptions & (ClosableToastOptions | ActionToastOptions | {});
/**
 * Creates a function that can trigger toasts
 *
 * ```tsx
 * const toast = useToast();
 * return (
 *   <Button
 *     onClick={() =>
 *        toast({ text: "Hello world", variant: "info" })
 *     }
 *   >
 *    Click me
 *   </Button>
 * ```
 */
declare const useToast: () => (opts: ToastOptions) => void;

type BadgeProps = Omit<BadgeProps$1, "variant" | "colorScheme" | "size"> & {
    /**
     * The color scheme of the badge.
     */
    colorScheme?: "yellow" | "light-yellow" | "red" | "light-green" | "dark-green" | "orange" | "light-blue" | "dark-blue" | "grey" | "white";
    /** The design variant – "solid" by default.
     *
     * Can be specified as `outline` to render a border around the badge. */
    variant?: "solid" | "outline";
    /** Optional badge icon. Will be rendered to the left of the text.
     *
     * Make sure you pass in the 18px version of the icon.
     */
    icon?: React.ReactElement;
};
/**
 * Shows some additional information about the component it's used within.
 *
 * You have to specify some content (icons should be placed to the left, if present), and a colorScheme.
 *
 * ```tsx
 * <Badge colorScheme="light-green">Hello</Badge>
 * ```
 *
 * If you want an icon, pass it in through the `icon` prop:
 *
 * ```tsx
 * <Badge colorScheme="light-blue" icon={<InformationOutline18Icon />}>
 *   Information
 * </Badge>
 * ```
 */
declare const Badge: _chakra_ui_system_dist_system_types.ComponentWithAs<As, BadgeProps>;

type CodeProps = CodeProps$1 & {
    /**
     * The color scheme of the inline code.
     */
    colorScheme?: "yellow" | "light-yellow" | "red" | "green" | "orange" | "blue" | "grey" | "white";
    /** The design variant – "solid" by default.
     *
     * Can be specified as `outline` to render a border around the badge. */
    variant?: "solid" | "outline";
};
/**
 * Shows inline code.
 */
declare const Code: _chakra_ui_system_dist_system_types.ComponentWithAs<As, CodeProps>;

type HeadingProps = Omit<HeadingProps$1, "textStyle" | "as"> & {
    /** The heading level, e.g. h1, h2, h3... **/
    as: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
    /** The size and style of the heading. Defaults to xl-display */
    variant?: keyof typeof textStyles;
    /** If true, generate an ID based on the children */
    autoId?: boolean;
};
/**
 * Create your own fancy headings with this component.
 *
 * You have to specify what level of heading you want, depending on the context you are using the heading in.
 * You do this with the `as` prop. The options are h1, h2, h3, h4, h5 and h6.
 *
 * ```tsx
 * <Heading as="h1">Page heading</Heading>
 * ```
 *
 * You can specify the variant, which is one of "xs", "sm", "md", "lg", "xl-sans", "xs-serif" and "2xl". The default is "xl-sans".
 *
 * ```tsx
 * <Heading as="h1" variant="2xl">Look at me!</Heading>
 * ```
 *
 * If you want to generate an ID based on the children, you can use the `autoId` prop.
 * Please note that this only works with string children (not JSX, nor arrays of strings).
 *
 * ```tsx
 * <Heading as="h1" autoId>Page heading</Heading> // Will set id="page-heading"
 * ```
 */
declare const Heading: ({ as, variant, autoId, id: externalId, ...props }: HeadingProps) => React.JSX.Element;

type TextProps = Omit<TextProps$1, "textStyle"> & {
    /** The size and style of the text.
     *
     * Defaults to "sm" */
    variant?: TextProps$1["textStyle"];
};
/**
 * A paragraph of text.
 *
 * ```tsx
 * <Text>Welcome to this paragraph of text.</Text>
 * ```
 */
declare const Text: _chakra_ui_system_dist_system_types.ComponentWithAs<"p", TextProps>;

/**
 * Makes a slug-version of any string.
 *
 * By default, the maximum length of the slug is 50 characters. You can override this with the `maxLength` parameter.
 *
 * ```tsx
 * slugify("Hello, world!"); // hello-world
 * slugify("Hello, world!", 6); // hello-
 **/
declare function slugify(text: string | string[], maxLength?: number): string;

export { Accordion, AccordionProps, AttachedInputs, Badge, BadgeProps, Brand, Breadcrumb, BreadcrumbItem, BreadcrumbLink, Button, ButtonGroup, ButtonGroupProps, ButtonProps, Card, CardProps, CardSelect, CargonetLogo, CargonetLogoProps, Checkbox, CheckboxGroup, CheckboxGroupProps, CheckboxProps, ChoiceChip, ChoiceChipProps, ClosableAlert, CloseButton, CloseButtonProps, Code, CodeProps, ColorInlineLoader, ColorInlineLoaderProps, ColorSpinner, ColorSpinnerProps, Combobox, ComboboxProps, ContentLoader, ContentLoaderProps, DarkFullScreenLoader, DarkInlineLoader, DarkInlineLoaderProps, DarkSpinner, DarkSpinnerProps, DatePicker, DateRangePicker, Divider, DividerProps, Drawer, DrawerBodyProps, DrawerContent, ModalHeader as DrawerHeader, Expandable, ExpandableAlert, ExpandableItem, ExpandableItemProps, FloatingActionButton, FormControl, FormControlProps, FormErrorMessage, FormErrorMessageProps, FormLabel, FormLabelProps, FullScreenDrawer, Heading, HeadingProps, IconButton, IconButtonProps, InfoSelect, InfoTag, InfoTagProps, Input, InputElementProps, InputLeftElement, InputProps, InputRightElement, ItemDescription, ItemLabel, JumpButton, Language, LanguageProvider, LightFullScreenLoader, LightInlineLoader, LightInlineLoaderProps, LightSpinner, LightSpinnerProps, LineIcon, LineIconProps, ListBox, ModalHeader, ModalHeaderProps, NativeSelect, NativeSelectProps, Nudge, NudgeProps, NumericStepper, Pagination, PasswordInput, PasswordInputProps, PhoneNumberInput, PlayPauseButton, PressableCard, ProgressBar, ProgressIndicator, ProgressLoader, Radio, RadioCard, RadioCardGroup, RadioCardGroupContext, RadioCardProps, RadioGroup, RadioGroupProps, RadioProps, SearchInput, SearchInputProps, SimpleDrawer, SimpleDrawerProps, Skeleton, SkeletonCircle, SkeletonCircleProps, SkeletonProps, SkeletonText, SkeletonTextProps, SkipButton, SpinnerProps, SporProvider, Stack, StackProps, StaticAlert, StaticCard, StaticCardProps, Stepper, StepperStep, Switch, SwitchProps, Table, TableProps, Tabs, TabsProps, Text, TextLink, TextProps, Textarea, TextareaProps, TimePicker, ToastOptions, Tooltip, TooltipProps, Translations, TravelTag, TravelTagProps, VyLogo, VyLogoPride, VyLogoPrideProps, VyLogoProps, WizardNudge, WizardNudgeProps, brandTheme, createTexts, fontFaces, slugify, theme, useToast, useTranslation };
