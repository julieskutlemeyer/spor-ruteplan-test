import tokens11__default from '@vygruppen/spor-design-tokens';
import * as tokens11 from '@vygruppen/spor-design-tokens';
export { tokens11 as tokens };
import { forwardRef, Divider as Divider$1, Stack as Stack$1, Box, useMultiStyleConfig, chakra, Flex, Checkbox as Checkbox$1, useCheckbox, FormControl as FormControl$1, FormLabel as FormLabel$1, useFormControlContext, InputGroup, InputLeftElement, Input as Input$1, InputRightElement, Select, useDisclosure, Button, useControllableState, Radio as Radio$1, RadioGroup as RadioGroup$1, IconButton as IconButton$1, Switch as Switch$1, Textarea as Textarea$1, useStyleConfig, Accordion as Accordion$1, Skeleton as Skeleton$1, useButtonGroup, Center, ButtonGroup as ButtonGroup$1, Badge as Badge$1, Code as Code$1, Text, PopoverAnchor, PopoverContent, PopoverArrow, PopoverBody, FocusLock, Popover as Popover$1, PopoverTrigger, Portal, Link, ModalHeader as ModalHeader$1, useModalContext, DrawerContent as DrawerContent$1, Tabs as Tabs$1, Table as Table$1, defineStyleConfig as defineStyleConfig$1, createMultiStyleConfigHelpers as createMultiStyleConfigHelpers$1, Heading, CheckboxGroup as CheckboxGroup$1, List, ListItem, useColorModeValue, useFormControlProps, useFormControl, AccordionItem, AccordionButton, AccordionIcon, AccordionPanel, useColorMode, SkeletonCircle as SkeletonCircle$1, SkeletonText as SkeletonText$1, Breadcrumb as Breadcrumb$1, BreadcrumbItem as BreadcrumbItem$1, BreadcrumbLink as BreadcrumbLink$1, Drawer as Drawer$1, DrawerOverlay, DrawerBody, DrawerHeader, useMediaQuery, DrawerCloseButton, DarkMode, PopoverCloseButton, usePopoverContext, UnorderedList, ChakraProvider, useToast as useToast$1, useInterval } from '@chakra-ui/react';
export { AccordionButton, AccordionIcon, AccordionItem, AccordionPanel, Box, Center, Collapse, Container, DarkMode, DrawerBody, DrawerCloseButton, DrawerFooter, DrawerOverlay, Fade, Flex, FormHelperText, Grid, GridItem, HStack, Image, Img, InputGroup, LightMode, ListItem, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalOverlay, OrderedList, Portal, ScaleFade, SimpleGrid, Slide, SlideFade, Spacer, Tab, TabList, TabPanel, TabPanels, TableCaption, Tbody, Td, Tfoot, Th, Thead, Tr, UnorderedList, VStack, Wrap, WrapItem, defineStyleConfig, extendTheme, useBreakpointValue, useClipboard, useColorMode, useColorModePreference, useColorModeValue, useControllableProp, useDisclosure, useMediaQuery, useMergeRefs, useOutsideClick, usePrefersReducedMotion, useTheme, useToken } from '@chakra-ui/react';
import * as React86 from 'react';
import React86__default, { forwardRef as forwardRef$1, useRef, useState, useEffect, useId, Suspense, useContext, createContext, useCallback, useMemo, useLayoutEffect } from 'react';
import { CloseOutline24Icon, SearchOutline24Icon, CloseFill30Icon, CloseFill24Icon, CloseFill18Icon, CalendarOutline24Icon, InformationFill24Icon, InformationFill18Icon, WarningFill24Icon, WarningFill18Icon, ErrorFill24Icon, ErrorFill18Icon, LinkOutOutline24Icon, DropdownDownFill18Icon, DropdownDownFill24Icon, DropdownUpFill24Icon, DropdownRightFill18Icon, DropdownLeftFill18Icon, Forward15MediaControllerFill30Icon, Backward15MediaControllerFill30Icon, PauseMediaControllerFill24Icon, PlayMediaControllerFill24Icon, NextMediaControllerFill30Icon, PreviousMediaControllerFill30Icon, ArrowLeftFill24Icon, ArrowLeftFill30Icon, ArrowRightFill18Icon, ArrowLeftOutline24Icon, ArrowRightOutline24Icon, ErrorOutline24Icon, AltTransportOutline24Icon, WarningOutline24Icon, SuccessOutline24Icon, InformationOutline24Icon, TrainFill18Icon, TrainFill24Icon, TrainFill30Icon, ExpressBusFill18Icon, ExpressBusFill24Icon, ExpressBusFill30Icon, BusFill18Icon, BusFill24Icon, BusFill30Icon, FerryFill18Icon, FerryFill24Icon, FerryFill30Icon, SubwayFill18Icon, SubwayFill24Icon, SubwayFill30Icon, TramFill18Icon, TramFill24Icon, TramFill30Icon, AltTransportFill18Icon, AltTransportFill24Icon, AltTransportFill30Icon, WalkFill18Icon, WalkFill24Icon, WalkFill30Icon } from '@vygruppen/spor-icon-react';
import { usePopover, DismissButton, Overlay, useOverlayTrigger, useButton, useDateSegment, useDateField, useDatePicker, I18nProvider, useDialog, useFilter, useComboBox, useListBox, useOption, useListBoxSection, useSelect, HiddenSelect, useProgressBar, useCalendar, useDateRangePicker, useCalendarGrid, useRangeCalendar, useTimeField, useCalendarCell } from 'react-aria';
import { useOverlayTriggerState, Item, useDateFieldState, useDatePickerState, useComboBoxState, useSelectState, useCalendarState, useDateRangePickerState, useTimeFieldState, useRangeCalendarState } from 'react-stately';
export { Item, Section } from 'react-stately';
import { inlineLoaderColorData, spinnerColorData, contentLoaderData, fullScreenLoaderWhiteData, inlineLoaderDarkData, fullScreenLoaderBlackData, inlineLoaderLightData, spinnerLightData, spinnerDarkData } from '@vygruppen/spor-loader';
import { useLottie } from 'lottie-react';
import { motion } from 'framer-motion';
import { createCalendar, GregorianCalendar, parseTime, endOfMonth, getWeeksInMonth, getLocalTimeZone, isSameMonth, isToday } from '@internationalized/date';
export { Time } from '@internationalized/date';
import { useSwipeable } from 'react-swipeable';
import { Global, keyframes } from '@emotion/react';
import deepmerge from 'deepmerge';
import { cssVar as cssVar$1, calc as calc$1, mode, getColor, anatomy as anatomy$1, orient, transparentize, generateStripe, randomColor, isDark } from '@chakra-ui/theme-tools';

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// ../../node_modules/lodash.mergewith/index.js
var require_lodash = __commonJS({
  "../../node_modules/lodash.mergewith/index.js"(exports, module) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var asyncTag = "[object AsyncFunction]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var nullTag = "[object Null]";
    var objectTag = "[object Object]";
    var proxyTag = "[object Proxy]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var undefinedTag = "[object Undefined]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function overArg(func, transform2) {
      return function(arg) {
        return func(transform2(arg));
      };
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var nativeObjectToString = objectProto.toString;
    var objectCtorString = funcToString.call(Object);
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer2 = moduleExports ? root.Buffer : void 0;
    var Symbol2 = root.Symbol;
    var Uint8Array2 = root.Uint8Array;
    var allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var objectCreate = Object.create;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var nativeMax = Math.max;
    var nativeNow = Date.now;
    var Map2 = getNative(root, "Map");
    var nativeCreate = getNative(Object, "create");
    var baseCreate = function() {
      function object() {
      }
      return function(proto) {
        if (!isObject2(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size2 = data.size;
      data.set(key, value);
      this.size += data.size == size2 ? 0 : 1;
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function Stack5(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    Stack5.prototype.clear = stackClear;
    Stack5.prototype["delete"] = stackDelete;
    Stack5.prototype.get = stackGet;
    Stack5.prototype.has = stackHas;
    Stack5.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    var baseFor = createBaseFor();
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    function baseIsNative(value) {
      if (!isObject2(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseKeysIn(object) {
      if (!isObject2(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack5());
        if (isObject2(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject2(objValue) || isFunction2(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + "");
    }
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
      return result;
    }
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    function copyArray(source, array) {
      var index = -1, length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isIterateeCall(value, index, object) {
      if (!isObject2(object)) {
        return false;
      }
      var type = typeof index;
      if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
        return eq(object[index], value);
      }
      return false;
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    function overRest(func, start, transform2) {
      start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform2(array);
        return apply(func, this, otherArgs);
      };
    }
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    var setToString = shortOut(baseSetToString);
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction2(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isFunction2(value) {
      if (!isObject2(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject2(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    var mergeWith5 = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });
    function constant(value) {
      return function() {
        return value;
      };
    }
    function identity(value) {
      return value;
    }
    function stubFalse() {
      return false;
    }
    module.exports = mergeWith5;
  }
});
var Divider = forwardRef((props, ref) => {
  return /* @__PURE__ */ React86__default.createElement(Divider$1, { ...props, ref });
});
var Stack = forwardRef(
  ({ flexDirection, ...props }, ref) => {
    return /* @__PURE__ */ React86__default.createElement(Stack$1, { ...props, direction: flexDirection, ref });
  }
);
var AttachedInputs = ({
  flexDirection = "row",
  ...rest
}) => {
  const attachedStyles = {
    horizontal: {
      "> *:first-of-type:not(:last-of-type) [data-attachable]": {
        borderEndRadius: 0
      },
      "> *:not(:first-of-type):not(:last-of-type) [data-attachable]": {
        borderRadius: 0
      },
      "> *:not(:first-of-type):last-of-type [data-attachable]": {
        borderStartRadius: 0
      }
    },
    vertical: {
      "> *:first-of-type:not(:last-of-type) [data-attachable]": {
        borderBottomRadius: 0
      },
      "> *:not(:first-of-type):not(:last-of-type) [data-attachable]": {
        borderRadius: 0
      },
      "> *:not(:first-of-type):last-of-type [data-attachable]": {
        borderTopRadius: 0
      }
    }
  };
  const direction2 = flexDirection === "row" ? "horizontal" : "vertical";
  return /* @__PURE__ */ React86__default.createElement(
    Flex,
    {
      role: "group",
      __css: attachedStyles[direction2],
      display: "flex",
      flexDirection,
      ...rest
    }
  );
};
var Dialog = ({ title, children, ...props }) => {
  const ref = useRef(null);
  const { dialogProps, titleProps } = useDialog(props, ref);
  return /* @__PURE__ */ React86__default.createElement(Box, { ...dialogProps, ref, outline: "none" }, title && /* @__PURE__ */ React86__default.createElement(Heading, { as: "h3", ...titleProps }, title), children);
};
var Popover = forwardRef$1(
  ({
    children,
    state: state2,
    triggerRef,
    offset = 0,
    crossOffset = 0,
    placement = "bottom",
    shouldFlip = false,
    isNonModal = false,
    hasBackdrop = true,
    containerPadding = 12
  }, ref) => {
    var _a6;
    const internalRef = useRef(null);
    const popoverRef = ref ?? internalRef;
    const { popoverProps, underlayProps } = usePopover(
      {
        triggerRef,
        popoverRef,
        offset,
        crossOffset,
        placement,
        shouldFlip,
        isNonModal,
        containerPadding
      },
      state2
    );
    const popoverBox = /* @__PURE__ */ React86__default.createElement(
      Box,
      {
        ...popoverProps,
        ref: popoverRef,
        minWidth: ((_a6 = triggerRef.current) == null ? void 0 : _a6.clientWidth) ?? "auto"
      },
      /* @__PURE__ */ React86__default.createElement(DismissButton, { onDismiss: state2.close }),
      children,
      /* @__PURE__ */ React86__default.createElement(DismissButton, { onDismiss: state2.close })
    );
    if (isNonModal) {
      return popoverBox;
    }
    return /* @__PURE__ */ React86__default.createElement(Overlay, null, hasBackdrop && /* @__PURE__ */ React86__default.createElement(Box, { ...underlayProps, position: "fixed", inset: "0" }), popoverBox);
  }
);

// src/input/CardSelect.tsx
var CardSelect = forwardRef(
  ({
    variant,
    size: size2,
    isOpen: externalIsOpen,
    defaultOpen = false,
    onToggle,
    icon,
    children,
    width = "fit-content",
    crossOffset = 0,
    placement = "bottom",
    withChevron = true,
    fontWeight = "normal",
    ...props
  }, externalRef) => {
    const label = "label" in props ? props.label : props["aria-label"];
    const internalRef = useRef(null);
    const triggerRef = externalRef ?? internalRef;
    const state2 = useOverlayTriggerState({
      isOpen: externalIsOpen,
      onOpenChange: onToggle,
      defaultOpen
    });
    const { triggerProps, overlayProps } = useOverlayTrigger(
      { type: "dialog" },
      state2,
      triggerRef
    );
    const { buttonProps } = useButton(triggerProps, triggerRef);
    const styles3 = useMultiStyleConfig("CardSelect", {
      variant,
      size: size2
    });
    useForceRerender(state2.isOpen);
    const ChevronIcon = size2 === "sm" ? DropdownDownFill18Icon : DropdownDownFill24Icon;
    return /* @__PURE__ */ React86__default.createElement(Box, { ...props }, /* @__PURE__ */ React86__default.createElement(
      chakra.button,
      {
        type: "button",
        ref: triggerRef,
        fontWeight: "bold",
        sx: styles3.trigger,
        "aria-label": label,
        ...buttonProps,
        width,
        "data-attachable": true
      },
      /* @__PURE__ */ React86__default.createElement(Flex, { gap: 1.5, alignItems: "center" }, icon, /* @__PURE__ */ React86__default.createElement(Box, { as: "span", display: props["aria-label"] ? "none" : "inline" }, label), withChevron ? /* @__PURE__ */ React86__default.createElement(
        ChevronIcon,
        {
          transform: state2.isOpen ? "rotate(180deg)" : "none"
        }
      ) : null)
    ), state2.isOpen && /* @__PURE__ */ React86__default.createElement(
      Popover,
      {
        state: state2,
        triggerRef,
        offset: size2 === "sm" ? 6 : 12,
        crossOffset,
        placement
      },
      /* @__PURE__ */ React86__default.createElement(
        StaticCard,
        {
          colorScheme: "white",
          size: "lg",
          border: "sm",
          borderColor: "grey",
          sx: styles3.card,
          ...overlayProps
        },
        /* @__PURE__ */ React86__default.createElement(Dialog, { "aria-label": label }, children)
      )
    ));
  }
);
function useForceRerender(shouldRerender) {
  const [_, update] = useState(false);
  useEffect(() => {
    if (shouldRerender) {
      update((x) => !x);
    }
  }, [shouldRerender]);
}
var Checkbox = forwardRef((props, ref) => {
  return /* @__PURE__ */ React86__default.createElement(Checkbox$1, { ...props, ref });
});
var CheckboxGroup = ({
  direction: direction2 = "row",
  children,
  ...props
}) => {
  return /* @__PURE__ */ React86__default.createElement(CheckboxGroup$1, { ...props }, /* @__PURE__ */ React86__default.createElement(Stack$1, { direction: direction2 }, children));
};

// ../../node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
var dataAttr = (condition) => condition ? "" : void 0;
var ChoiceChip = forwardRef((props, ref) => {
  const {
    children,
    icon,
    isDisabled,
    size: size2 = "sm",
    chipType = "choice",
    variant = "base"
  } = props;
  const {
    state: state2,
    getInputProps,
    getCheckboxProps,
    getRootProps,
    getLabelProps
  } = useCheckbox(props);
  const styles3 = useMultiStyleConfig("ChoiceChip", {
    size: size2,
    chipType,
    variant,
    icon,
    hasLabel: Boolean(children)
  });
  const id = `choice-chip-${useId()}`;
  return /* @__PURE__ */ React86__default.createElement(
    chakra.label,
    {
      htmlFor: id,
      ...getRootProps(),
      "aria-label": String(children)
    },
    /* @__PURE__ */ React86__default.createElement(chakra.input, { ...getInputProps({}, ref), id, disabled: isDisabled }),
    /* @__PURE__ */ React86__default.createElement(
      chakra.div,
      {
        ...getLabelProps(),
        __css: styles3.container,
        "data-checked": dataAttr(state2.isChecked),
        "data-hover": dataAttr(state2.isHovered),
        "data-focus": dataAttr(state2.isFocused),
        "data-active": dataAttr(state2.isActive),
        "data-disabled": dataAttr(state2.isDisabled)
      },
      icon && /* @__PURE__ */ React86__default.createElement(chakra.span, { __css: styles3.icon }, state2.isChecked ? icon.checked : icon.default),
      /* @__PURE__ */ React86__default.createElement(chakra.span, { __css: styles3.label, ...getCheckboxProps() }, chipType !== "icon" && children),
      chipType === "filter" && state2.isChecked && /* @__PURE__ */ React86__default.createElement(CloseOutline24Icon, { marginLeft: 1.5 })
    )
  );
});
function Combobox({
  label,
  isLoading,
  leftIcon,
  rightIcon,
  borderBottomLeftRadius = "sm",
  borderBottomRightRadius = "sm",
  borderTopLeftRadius = "sm",
  borderTopRightRadius = "sm",
  marginBottom,
  marginTop,
  marginX,
  marginY,
  marginRight,
  marginLeft,
  paddingBottom,
  paddingRight,
  paddingTop,
  paddingLeft,
  paddingX,
  paddingY,
  emptyContent,
  inputRef: externalInputRef,
  allowsEmptyCollection,
  ...rest
}) {
  const { contains: contains2 } = useFilter({ sensitivity: "base" });
  const fallbackInputRef = useRef(null);
  const inputRef = externalInputRef ?? fallbackInputRef;
  const listBoxRef = useRef(null);
  const popoverRef = useRef(null);
  const listboxId = `${useId()}-listbox`;
  const inputWidth = useInputWidth(inputRef);
  const state2 = useComboBoxState({
    allowsEmptyCollection: Boolean(emptyContent),
    defaultFilter: contains2,
    shouldCloseOnBlur: true,
    ...rest
  });
  const comboBoxProps = {
    borderTopLeftRadius,
    borderTopRightRadius,
    marginBottom,
    marginTop,
    marginRight,
    marginLeft,
    marginX,
    marginY,
    paddingBottom,
    paddingRight,
    paddingTop,
    paddingLeft,
    paddingX,
    paddingY,
    leftIcon
  };
  const {
    inputProps: { size: size2, ...inputProps },
    listBoxProps
  } = useComboBox(
    {
      ...rest,
      inputRef,
      listBoxRef,
      popoverRef,
      label
    },
    state2
  );
  return /* @__PURE__ */ React86__default.createElement(React86__default.Fragment, null, /* @__PURE__ */ React86__default.createElement(
    Input,
    {
      ...styleProps(comboBoxProps),
      "aria-haspopup": "listbox",
      ref: inputRef,
      role: "combobox",
      label,
      "aria-expanded": state2.isOpen,
      "aria-autocomplete": "list",
      "aria-controls": listboxId,
      borderBottomLeftRadius: state2.isOpen && !isLoading ? 0 : borderBottomLeftRadius,
      borderBottomRightRadius: state2.isOpen && !isLoading ? 0 : borderBottomRightRadius,
      ...inputProps,
      rightIcon: isLoading ? /* @__PURE__ */ React86__default.createElement(
        ColorSpinner,
        {
          width: "1.5rem",
          alignSelf: "center",
          paddingRight,
          css: {
            div: {
              display: "flex",
              alignItems: "center"
            }
          }
        }
      ) : rightIcon
    }
  ), /* @__PURE__ */ React86__default.createElement("span", { "aria-hidden": "true", "data-trigger": "multiselect" }), state2.isOpen && !isLoading && /* @__PURE__ */ React86__default.createElement(
    Popover,
    {
      state: state2,
      triggerRef: inputRef,
      ref: popoverRef,
      isNonModal: true,
      placement: "bottom start",
      shouldFlip: false,
      hasBackdrop: false,
      containerPadding: 0
    },
    /* @__PURE__ */ React86__default.createElement(
      ListBox,
      {
        ...listBoxProps,
        state: state2,
        id: listboxId,
        listBoxRef,
        emptyContent,
        maxWidth: inputWidth
      },
      rest.children
    )
  ));
}
var useInputWidth = (inputRef) => {
  const [inputWidth, setInputWidth] = useState("auto");
  useEffect(() => {
    const onResize = debounce(() => {
      if (inputRef.current) {
        setInputWidth(`${inputRef.current.offsetWidth}px`);
      }
    }, 67);
    window.addEventListener("resize", onResize);
    return () => window.removeEventListener("resize", onResize);
  }, []);
  return inputWidth;
};
function styleProps(obj) {
  return Object.fromEntries(
    Object.entries(obj).filter(([, value]) => value !== void 0)
  );
}
var debounce = (fn, ms = 100) => {
  let timer;
  return () => {
    clearTimeout(timer);
    timer = setTimeout(() => {
      timer = null;
      fn();
    }, ms);
  };
};
var FormControl = forwardRef((props, ref) => {
  return /* @__PURE__ */ React86__default.createElement(FormControl$1, { ...props, ref });
});
var FormErrorMessage = ({
  children,
  ...boxProps
}) => {
  const formControlContext = useFormControlContext();
  if (!formControlContext) {
    throw new Error(
      "FormErrorMessage must be used within a FormControl component"
    );
  }
  if (!formControlContext.isInvalid) {
    return null;
  }
  const { ref, ...errorMessageProps } = formControlContext.getErrorMessageProps();
  return /* @__PURE__ */ React86__default.createElement(Box, { position: "relative", ref }, /* @__PURE__ */ React86__default.createElement(
    Box,
    {
      borderRadius: "xs",
      backgroundColor: "lightRed",
      color: "darkGrey",
      paddingX: 1.5,
      paddingY: 1,
      textStyle: "xs",
      width: "fit-content",
      position: "absolute",
      top: -0.5,
      left: 3,
      zIndex: "dropdown",
      maxWidth: "50ch",
      ...errorMessageProps,
      ...boxProps
    },
    /* @__PURE__ */ React86__default.createElement(Arrow, { position: "absolute", top: "-0.25em", left: "1em" }),
    children
  ));
};
var Arrow = (props) => {
  return /* @__PURE__ */ React86__default.createElement(
    Box,
    {
      ...props,
      as: "svg",
      width: "16",
      height: "16",
      viewBox: "0 0 16 16",
      fill: "none",
      transform: "rotate(45deg)"
    },
    /* @__PURE__ */ React86__default.createElement(
      Box,
      {
        as: "path",
        fill: "lightRed",
        d: "M 0\n        0 Q 2.4 6 0 12 Q 6 9.6 12 12 Q 9.6 6 12 0 Q 6 2.4 0 0 z"
      }
    )
  );
};
var FormLabel = forwardRef((props, ref) => {
  return /* @__PURE__ */ React86__default.createElement(FormLabel$1, { ...props, ref });
});
function ListBox({
  isLoading,
  listBoxRef,
  state: state2,
  maxWidth,
  ...props
}) {
  const { listBoxProps } = useListBox(props, state2, listBoxRef);
  const styles3 = useMultiStyleConfig("ListBox", {});
  return /* @__PURE__ */ React86__default.createElement(
    List,
    {
      ...listBoxProps,
      ref: listBoxRef,
      sx: styles3.container,
      "aria-busy": isLoading,
      maxWidth
    },
    state2.collection.size === 0 && props.emptyContent,
    Array.from(state2.collection).map(
      (item) => item.type === "section" ? /* @__PURE__ */ React86__default.createElement(ListBoxSection, { key: item.key, section: item, state: state2 }) : /* @__PURE__ */ React86__default.createElement(Option, { key: item.key, item, state: state2 })
    )
  );
}
function ItemLabel({ children }) {
  let { labelProps } = useOptionContext();
  const styles3 = useMultiStyleConfig("ListBox", {});
  return /* @__PURE__ */ React86__default.createElement(Box, { ...labelProps, sx: styles3.label }, children);
}
function ItemDescription({ children }) {
  let { descriptionProps } = useOptionContext();
  const styles3 = useMultiStyleConfig("ListBox", {});
  return /* @__PURE__ */ React86__default.createElement(Box, { ...descriptionProps, sx: styles3.description }, children);
}
function Option({ item, state: state2 }) {
  const ref = useRef(null);
  const {
    optionProps,
    isSelected,
    isDisabled,
    isFocusVisible,
    isFocused,
    labelProps,
    descriptionProps
  } = useOption({ key: item.key }, state2, ref);
  const styles3 = useMultiStyleConfig("ListBox", {});
  let dataFields = {};
  if (isSelected) {
    dataFields["data-selected"] = true;
  }
  if (isDisabled) {
    dataFields["data-disabled"] = true;
  }
  if (isFocused) {
    dataFields["data-focus"] = true;
  }
  if (isFocusVisible) {
    dataFields["data-focus-visible"] = true;
  }
  useEffect(() => {
    var _a6;
    (_a6 = ref == null ? void 0 : ref.current) == null ? void 0 : _a6.addEventListener(
      "touchend",
      (event) => {
        event.preventDefault();
      },
      { passive: false, once: true }
    );
  }, []);
  return /* @__PURE__ */ React86__default.createElement(OptionContext.Provider, { value: { labelProps, descriptionProps } }, /* @__PURE__ */ React86__default.createElement(ListItem, { ...optionProps, ...dataFields, ref, sx: styles3.item }, item.rendered));
}
var OptionContext = React86__default.createContext({
  labelProps: {},
  descriptionProps: {}
});
var useOptionContext = () => {
  return useContext(OptionContext);
};
function ListBoxSection({ section, state: state2 }) {
  const { itemProps, headingProps, groupProps } = useListBoxSection({
    heading: section.rendered,
    "aria-label": section["aria-label"]
  });
  const isFirstSection = section.key === state2.collection.getFirstKey();
  const titleColor = useColorModeValue("darkGrey", "white");
  return /* @__PURE__ */ React86__default.createElement(ListItem, { ...itemProps }, section.rendered && /* @__PURE__ */ React86__default.createElement(
    Box,
    {
      fontSize: "mobile.xs",
      color: titleColor,
      paddingX: 3,
      paddingY: 1,
      marginTop: isFirstSection ? 0 : 3,
      textTransform: "uppercase",
      fontWeight: "bold",
      ...headingProps
    },
    section.rendered
  ), /* @__PURE__ */ React86__default.createElement(List, { ...groupProps, padding: 0, listStyleType: "none" }, Array.from(state2.collection.getChildren(section.key)).map(
    (item) => /* @__PURE__ */ React86__default.createElement(Option, { key: item.key, item, state: state2 })
  )));
}

// src/input/InfoSelect.tsx
function InfoSelect({
  placeholder,
  onChange,
  value,
  isLabelSrOnly,
  defaultValue,
  variant,
  ...props
}) {
  const renamedProps = {
    onSelectionChange: onChange,
    selectedKey: value,
    defaultSelectedKey: defaultValue,
    ...props
  };
  const state2 = useSelectState(renamedProps);
  const triggerRef = useRef(null);
  const listboxRef = useRef(null);
  const { labelProps, triggerProps, valueProps, menuProps } = useSelect(
    renamedProps,
    state2,
    triggerRef
  );
  const stateStyle = "completed";
  const styles3 = useMultiStyleConfig("InfoSelect", {
    isOpen: state2.isOpen,
    isLabelSrOnly,
    variant,
    stateStyle
  });
  const { buttonProps } = useButton(triggerProps, triggerRef);
  const { t: t2 } = useTranslation();
  const formControl = useFormControlProps(props);
  const hasChosenValue = state2.selectedItem !== null;
  return /* @__PURE__ */ React86__default.createElement(Box, { sx: styles3.container }, /* @__PURE__ */ React86__default.createElement(
    HiddenSelect,
    {
      state: state2,
      triggerRef,
      label: props.label,
      name: props.name
    }
  ), /* @__PURE__ */ React86__default.createElement(
    chakra.button,
    {
      type: "button",
      ref: triggerRef,
      sx: styles3.button,
      ...buttonProps,
      "data-attachable": true,
      "aria-invalid": formControl.isInvalid,
      "aria-describedby": formControl["aria-describedby"]
    },
    /* @__PURE__ */ React86__default.createElement(chakra.div, { sx: styles3.innerButton }, /* @__PURE__ */ React86__default.createElement(
      chakra.div,
      {
        ...labelProps,
        sx: {
          ...styles3.label,
          ...hasChosenValue && {
            transform: "scale(0.825) translateY(-10px) translateX(-10%)",
            transitionProperty: "var(--spor-transition-property-common)",
            transitionDuration: "var(--spor-transition-duration-normal)"
          }
        }
      },
      props.label
    ), /* @__PURE__ */ React86__default.createElement(
      Box,
      {
        ...valueProps,
        h: isLabelSrOnly ? "" : !hasChosenValue ? "0px" : "18px",
        hidden: !hasChosenValue,
        transform: isLabelSrOnly ? "" : "scale(1) translateY(-10px)",
        transitionProperty: "var(--spor-transition-property-common)",
        transitionDuration: "var(--spor-transition-duration-normal)"
      },
      state2.selectedItem ? state2.selectedItem.textValue ?? state2.selectedItem.rendered : placeholder ?? t2(texts.selectAnOption)
    )),
    /* @__PURE__ */ React86__default.createElement(Box, { sx: styles3.arrowIcon }, state2.isOpen ? /* @__PURE__ */ React86__default.createElement(DropdownUpFill24Icon, null) : /* @__PURE__ */ React86__default.createElement(DropdownDownFill24Icon, null))
  ), state2.isOpen && /* @__PURE__ */ React86__default.createElement(
    Popover,
    {
      state: state2,
      triggerRef,
      containerPadding: 0
    },
    /* @__PURE__ */ React86__default.createElement(
      ListBox,
      {
        ...menuProps,
        state: state2,
        listBoxRef: listboxRef,
        borderBottomRadius: "sm"
      },
      props.children
    )
  ));
}
var texts = createTexts({
  selectAnOption: {
    nb: "Velg et alternativ",
    nn: "Velg eit alternativ",
    sv: "V\xE4lj ett alternativ",
    en: "Choose an option"
  }
});
var Input = forwardRef(
  ({ label, leftIcon, rightIcon, id, size: size2, ...props }, ref) => {
    const formControlProps = useFormControlContext();
    const fallbackId = `input-${useId()}`;
    const inputId = id ?? (formControlProps == null ? void 0 : formControlProps.id) ?? fallbackId;
    return /* @__PURE__ */ React86__default.createElement(InputGroup, { position: "relative" }, leftIcon && /* @__PURE__ */ React86__default.createElement(InputLeftElement, { pointerEvents: "none" }, leftIcon), /* @__PURE__ */ React86__default.createElement(
      Input$1,
      {
        "data-attachable": true,
        paddingLeft: leftIcon ? 7 : void 0,
        paddingRight: rightIcon ? 7 : void 0,
        ...props,
        id: inputId,
        "aria-labelledby": inputId,
        ref,
        placeholder: " "
      }
    ), /* @__PURE__ */ React86__default.createElement(FormLabel$1, { htmlFor: inputId }, label), rightIcon && /* @__PURE__ */ React86__default.createElement(InputRightElement, { pointerEvents: "none" }, rightIcon));
  }
);
var InputLeftElement2 = forwardRef(
  (props, ref) => /* @__PURE__ */ React86__default.createElement(InputLeftElement, { ...props, ref })
);
var InputRightElement2 = forwardRef(
  (props, ref) => /* @__PURE__ */ React86__default.createElement(InputRightElement, { ...props, ref })
);
var NativeSelect = forwardRef(
  ({ label, ...props }, ref) => {
    const styles3 = useMultiStyleConfig("Select", props);
    return /* @__PURE__ */ React86__default.createElement(FormControl, null, /* @__PURE__ */ React86__default.createElement(
      Select,
      {
        "data-attachable": true,
        ...props,
        rootProps: { __css: styles3.root },
        ref
      }
    ), label && /* @__PURE__ */ React86__default.createElement(FormLabel, null, label));
  }
);
function NumericStepper({
  name: nameProp,
  id: idProp,
  value: valueProp,
  defaultValue = 1,
  onChange: onChangeProp,
  minValue = 0,
  maxValue = 99,
  isDisabled,
  withInput = true,
  stepSize = 1,
  showZero = false,
  ...boxProps
}) {
  const { t: t2 } = useTranslation();
  const styles3 = useMultiStyleConfig("NumericStepper", {});
  const [value, onChange] = useControllableState({
    value: valueProp,
    onChange: onChangeProp,
    defaultValue
  });
  const formControlProps = useFormControl({ id: idProp, isDisabled });
  const clampedStepSize = Math.max(Math.min(stepSize, 10), 1);
  return /* @__PURE__ */ React86__default.createElement(Flex, { __css: styles3.container, ...boxProps }, /* @__PURE__ */ React86__default.createElement(
    VerySmallButton,
    {
      icon: /* @__PURE__ */ React86__default.createElement(SubtractIcon, { stepLabel: clampedStepSize }),
      "aria-label": t2(texts2.decrementButtonAriaLabel(clampedStepSize)),
      onClick: () => onChange(Math.max(value - clampedStepSize, minValue)),
      visibility: value <= minValue ? "hidden" : "visible",
      isDisabled: formControlProps.disabled,
      id: value <= minValue ? void 0 : formControlProps.id
    }
  ), withInput ? /* @__PURE__ */ React86__default.createElement(
    chakra.input,
    {
      type: "number",
      min: minValue,
      max: maxValue,
      name: nameProp,
      value,
      ...formControlProps,
      id: !showZero && value === 0 ? void 0 : formControlProps.id,
      sx: styles3.input,
      width: `${Math.max(value.toString().length + 1, 3)}ch`,
      visibility: !showZero && value === 0 ? "hidden" : "visible",
      "aria-live": "assertive",
      "aria-label": value.toString(),
      onChange: (e) => {
        const numericInput = Number(e.target.value);
        if (Number.isNaN(numericInput)) {
          return;
        }
        onChange(Math.max(Math.min(numericInput, maxValue), minValue));
      }
    }
  ) : /* @__PURE__ */ React86__default.createElement(
    chakra.text,
    {
      sx: styles3.text,
      visibility: !showZero && value === 0 ? "hidden" : "visible",
      "aria-label": value.toString()
    },
    value
  ), /* @__PURE__ */ React86__default.createElement(
    VerySmallButton,
    {
      icon: /* @__PURE__ */ React86__default.createElement(AddIcon, { stepLabel: clampedStepSize }),
      "aria-label": t2(texts2.incrementButtonAriaLabel(clampedStepSize)),
      onClick: () => onChange(Math.min(value + clampedStepSize, maxValue)),
      visibility: value >= maxValue ? "hidden" : "visible",
      isDisabled: formControlProps.disabled,
      id: value >= maxValue ? void 0 : formControlProps.id
    }
  ));
}
var VerySmallButton = (props) => {
  const styles3 = useMultiStyleConfig("NumericStepper", {});
  return /* @__PURE__ */ React86__default.createElement(IconButton, { variant: "primary", size: "xs", sx: styles3.button, ...props });
};
var SubtractIcon = (props) => /* @__PURE__ */ React86__default.createElement(React86__default.Fragment, null, /* @__PURE__ */ React86__default.createElement(
  Box,
  {
    as: "svg",
    viewBox: "0 0 30 30",
    width: "24",
    height: "24",
    stroke: "currentColor",
    ...props
  },
  /* @__PURE__ */ React86__default.createElement(
    "line",
    {
      x1: "9",
      y1: "15",
      x2: "21",
      y2: "15",
      strokeWidth: "1.5",
      strokeLinecap: "round"
    }
  )
), props.stepLabel > 1 && /* @__PURE__ */ React86__default.createElement(chakra.span, { paddingRight: "1" }, props.stepLabel.toString()));
var AddIcon = (props) => /* @__PURE__ */ React86__default.createElement(React86__default.Fragment, null, /* @__PURE__ */ React86__default.createElement(
  Box,
  {
    as: "svg",
    viewBox: "0 0 30 30",
    width: "24",
    height: "24",
    stroke: "currentColor",
    ...props
  },
  /* @__PURE__ */ React86__default.createElement(
    "line",
    {
      x1: "9",
      y1: "15",
      x2: "21",
      y2: "15",
      strokeWidth: "1.5",
      strokeLinecap: "round"
    }
  ),
  /* @__PURE__ */ React86__default.createElement(
    "line",
    {
      x1: "15",
      y1: "9",
      x2: "15",
      y2: "21",
      strokeWidth: "1.5",
      strokeLinecap: "round"
    }
  )
), props.stepLabel > 1 && /* @__PURE__ */ React86__default.createElement(chakra.span, { paddingRight: "1" }, props.stepLabel.toString()));
var texts2 = createTexts({
  decrementButtonAriaLabel(stepSize) {
    return {
      nb: `Trekk fra ${stepSize}`,
      en: `Subtract ${stepSize}`,
      nn: `Trekk fr\xE5 ${stepSize}`,
      sv: `Subtrahera ${stepSize}`
    };
  },
  incrementButtonAriaLabel(stepSize) {
    return {
      nb: `Legg til ${stepSize}`,
      en: `Add ${stepSize}`,
      nn: `Legg til ${stepSize}`,
      sv: `L\xE4gg till ${stepSize}`
    };
  }
});
var PasswordInput = forwardRef(
  ({ leftIcon, id, label, size: size2, ...props }, ref) => {
    const { isOpen: isShowingPassword, onToggle } = useDisclosure();
    const { t: t2 } = useTranslation();
    const formControlProps = useFormControlContext();
    const autoGeneratedId = `password-input-${useId()}`;
    const inputId = id ?? (formControlProps == null ? void 0 : formControlProps.id) ?? autoGeneratedId;
    return /* @__PURE__ */ React86__default.createElement(InputGroup, { position: "relative" }, leftIcon && /* @__PURE__ */ React86__default.createElement(InputLeftElement2, null, leftIcon), /* @__PURE__ */ React86__default.createElement(
      Input$1,
      {
        ...props,
        id: inputId,
        placeholder: " ",
        type: isShowingPassword ? "text" : "password",
        paddingRight: 10,
        paddingLeft: leftIcon ? 7 : void 0,
        ref,
        "data-attachable": true
      }
    ), /* @__PURE__ */ React86__default.createElement(FormLabel, { htmlFor: inputId, pointerEvents: "none" }, label), /* @__PURE__ */ React86__default.createElement(InputRightElement2, { width: "fit-content" }, /* @__PURE__ */ React86__default.createElement(
      Button,
      {
        variant: "ghost",
        type: "button",
        fontWeight: "normal",
        size: "sm",
        onClick: onToggle,
        borderRadius: "sm",
        marginRight: 1,
        isDisabled: props.disabled || props.isDisabled
      },
      isShowingPassword ? t2(texts3.hidePassword) : t2(texts3.showPassword)
    )));
  }
);
var texts3 = createTexts({
  showPassword: {
    nb: "Vis",
    nn: "Vis",
    en: "Show",
    sv: "Visa"
  },
  hidePassword: {
    nb: "Skjul",
    nn: "Skjul",
    en: "Hide",
    sv: "D\xF6lj"
  }
});
var PhoneNumberInput = forwardRef(
  ({
    label: externalLabel,
    name,
    value: externalValue,
    onChange: externalOnChange,
    ...boxProps
  }, ref) => {
    const { t: t2 } = useTranslation();
    const label = externalLabel ?? t2(texts4.phoneNumber);
    const [value, onChange] = useControllableState({
      value: externalValue,
      onChange: externalOnChange,
      defaultValue: {
        countryCode: "+47",
        nationalNumber: ""
      }
    });
    return /* @__PURE__ */ React86__default.createElement(AttachedInputs, { ...boxProps }, /* @__PURE__ */ React86__default.createElement(
      Suspense,
      {
        fallback: /* @__PURE__ */ React86__default.createElement(
          InfoSelect,
          {
            isLabelSrOnly: true,
            label: t2(texts4.countryCodeLabel),
            width: "6.25rem",
            height: "100%",
            value: "+47"
          },
          /* @__PURE__ */ React86__default.createElement(Item, { key: "+47" }, "+47")
        )
      },
      /* @__PURE__ */ React86__default.createElement(
        LazyCountryCodeSelect,
        {
          value: value.countryCode,
          onChange: (countryCode) => onChange({
            countryCode,
            nationalNumber: value.nationalNumber
          }),
          name: name ? `${name}-country-code` : "country-code",
          height: "100%",
          width: "6.25rem"
        }
      )
    ), /* @__PURE__ */ React86__default.createElement(
      Input,
      {
        ref,
        type: "tel",
        label,
        value: value.nationalNumber,
        name: name ? `${name}-phone-number` : "phone-number",
        onChange: (e) => {
          const strippedValue = e.target.value.replace(/[^\d\s-]/g, "");
          onChange({
            countryCode: value.countryCode,
            nationalNumber: strippedValue
          });
        },
        position: "relative",
        left: "1px"
      }
    ));
  }
);
var texts4 = createTexts({
  phoneNumber: {
    nb: "Telefonnummer",
    nn: "Telefonnummer",
    en: "Phone number",
    sv: "Telefonnummer"
  },
  countryCodeLabel: {
    nb: "Landskode",
    nn: "Landskode",
    en: "Country code",
    sv: "Landskod"
  }
});
var LazyCountryCodeSelect = React86__default.lazy(() => import('./CountryCodeSelect-2DASZ3PQ.mjs'));
var Radio = forwardRef((props, ref) => {
  return /* @__PURE__ */ React86__default.createElement(Radio$1, { ...props, ref });
});
var RadioGroup = forwardRef(
  ({ children, direction: direction2 = "row", ...rest }, ref) => {
    return /* @__PURE__ */ React86__default.createElement(RadioGroup$1, { ...rest, ref }, /* @__PURE__ */ React86__default.createElement(Stack$1, { direction: direction2 }, children));
  }
);
var SearchInput = forwardRef(
  ({ label, onReset, ...props }, ref) => {
    const { t: t2 } = useTranslation();
    const showClearButton = onReset && Boolean(props.value);
    const formControlProps = useFormControlContext();
    const autoGeneratedId = useId();
    const inputId = props.id ?? (formControlProps == null ? void 0 : formControlProps.id) ?? autoGeneratedId;
    return /* @__PURE__ */ React86__default.createElement(InputGroup, { position: "relative" }, /* @__PURE__ */ React86__default.createElement(InputLeftElement2, null, /* @__PURE__ */ React86__default.createElement(SearchOutline24Icon, null)), /* @__PURE__ */ React86__default.createElement(
      Input$1,
      {
        paddingLeft: 7,
        paddingRight: 7,
        ...props,
        id: inputId,
        type: "search",
        css: {
          "&::-webkit-search-cancel-button": {
            WebkitAppearance: "none"
          }
        },
        ref,
        placeholder: " ",
        "data-attachable": true
      }
    ), /* @__PURE__ */ React86__default.createElement(FormLabel, { htmlFor: inputId, pointerEvents: "none" }, label ?? t2(texts5.label)), showClearButton && /* @__PURE__ */ React86__default.createElement(InputRightElement2, { width: "fit-content" }, /* @__PURE__ */ React86__default.createElement(
      IconButton$1,
      {
        variant: "ghost",
        type: "button",
        size: "sm",
        marginRight: 1,
        "aria-label": t2(texts5.reset),
        icon: /* @__PURE__ */ React86__default.createElement(CloseOutline24Icon, null),
        onClick: onReset
      }
    )));
  }
);
var texts5 = createTexts({
  label: {
    nb: "S\xF8k",
    nn: "S\xF8k",
    sv: "S\xF6k",
    en: "Search"
  },
  reset: {
    nb: "T\xF8m s\xF8kefeltet",
    nn: "T\xF8m s\xF8kefelt",
    sv: "Rensa s\xF6krutan",
    en: "Reset search field"
  }
});
var Switch = forwardRef(
  ({ size: size2 = "md", ...props }, ref) => {
    return /* @__PURE__ */ React86__default.createElement(Switch$1, { size: size2, ...props, ref });
  }
);
var Textarea = forwardRef((props, ref) => {
  const {
    spacingProps,
    remainingProps: { label, ...rest }
  } = getSpacingProps(props);
  const formControlProps = useFormControlContext();
  const fallbackId = `textarea-${useId()}`;
  const inputId = props.id ?? (formControlProps == null ? void 0 : formControlProps.id) ?? fallbackId;
  return /* @__PURE__ */ React86__default.createElement(InputGroup, { position: "relative", ...spacingProps }, /* @__PURE__ */ React86__default.createElement(Textarea$1, { ...rest, id: inputId, ref, placeholder: " " }), label && /* @__PURE__ */ React86__default.createElement(FormLabel$1, { htmlFor: inputId, id: `${inputId}-label` }, label));
});
function getSpacingProps(props) {
  const {
    mt,
    mr,
    mb,
    ml,
    mx,
    my,
    marginTop,
    marginRight,
    marginBottom,
    marginLeft,
    marginX,
    marginY,
    pt,
    pr,
    pb,
    pl,
    px,
    py,
    paddingTop,
    paddingRight,
    paddingBottom,
    paddingLeft,
    paddingX,
    paddingY,
    ...remainingProps
  } = props;
  return {
    spacingProps: {
      mt,
      mr,
      mb,
      ml,
      mx,
      my,
      marginTop,
      marginRight,
      marginBottom,
      marginLeft,
      marginX,
      marginY,
      pt,
      pr,
      pb,
      pl,
      px,
      py,
      paddingTop,
      paddingRight,
      paddingBottom,
      paddingLeft,
      paddingX,
      paddingY
    },
    remainingProps
  };
}

// src/layout/RadioCardGroup.tsx
var RadioCardGroupContext = React86__default.createContext(null);
var RadioCardGroup = ({
  children,
  name,
  variant = "base",
  direction: direction2 = "row",
  groupLabel,
  defaultValue,
  onChange,
  ...props
}) => {
  const [selectedValue, setSelectedValue] = useState(
    defaultValue || ""
  );
  const handleChange = (value) => {
    setSelectedValue(value);
    onChange && onChange(value);
  };
  return /* @__PURE__ */ React86__default.createElement(
    RadioCardGroupContext.Provider,
    {
      value: {
        name,
        selectedValue,
        onChange: handleChange,
        variant,
        defaultValue: defaultValue || ""
      }
    },
    /* @__PURE__ */ React86__default.createElement(Stack$1, { as: "fieldset", direction: direction2, ...props }, groupLabel && /* @__PURE__ */ React86__default.createElement(FormLabel, { as: "legend", id: groupLabel }, groupLabel), children)
  );
};

// src/layout/RadioCard.tsx
var RadioCard = forwardRef(
  ({ children, value, isDisabled, ...props }, ref) => {
    const context = useContext(RadioCardGroupContext);
    if (!context) {
      throw new Error(
        "RadioCard components must be wrapped in a RadioCardGroup component"
      );
    }
    const { name, selectedValue, onChange, variant } = context;
    const styles3 = useMultiStyleConfig("RadioCard", { variant });
    const [isKeyboardUser, setKeyboardUser] = useState(false);
    const [isFocused, setFocus] = useState(false);
    const isChecked = selectedValue === value;
    useEffect(() => {
      const handleMouseDown = () => setKeyboardUser(false);
      const handleKeyDown = (event) => {
        if (event.key === " ") {
          setFocus(false);
        } else {
          setKeyboardUser(true);
        }
      };
      window.addEventListener("mousedown", handleMouseDown);
      window.addEventListener("keydown", handleKeyDown);
      return () => {
        window.removeEventListener("mousedown", handleMouseDown);
        window.removeEventListener("keydown", handleKeyDown);
      };
    }, []);
    useEffect(() => {
      if (isKeyboardUser && isChecked) {
        setFocus(true);
      } else {
        setFocus(false);
      }
    }, [isKeyboardUser, isChecked]);
    const inputId = `radio-card-${useId()}`;
    return /* @__PURE__ */ React86__default.createElement(
      Box,
      {
        onFocus: () => isKeyboardUser && setFocus(true),
        onBlur: () => setFocus(false)
      },
      /* @__PURE__ */ React86__default.createElement(
        chakra.input,
        {
          type: "radio",
          id: inputId,
          name,
          ref,
          checked: isChecked,
          onChange: () => onChange(value),
          disabled: isDisabled,
          __css: styles3.radioInput
        }
      ),
      /* @__PURE__ */ React86__default.createElement(
        Box,
        {
          as: "label",
          name,
          htmlFor: inputId,
          "aria-checked": isChecked,
          "data-checked": isChecked,
          "data-disabled": isDisabled,
          ...props,
          __css: {
            ...styles3.container,
            ...isChecked && styles3.checked,
            ...isFocused && !isChecked && styles3.focused,
            ...isChecked && isFocused && styles3.focusedChecked
          }
        },
        children
      )
    );
  }
);
var StaticCard = forwardRef(
  ({ colorScheme = "white", children, ...props }, ref) => {
    const styles3 = useStyleConfig("StaticCard", {
      colorScheme
    });
    return /* @__PURE__ */ React86__default.createElement(Box, { __css: styles3, ...props, ref }, children);
  }
);
var PressableCard = forwardRef(
  ({ children, variant = "floating", ...props }, ref) => {
    const styles3 = useStyleConfig("PressableCard", {
      variant
    });
    return /* @__PURE__ */ React86__default.createElement(Box, { __css: styles3, ...props, ref }, children);
  }
);
var AccordionContext = React86__default.createContext(null);
var AccordionProvider = ({
  size: size2,
  ...props
}) => {
  return /* @__PURE__ */ React86__default.createElement(AccordionContext.Provider, { value: { size: size2 }, ...props });
};
var useAccordionContext = () => {
  const context = React86__default.useContext(AccordionContext);
  if (context === null) {
    throw new Error(
      "useAccordionContext must be used within AccordionProvider"
    );
  }
  return context;
};
var Accordion = forwardRef(
  ({ children, spacing: spacing3 = 2, ...props }, ref) => {
    const defaultIndex = typeof props.defaultIndex === "number" && props.allowMultiple ? [props.defaultIndex] : props.defaultIndex;
    return /* @__PURE__ */ React86__default.createElement(AccordionProvider, { size: props.size }, /* @__PURE__ */ React86__default.createElement(
      Accordion$1,
      {
        ...props,
        ref,
        defaultIndex
      },
      /* @__PURE__ */ React86__default.createElement(Stack, { spacing: spacing3 }, children)
    ));
  }
);
var Expandable = ({
  children,
  headingLevel,
  title,
  leftIcon,
  size: size2 = "md",
  defaultOpen,
  isOpen,
  onChange = () => {
  },
  ...rest
}) => {
  return /* @__PURE__ */ React86__default.createElement(
    Accordion,
    {
      ...rest,
      index: isOpen ? 0 : void 0,
      defaultIndex: defaultOpen ? 0 : void 0,
      allowMultiple: true,
      size: size2,
      onChange: (expandedIndex) => onChange(expandedIndex === 0)
    },
    /* @__PURE__ */ React86__default.createElement(
      ExpandableItem,
      {
        headingLevel,
        title,
        leftIcon
      },
      children
    )
  );
};
var ExpandableItem = ({
  children,
  title,
  headingLevel = "h3",
  leftIcon,
  ...rest
}) => {
  const { size: size2 } = useAccordionContext();
  warnAboutMismatchingIcon({ icon: leftIcon, size: size2 });
  return /* @__PURE__ */ React86__default.createElement(AccordionItem, { ...rest }, /* @__PURE__ */ React86__default.createElement(Box, { as: headingLevel }, /* @__PURE__ */ React86__default.createElement(AccordionButton, null, /* @__PURE__ */ React86__default.createElement(Flex, { alignItems: "center" }, leftIcon && /* @__PURE__ */ React86__default.createElement(Box, { marginRight: 1 }, leftIcon), title), /* @__PURE__ */ React86__default.createElement(AccordionIcon, null))), /* @__PURE__ */ React86__default.createElement(AccordionPanel, null, children));
};
var warnAboutMismatchingIcon = ({ icon, size: size2 }) => {
  var _a6, _b5;
  if (process.env.NODE_ENV !== "production") {
    const displayName = (_b5 = (_a6 = icon == null ? void 0 : icon.type) == null ? void 0 : _a6.render) == null ? void 0 : _b5.displayName;
    if (!displayName) {
      return;
    }
    if (displayName.includes("Fill")) {
      console.warn(
        `You passed a filled icon. This component requires outlined icons. You passed ${displayName}, replace it with ${displayName.replace(
          "Fill",
          "Outline"
        )}.`
      );
      return;
    }
    if (size2 === "lg" && !displayName.includes("30Icon")) {
      console.warn(
        `The icon you passed was of the wrong size for the lg size. You passed ${displayName}, replace it with ${displayName.replace(
          /(\d{2})Icon/,
          "30Icon"
        )}.`
      );
      return;
    }
    if (["md"].includes(size2) && !displayName.includes("24Icon")) {
      console.warn(
        `The icon you passed was of the wrong size for the ${size2} size. You passed ${displayName}, replace it with ${displayName.replace(
          /(\d{2})Icon/,
          "24Icon"
        )}.`
      );
    }
  }
};
var Language = /* @__PURE__ */ ((Language3) => {
  Language3["NorwegianBokmal"] = "nb";
  Language3["NorwegianNynorsk"] = "nn";
  Language3["Swedish"] = "sv";
  Language3["English"] = "en";
  return Language3;
})(Language || {});
var LanguageContext = createContext(void 0);
function LanguageProvider({
  language,
  children
}) {
  return /* @__PURE__ */ React86__default.createElement(LanguageContext.Provider, { value: language }, children);
}
function useLanguage() {
  const language = useContext(LanguageContext);
  if (!language) {
    throw new Error("Please wrap your application in a LanguageProvider");
  }
  return language;
}
function useTranslation() {
  const language = useLanguage();
  const t2 = (text) => {
    return text[language];
  };
  return { t: t2, language };
}
function createTexts(texts28) {
  return texts28;
}
var hydrating = true;
function useHydrated() {
  let [hydrated, setHydrated] = useState(() => !hydrating);
  useEffect(function hydrate() {
    hydrating = false;
    setHydrated(true);
  }, []);
  return hydrated;
}

// src/loader/ClientOnly.tsx
var ClientOnly = ({ children, fallback = null }) => {
  const isHydrated = useHydrated();
  return /* @__PURE__ */ React86__default.createElement(React86__default.Fragment, null, isHydrated ? children() : fallback);
};
function Lottie({ animationData }) {
  const { View } = useLottie({ animationData, loop: true });
  return /* @__PURE__ */ React86__default.createElement(React86__default.Fragment, null, View);
}

// src/loader/ColorInlineLoader.tsx
var ColorInlineLoader = ({
  width,
  maxWidth,
  ...props
}) => {
  return /* @__PURE__ */ React86__default.createElement(Center, { ...props }, /* @__PURE__ */ React86__default.createElement(Box, { width, maxWidth }, /* @__PURE__ */ React86__default.createElement(ClientOnly, null, () => /* @__PURE__ */ React86__default.createElement(Lottie, { animationData: inlineLoaderColorData }))));
};
var ColorSpinner = ({
  children,
  width,
  maxWidth,
  ...props
}) => {
  return /* @__PURE__ */ React86__default.createElement(Center, { flexDirection: "column", ...props }, /* @__PURE__ */ React86__default.createElement(Box, { width, maxWidth }, /* @__PURE__ */ React86__default.createElement(ClientOnly, null, () => /* @__PURE__ */ React86__default.createElement(Lottie, { animationData: spinnerColorData }))), children && /* @__PURE__ */ React86__default.createElement(Box, { marginTop: 3, fontWeight: "bold" }, children));
};
var ContentLoader = ({ children, ...props }) => {
  return /* @__PURE__ */ React86__default.createElement(Box, { ...props }, /* @__PURE__ */ React86__default.createElement(Box, { maxWidth: "140px", marginX: "auto" }, /* @__PURE__ */ React86__default.createElement(ClientOnly, null, () => /* @__PURE__ */ React86__default.createElement(Lottie, { animationData: contentLoaderData }))), children && /* @__PURE__ */ React86__default.createElement(Box, { textAlign: "center", fontWeight: "bold" }, children));
};
var DarkFullScreenLoader = ({
  width,
  maxWidth,
  ...props
}) => {
  return /* @__PURE__ */ React86__default.createElement(Center, { height: "100%", background: "darkTeal", ...props }, /* @__PURE__ */ React86__default.createElement(Box, { width, maxWidth }, /* @__PURE__ */ React86__default.createElement(ClientOnly, null, () => /* @__PURE__ */ React86__default.createElement(Lottie, { animationData: fullScreenLoaderWhiteData }))));
};
var DarkInlineLoader = ({
  width,
  maxWidth,
  ...props
}) => {
  return /* @__PURE__ */ React86__default.createElement(Center, { ...props }, /* @__PURE__ */ React86__default.createElement(Box, { width, maxWidth }, /* @__PURE__ */ React86__default.createElement(ClientOnly, null, () => /* @__PURE__ */ React86__default.createElement(Lottie, { animationData: inlineLoaderDarkData }))));
};
var DarkSpinner = ({
  children,
  width,
  maxWidth,
  ...props
}) => {
  const { colorMode } = useColorMode();
  const spinnerData = colorMode === "dark" ? spinnerLightData : spinnerDarkData;
  return /* @__PURE__ */ React86__default.createElement(Center, { flexDirection: "column", ...props }, /* @__PURE__ */ React86__default.createElement(Box, { width, maxWidth }, /* @__PURE__ */ React86__default.createElement(ClientOnly, null, () => /* @__PURE__ */ React86__default.createElement(Lottie, { animationData: spinnerData }))), children && /* @__PURE__ */ React86__default.createElement(Box, { marginTop: 3, fontWeight: "bold" }, children));
};
var LightFullScreenLoader = ({
  width,
  maxWidth,
  ...props
}) => {
  return /* @__PURE__ */ React86__default.createElement(Center, { height: "100%", background: "white", ...props }, /* @__PURE__ */ React86__default.createElement(Box, { width, maxWidth }, /* @__PURE__ */ React86__default.createElement(ClientOnly, null, () => /* @__PURE__ */ React86__default.createElement(Lottie, { animationData: fullScreenLoaderBlackData }))));
};
var LightInlineLoader = ({
  width,
  maxWidth,
  ...props
}) => {
  return /* @__PURE__ */ React86__default.createElement(Center, { ...props }, /* @__PURE__ */ React86__default.createElement(Box, { width, maxWidth }, /* @__PURE__ */ React86__default.createElement(ClientOnly, null, () => /* @__PURE__ */ React86__default.createElement(Lottie, { animationData: inlineLoaderLightData }))));
};
var LightSpinner = ({
  children,
  width,
  maxWidth,
  ...props
}) => {
  return /* @__PURE__ */ React86__default.createElement(Center, { flexDirection: "column", ...props }, /* @__PURE__ */ React86__default.createElement(Box, { width, maxWidth }, /* @__PURE__ */ React86__default.createElement(ClientOnly, null, () => /* @__PURE__ */ React86__default.createElement(Lottie, { animationData: spinnerLightData }))), children && /* @__PURE__ */ React86__default.createElement(Box, { marginTop: 3, fontWeight: "bold" }, children));
};
var useRotatingLabel = ({ label, delay }) => {
  const loadingTextArray = useMemo(
    () => Array.isArray(label) ? label : [label],
    [label]
  );
  const [currentLoadingTextIndex, setCurrentLoadingTextIndex] = useState(0);
  useInterval(() => {
    setCurrentLoadingTextIndex(
      (prevIndex) => (prevIndex + 1) % loadingTextArray.length
    );
  }, delay);
  return loadingTextArray[currentLoadingTextIndex];
};

// src/loader/ProgressBar.tsx
var ProgressBar = ({
  value,
  label,
  labelRotationDelay = 5e3,
  height = "0.5rem",
  width = "100%",
  "aria-label": ariaLabel,
  ...rest
}) => {
  const { t: t2 } = useTranslation();
  const currentLoadingText = useRotatingLabel({
    label,
    delay: labelRotationDelay
  });
  const { labelProps, progressBarProps } = useProgressBar({
    isIndeterminate: value === void 0,
    value,
    "aria-label": ariaLabel || t2(texts6.label(value))
  });
  const styles3 = useMultiStyleConfig("ProgressBar", {});
  return /* @__PURE__ */ React86__default.createElement(React86__default.Fragment, null, /* @__PURE__ */ React86__default.createElement(
    Box,
    {
      ...progressBarProps,
      title: t2(texts6.label(value)),
      __css: styles3.container,
      ...rest
    },
    /* @__PURE__ */ React86__default.createElement(Box, { width, __css: styles3.background }, /* @__PURE__ */ React86__default.createElement(Box, { __css: styles3.progress, height, width: `${value}%` })),
    currentLoadingText && /* @__PURE__ */ React86__default.createElement(Text, { sx: styles3.description, ...labelProps }, currentLoadingText)
  ));
};
var texts6 = createTexts({
  label: (value) => ({
    nb: `${value}% ferdig`,
    nn: `${value}% ferdig`,
    sv: `${value}% klart`,
    en: `${value}% done`
  })
});
var ProgressLoader = ({
  value,
  label,
  labelRotationDelay = 5e3,
  "aria-label": ariaLabel,
  width,
  ...rest
}) => {
  var _a6;
  const { t: t2 } = useTranslation();
  const currentLoadingText = useRotatingLabel({
    label,
    delay: labelRotationDelay
  });
  const { labelProps, progressBarProps } = useProgressBar({
    isIndeterminate: value === void 0,
    value,
    "aria-label": ariaLabel ?? t2(texts7.fallbackLabel(value ?? "?"))
  });
  const pathRef = useRef(null);
  const progressPathLength = ((_a6 = pathRef.current) == null ? void 0 : _a6.getTotalLength()) ?? 0;
  const progress = (value - 100) / 100 * progressPathLength;
  const id = useId();
  return /* @__PURE__ */ React86__default.createElement(Box, { ...progressBarProps, minWidth: "100px", width, ...rest }, /* @__PURE__ */ React86__default.createElement(Box, { as: "svg", viewBox: "0 0 246 78", fill: "none" }, /* @__PURE__ */ React86__default.createElement(
    Box,
    {
      as: "path",
      id: `${id}-start-dot`,
      d: "M14.0479 44.8251C19.4332 44.8251 23.7988 40.5242 23.7988 35.2187C23.7988 29.9133 19.4332 25.6124 14.0479 25.6124C8.66254 25.6124 4.29688 29.9133 4.29688 35.2187C4.29688 40.5242 8.66254 44.8251 14.0479 44.8251Z",
      fill: "#FFB466"
    }
  ), /* @__PURE__ */ React86__default.createElement(
    Box,
    {
      as: "path",
      id: `${id}-track`,
      d: "M204.911 39.1156C204.911 39.1156 175.012 46.8319 157.651 30.4354C140.29 14.0388 121 21.7547 110.391 47.6529C103.22 65.157 78.9634 67.0859 67.9533 47.6529C59.8376 33.3287 36.125 37.1866 36.125 37.1866",
      stroke: "coralGreen",
      strokeWidth: "13.6469",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }
  ), /* @__PURE__ */ React86__default.createElement(
    Box,
    {
      as: "path",
      id: `${id}-progress`,
      d: "M204.911 39.1156C204.911 39.1156 175.012 46.8319 157.651 30.4354C140.29 14.0388 121 21.7547 110.391 47.6529C103.22 65.157 78.9634 67.0859 67.9533 47.6529C59.8376 33.3287 36.125 37.1866 36.125 37.1866",
      stroke: "greenHaze",
      strokeWidth: "13.6469",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeDasharray: progressPathLength,
      strokeDashoffset: progress,
      transition: "stroke-dashoffset .2s ease-out",
      ref: pathRef
    }
  ), /* @__PURE__ */ React86__default.createElement(
    Box,
    {
      as: "path",
      id: `${id}-end-dot`,
      d: "M226.025 44.8251C231.411 44.8251 235.776 40.5242 235.776 35.2187C235.776 29.9133 231.411 25.6124 226.025 25.6124C220.64 25.6124 216.274 29.9133 216.274 35.2187C216.274 40.5242 220.64 44.8251 226.025 44.8251Z",
      fill: "#688CBA"
    }
  )), currentLoadingText && /* @__PURE__ */ React86__default.createElement(
    Text,
    {
      textAlign: "center",
      marginTop: 2,
      fontWeight: "bold",
      ...labelProps
    },
    currentLoadingText
  ));
};
var texts7 = createTexts({
  fallbackLabel: (value) => ({
    nb: `${value}% ferdig`,
    nn: `${value}% ferdig`,
    sv: `${value}% klart`,
    en: `${value}% done`
  })
});
var Skeleton = forwardRef((props, ref) => /* @__PURE__ */ React86__default.createElement(Skeleton$1, { ...props, ref }));
var SkeletonCircle = (props) => /* @__PURE__ */ React86__default.createElement(SkeletonCircle$1, { boxSize: 6, borderRadius: "50%", ...props });
var SkeletonText = (props) => /* @__PURE__ */ React86__default.createElement(SkeletonText$1, { boxSize: 6, ...props });

// src/button/Button.tsx
var Button2 = forwardRef((props, ref) => {
  const {
    as = "button",
    type = "button",
    fontWeight,
    size: size2,
    children,
    isLoading,
    isDisabled,
    leftIcon,
    rightIcon,
    sx,
    ...rest
  } = props;
  const ariaLabel = useCorrectAriaLabel(props);
  const buttonGroup = useButtonGroup();
  const finalSize = size2 ?? (buttonGroup == null ? void 0 : buttonGroup.size) ?? "md";
  const styles3 = useStyleConfig("Button", {
    ...buttonGroup,
    ...rest,
    size: finalSize,
    leftIcon,
    rightIcon
  });
  if (fontWeight) {
    styles3.fontWeight = fontWeight;
  }
  return /* @__PURE__ */ React86__default.createElement(
    Box,
    {
      ...rest,
      as,
      type,
      sx: { ...styles3, ...sx },
      ref,
      "aria-label": ariaLabel,
      "aria-busy": isLoading,
      disabled: isDisabled || isLoading,
      position: "relative",
      fontFamily: "Vy Sans"
    },
    isLoading && /* @__PURE__ */ React86__default.createElement(Center, { position: "absolute", right: 0, left: 0, top: 1, bottom: 0 }, /* @__PURE__ */ React86__default.createElement(
      ColorInlineLoader,
      {
        maxWidth: getLoaderWidth(finalSize),
        width: "80%",
        marginX: 2,
        marginY: 2
      }
    )),
    /* @__PURE__ */ React86__default.createElement(
      Flex,
      {
        gap: 1,
        flex: 1,
        alignItems: "center",
        justifyContent: rightIcon ? "space-between" : "center",
        visibility: isLoading ? "hidden" : "visible",
        "aria-hidden": isLoading
      },
      /* @__PURE__ */ React86__default.createElement(Flex, { gap: 1, alignItems: "center" }, leftIcon, /* @__PURE__ */ React86__default.createElement(
        Box,
        {
          visibility: isLoading ? "hidden" : "visible",
          whiteSpace: "normal",
          textAlign: "center"
        },
        children
      )),
      rightIcon
    )
  );
});
function getLoaderWidth(size2) {
  switch (size2) {
    case "xs":
      return "4rem";
    case "sm":
      return "4rem";
    case "md":
      return "5rem";
    case "lg":
    default:
      return "6rem";
  }
}
function useCorrectAriaLabel(props) {
  const { t: t2 } = useTranslation();
  if (props.isLoading) {
    return String(props.loadingText) ?? t2(texts8.loadingText);
  }
  return props["aria-label"];
}
var texts8 = createTexts({
  loadingText: {
    nb: "Laster\u2026",
    nn: "Lastar\u2026",
    en: "Loading\u2026",
    sv: "Laddar\u2026"
  }
});
var ButtonGroup = forwardRef((props, ref) => /* @__PURE__ */ React86__default.createElement(ButtonGroup$1, { ...props, ref }));
var IconButton = forwardRef(
  ({ ...props }, ref) => /* @__PURE__ */ React86__default.createElement(
    IconButton$1,
    {
      title: props["aria-label"],
      ...props,
      spinner: /* @__PURE__ */ React86__default.createElement(ColorSpinner, { width: "80%", height: "80%", marginX: 1, marginTop: 1 }),
      ref
    }
  )
);

// src/button/CloseButton.tsx
var CloseButton = forwardRef(
  ({ size: size2 = "sm", ...props }, ref) => {
    const { t: t2 } = useTranslation();
    return /* @__PURE__ */ React86__default.createElement(
      IconButton,
      {
        ref,
        variant: "ghost",
        icon: getIcon(size2),
        size: size2,
        "aria-label": props["aria-label"] || t2(texts9.close),
        ...props
      }
    );
  }
);
var getIcon = (size2) => {
  switch (size2) {
    case "xs":
    case "sm":
      return /* @__PURE__ */ React86__default.createElement(CloseFill18Icon, null);
    case "md":
      return /* @__PURE__ */ React86__default.createElement(CloseFill24Icon, null);
    case "lg":
      return /* @__PURE__ */ React86__default.createElement(CloseFill30Icon, null);
  }
};
var texts9 = createTexts({
  close: {
    en: "Close",
    nb: "Lukk",
    nn: "Lukk",
    sv: "St\xE4ng"
  }
});
var MotionBox = motion(Box);
var FloatingActionButton = forwardRef(
  ({
    as,
    children,
    icon,
    variant,
    isTextVisible: externalIsTextVisible,
    placement = "bottom right",
    ...props
  }, ref) => {
    const [isTextVisible, setIsTextVisible] = React86__default.useState(
      externalIsTextVisible !== void 0 ? externalIsTextVisible : false
    );
    const scrollDirection = useScrollDirection();
    useEffect(() => {
      if (externalIsTextVisible !== void 0) {
        return;
      }
      const id = window.setTimeout(
        () => setIsTextVisible(scrollDirection !== "down"),
        1e3
      );
      return () => window.clearTimeout(id);
    }, [scrollDirection, externalIsTextVisible]);
    useEffect(() => {
      setIsTextVisible(!!externalIsTextVisible);
    }, [externalIsTextVisible]);
    const style = useMultiStyleConfig("FloatingActionButton", {
      variant,
      isTextVisible,
      placement
    });
    return /* @__PURE__ */ React86__default.createElement(
      MotionBox,
      {
        __css: style.container,
        "aria-label": children,
        ref,
        ...props
      },
      /* @__PURE__ */ React86__default.createElement(Box, { __css: style.icon }, icon),
      /* @__PURE__ */ React86__default.createElement(
        MotionBox,
        {
          animate: isTextVisible ? "show" : "hide",
          initial: externalIsTextVisible ? "show" : "hide",
          variants: {
            show: {
              opacity: 1,
              width: "auto",
              visibility: "visible"
            },
            hide: {
              opacity: 0,
              width: 0,
              visibility: "hidden"
            }
          },
          __css: style.text
        },
        children
      )
    );
  }
);
var useScrollDirection = () => {
  const [scrollDirection, setScrollDirection] = React86__default.useState(null);
  const lastScrollPosition = React86__default.useRef(
    typeof window !== "undefined" ? window.scrollY : 0
  );
  React86__default.useEffect(() => {
    const onScroll = () => {
      const delta = window.scrollY - lastScrollPosition.current;
      if (delta === 0) {
        return;
      }
      lastScrollPosition.current = window.scrollY;
      setScrollDirection(delta > 0 ? "down" : "up");
    };
    window.addEventListener("scroll", onScroll);
    return () => {
      window.removeEventListener("scroll", onScroll);
    };
  }, [scrollDirection]);
  return scrollDirection;
};
var AlertIcon = ({ variant }) => {
  const Icon = getIcon2(variant);
  const { t: t2 } = useTranslation();
  return /* @__PURE__ */ React86__default.createElement(
    Icon,
    {
      flexShrink: 0,
      "aria-label": t2(texts10[variant]),
      marginRight: 1,
      color: "darkGrey"
    }
  );
};
var getIcon2 = (variant) => {
  switch (variant) {
    case "info":
      return InformationOutline24Icon;
    case "success":
      return SuccessOutline24Icon;
    case "warning":
      return WarningOutline24Icon;
    case "alt-transport":
      return AltTransportOutline24Icon;
    case "error":
      return ErrorOutline24Icon;
  }
};
var texts10 = createTexts({
  info: {
    nb: "Informasjon",
    nn: "Informasjon",
    sv: "Information",
    en: "Information"
  },
  success: {
    nb: "Suksess",
    nn: "Suksess",
    sv: "Succ\xE9",
    en: "Success"
  },
  warning: {
    nb: "Advarsel",
    nn: "Advarsel",
    sv: "Varning",
    en: "Warning"
  },
  error: {
    nb: "Feil",
    nn: "Feil",
    sv: "Error",
    en: "Error"
  },
  "alt-transport": {
    nb: "Alternativ transport",
    nn: "Alternativ transport",
    sv: "Alternativ transport",
    en: "Alternative transport"
  }
});
var BaseAlert = ({
  variant,
  children,
  ...boxProps
}) => {
  const styles3 = useMultiStyleConfig("Alert", { variant });
  return /* @__PURE__ */ React86__default.createElement(Box, { __css: styles3.container, ...boxProps }, children);
};

// src/alert/ClosableAlert.tsx
var ClosableAlert = ({
  variant,
  title,
  children,
  onClose: externalOnClose = () => {
  }
}) => {
  const { isOpen, onClose } = useDisclosure({ defaultIsOpen: true });
  const styles3 = useMultiStyleConfig("Alert", { variant });
  const { t: t2 } = useTranslation();
  if (!isOpen) {
    return null;
  }
  const handleClose = () => {
    externalOnClose();
    onClose();
  };
  return /* @__PURE__ */ React86__default.createElement(BaseAlert, { variant }, /* @__PURE__ */ React86__default.createElement(
    IconButton,
    {
      variant: "ghost",
      size: "sm",
      onClick: handleClose,
      icon: /* @__PURE__ */ React86__default.createElement(CloseFill18Icon, null),
      "aria-label": t2(texts11.close),
      sx: styles3.closeButton
    }
  ), /* @__PURE__ */ React86__default.createElement(AlertIcon, { variant }), /* @__PURE__ */ React86__default.createElement(Flex, { direction: "column", gap: title ? 2 : void 0, textAlign: "left" }, title && /* @__PURE__ */ React86__default.createElement(Box, { fontWeight: "bold" }, title), /* @__PURE__ */ React86__default.createElement(Box, { marginRight: 1 }, children)));
};
var texts11 = createTexts({
  close: {
    nb: "Lukk",
    nn: "Lukk",
    sv: "D\xF6lj",
    en: "Close"
  }
});
var ExpandableAlert = ({
  variant,
  children,
  title,
  headingLevel = "h3",
  defaultOpen = false,
  onToggle = () => {
  },
  ...boxProps
}) => {
  const styles3 = useMultiStyleConfig("AlertExpandable", { variant });
  return /* @__PURE__ */ React86__default.createElement(BaseAlert, { variant, ...boxProps, paddingX: 0, paddingY: 0 }, /* @__PURE__ */ React86__default.createElement(
    Accordion$1,
    {
      onChange: (expandedIndex) => onToggle(expandedIndex === 0),
      defaultIndex: defaultOpen ? 0 : -1,
      allowToggle: true,
      flexGrow: "1"
    },
    /* @__PURE__ */ React86__default.createElement(AccordionItem, null, /* @__PURE__ */ React86__default.createElement(AccordionButton, { sx: styles3.container }, /* @__PURE__ */ React86__default.createElement(
      Flex,
      {
        justifyContent: "space-between",
        alignItems: "center",
        flexGrow: "1"
      },
      /* @__PURE__ */ React86__default.createElement(Flex, { as: headingLevel, alignItems: "center" }, /* @__PURE__ */ React86__default.createElement(AlertIcon, { variant }), /* @__PURE__ */ React86__default.createElement(
        Box,
        {
          as: "span",
          sx: {
            // Truncate the title to one line
            display: "-webkit-box",
            overflow: "hidden",
            "-webkit-line-clamp": "1",
            "-webkit-box-orient": "vertical"
          },
          color: "darkGrey"
        },
        title
      )),
      /* @__PURE__ */ React86__default.createElement(AccordionIcon, { color: "darkGrey" })
    )), /* @__PURE__ */ React86__default.createElement(AccordionPanel, null, children))
  ));
};
var StaticAlert = ({
  children,
  title,
  ...props
}) => {
  return /* @__PURE__ */ React86__default.createElement(BaseAlert, { ...props }, /* @__PURE__ */ React86__default.createElement(AlertIcon, { variant: props.variant }), /* @__PURE__ */ React86__default.createElement(Flex, { direction: "column", gap: title ? 2 : void 0, textAlign: "left" }, title && /* @__PURE__ */ React86__default.createElement(Box, { fontWeight: "bold" }, title), /* @__PURE__ */ React86__default.createElement(Box, null, children)));
};
var Breadcrumb = (props) => {
  const iconColor = useColorModeValue("blackAlpha.400", "whiteAlpha.400");
  return /* @__PURE__ */ React86__default.createElement(
    Breadcrumb$1,
    {
      separator: /* @__PURE__ */ React86__default.createElement(DropdownRightFill18Icon, { color: iconColor }),
      ...props
    }
  );
};
var BreadcrumbItem = BreadcrumbItem$1;
var BreadcrumbLink = BreadcrumbLink$1;
var Card2 = forwardRef(
  ({ size: size2 = "sm", colorScheme = "white", children, ...props }, ref) => {
    console.warn(
      "Warning: Card is deprecated. Use `StaticCard` or `PressableCard` instead."
    );
    const styles3 = useStyleConfig("Card", {
      colorScheme,
      size: size2
    });
    return /* @__PURE__ */ React86__default.createElement(Box, { __css: styles3, ...props, ref }, children);
  }
);
var Badge = forwardRef(
  ({ icon, colorScheme = "grey", children, ...props }, ref) => {
    return /* @__PURE__ */ React86__default.createElement(
      Badge$1,
      {
        colorScheme,
        ...props,
        paddingLeft: icon ? 1 : void 0,
        ref
      },
      icon && React86__default.cloneElement(icon, { marginRight: 1 }),
      children
    );
  }
);
var Code = forwardRef((props, ref) => /* @__PURE__ */ React86__default.createElement(Code$1, { ...props, ref }));
var Heading2 = ({
  as,
  variant = "xl-display",
  autoId = false,
  id: externalId,
  ...props
}) => {
  const id = externalId ?? (autoId && typeof props.children === "string") ? slugify(props.children) : void 0;
  const color2 = useColorModeValue("text.primary.light", "text.primary.dark");
  return /* @__PURE__ */ React86__default.createElement(Text, { as, textStyle: variant, id, color: color2, ...props });
};
var Text4 = forwardRef(
  ({ variant = "sm", ...props }, ref) => {
    return /* @__PURE__ */ React86__default.createElement(Text, { ...props, textStyle: variant, ref });
  }
);
function CalendarCell({
  state: state2,
  date,
  currentMonth,
  variant
}) {
  const ref = useRef(null);
  const {
    cellProps,
    buttonProps,
    isSelected,
    isDisabled,
    isUnavailable,
    isOutsideVisibleRange
  } = useCalendarCell({ date }, state2, ref);
  const isOutsideMonth = !isSameMonth(currentMonth, date);
  const styles3 = useMultiStyleConfig("Datepicker", { variant });
  const stateProps = {};
  if (isSelected) {
    stateProps["data-selected"] = true;
  }
  if (isDisabled || isUnavailable) {
    stateProps["data-disabled"] = true;
  }
  if (isToday(date, "Europe/Oslo")) {
    stateProps["data-today"] = true;
  }
  if (isOutsideMonth) {
    stateProps["data-unavailable"] = true;
  }
  useEffect(() => {
    var _a6;
    (_a6 = ref == null ? void 0 : ref.current) == null ? void 0 : _a6.addEventListener(
      "touchend",
      (event) => {
        event.preventDefault();
      },
      { passive: false, once: true }
    );
  }, []);
  return /* @__PURE__ */ React86__default.createElement(Box, { as: "td", ...cellProps, textAlign: "center", sx: styles3.cell }, /* @__PURE__ */ React86__default.createElement(
    Box,
    {
      as: "button",
      type: "button",
      ...buttonProps,
      ...stateProps,
      ref,
      sx: styles3.dateCell,
      hidden: isOutsideVisibleRange,
      width: "100%"
    },
    date.day
  ));
}
var useCurrentLocale = () => {
  const { language } = useTranslation();
  switch (language) {
    case "nb":
      return "nb-NO";
    case "nn":
      return "nb-NO";
    case "sv":
      return "sv-SE";
    case "en":
      return "en-GB";
    default:
      return "nb-NO";
  }
};
var getCurrentTime = () => {
  const now = /* @__PURE__ */ new Date();
  return parseTime(now.toTimeString().split(" ")[0]);
};
var getTimestampFromTime = (time) => {
  return `${(time == null ? void 0 : time.hour) ?? 0}:${(time == null ? void 0 : time.minute) ?? 0}`;
};
var weekDays = {
  nb: ["Ma", "Ti", "On", "To", "Fr", "L\xF8", "S\xF8"],
  nn: ["Ma", "Ti", "On", "To", "Fr", "L\xF8", "S\xF8"],
  sv: ["M\xE5", "Ti", "On", "To", "Fr", "L\xF6", "S\xF6"],
  en: ["Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"]
};
function CalendarGrid({
  state: state2,
  variant,
  offset = {}
}) {
  const { language } = useTranslation();
  const locale = useCurrentLocale();
  const startDate = state2.visibleRange.start.add(offset);
  const endDate = endOfMonth(startDate);
  const { gridProps, headerProps } = useCalendarGrid(
    {
      startDate,
      endDate
    },
    state2
  );
  const weeksInMonth = getWeeksInMonth(state2.visibleRange.start, locale);
  const weeksInMonthRange = new Array(weeksInMonth).fill(0).map((_, i) => i);
  const styles3 = useMultiStyleConfig("Datepicker", { variant });
  return /* @__PURE__ */ React86__default.createElement("table", { ...gridProps }, /* @__PURE__ */ React86__default.createElement("thead", { ...headerProps }, /* @__PURE__ */ React86__default.createElement("tr", null, weekDays[language].map((day, index) => {
    return /* @__PURE__ */ React86__default.createElement(
      Text4,
      {
        as: "th",
        key: index,
        sx: index < 5 ? styles3.weekdays : styles3.weekend,
        variant: "sm"
      },
      day
    );
  }))), /* @__PURE__ */ React86__default.createElement("tbody", null, weeksInMonthRange.map((weekIndex) => /* @__PURE__ */ React86__default.createElement("tr", { key: weekIndex }, state2.getDatesInWeek(weekIndex, startDate).map(
    (date, dayIndex) => date ? /* @__PURE__ */ React86__default.createElement(
      CalendarCell,
      {
        variant,
        key: dayIndex,
        state: state2,
        date,
        currentMonth: startDate
      }
    ) : /* @__PURE__ */ React86__default.createElement("td", { key: dayIndex })
  )))));
}
function CalendarNavigationButton({
  icon,
  "aria-label": ariaLabel,
  ...rest
}) {
  const ref = useRef(null);
  const { buttonProps } = useButton(rest, ref);
  return /* @__PURE__ */ React86__default.createElement(
    IconButton,
    {
      ...buttonProps,
      ref,
      icon,
      "aria-label": ariaLabel,
      size: "sm",
      variant: "ghost"
    }
  );
}

// src/datepicker/CalendarHeader.tsx
function CalendarHeader({
  state: state2,
  showYearNavigation = false,
  title
}) {
  const locale = useCurrentLocale();
  const monthFormatter = Intl.DateTimeFormat(locale, {
    month: "long"
  });
  const jsDate = state2.focusedDate.toDate(getLocalTimeZone());
  const monthTitle = monthFormatter.format(jsDate);
  const monthAndYearTitle = `${monthTitle} ${state2.focusedDate.year}`;
  const isPreviousYearDisabled = state2.isInvalid(
    state2.visibleRange.start.subtract({ years: 1 })
  );
  const isNextYearDisabled = state2.isInvalid(
    state2.visibleRange.start.add({ years: 1 })
  );
  const areAllOtherYearsDisabled = isPreviousYearDisabled && isNextYearDisabled;
  const isYearPickerVisible = showYearNavigation && !areAllOtherYearsDisabled;
  return /* @__PURE__ */ React86__default.createElement(Flex, { alignItems: "center", paddingBottom: "4", justifyContent: "space-between" }, /* @__PURE__ */ React86__default.createElement(
    CalendarNavigator,
    {
      title: title ? title : isYearPickerVisible ? monthTitle : monthAndYearTitle,
      unit: "month",
      onPrevious: () => state2.setFocusedDate(state2.focusedDate.subtract({ months: 1 })),
      onNext: () => state2.setFocusedDate(state2.focusedDate.add({ months: 1 })),
      isNextDisabled: !state2.isPreviousVisibleRangeInvalid,
      isPreviousDisabled: !state2.isNextVisibleRangeInvalid
    }
  ), isYearPickerVisible && /* @__PURE__ */ React86__default.createElement(
    CalendarNavigator,
    {
      title: jsDate.getFullYear().toString(),
      unit: "year",
      onPrevious: () => state2.setFocusedDate(state2.focusedDate.subtract({ years: 1 })),
      onNext: () => state2.setFocusedDate(state2.focusedDate.add({ years: 1 })),
      isPreviousDisabled: isPreviousYearDisabled,
      isNextDisabled: isNextYearDisabled
    }
  ));
}
var capitalize = (str = "") => str.charAt(0).toUpperCase() + str.slice(1);
var CalendarNavigator = ({
  title,
  unit,
  onPrevious,
  isPreviousDisabled,
  onNext,
  isNextDisabled
}) => {
  const { t: t2 } = useTranslation();
  return /* @__PURE__ */ React86__default.createElement(Flex, { alignItems: "center", flexGrow: 1 }, /* @__PURE__ */ React86__default.createElement(
    CalendarNavigationButton,
    {
      onPress: onPrevious,
      isDisabled: isPreviousDisabled,
      icon: /* @__PURE__ */ React86__default.createElement(ArrowLeftOutline24Icon, null),
      "aria-label": `${t2(texts12.previous)} ${t2(texts12[unit])}`
    }
  ), /* @__PURE__ */ React86__default.createElement(
    Box,
    {
      role: "heading",
      fontSize: "sm",
      fontWeight: "bold",
      flex: "1",
      textAlign: "center"
    },
    capitalize(title)
  ), /* @__PURE__ */ React86__default.createElement(
    CalendarNavigationButton,
    {
      onPress: onNext,
      isDisabled: isNextDisabled,
      icon: /* @__PURE__ */ React86__default.createElement(ArrowRightOutline24Icon, null),
      "aria-label": `${t2(texts12.next)} ${t2(texts12[unit])}`
    }
  ));
};
var texts12 = createTexts({
  previous: {
    nb: "Forrige",
    nn: "Forrige",
    sv: "F\xF6reg\xE5ende",
    en: "Previous"
  },
  next: {
    nb: "Neste",
    nn: "Neste",
    sv: "N\xE4sta",
    en: "Next"
  },
  month: {
    nb: "m\xE5ned",
    nn: "m\xE5nad",
    sv: "m\xE5nad",
    en: "month"
  },
  year: {
    nb: "\xE5r",
    nn: "\xE5r",
    sv: "\xE5r",
    en: "year"
  }
});

// src/datepicker/Calendar.tsx
function Calendar({
  showYearNavigation,
  variant,
  ...props
}) {
  const { t: t2 } = useTranslation();
  const locale = useCurrentLocale();
  const state2 = useCalendarState({
    ...props,
    locale,
    createCalendar
  });
  const { calendarProps } = useCalendar(props, state2);
  const calendarAriaLabel = calendarProps["aria-label"];
  const ariaLabel = t2(texts13.calendar) + (calendarAriaLabel ? ` ${calendarAriaLabel}` : "");
  return /* @__PURE__ */ React86__default.createElement(Box, { ...calendarProps, "aria-label": ariaLabel }, /* @__PURE__ */ React86__default.createElement(CalendarHeader, { state: state2, showYearNavigation }), /* @__PURE__ */ React86__default.createElement(CalendarGrid, { variant, state: state2 }));
}
var texts13 = createTexts({
  calendar: {
    nb: "Kalender",
    nn: "Kalender",
    sv: "Kalender",
    en: "Calendar"
  }
});
var CalendarTriggerButton = forwardRef(
  ({ variant, ...buttonProps }, ref) => {
    const { t: t2 } = useTranslation();
    const styles3 = useMultiStyleConfig("Datepicker", { variant });
    const { onPress, ...filteredButtonProps } = buttonProps;
    const handleOnPress = (event) => {
      if (onPress) {
        if (event.key == "Enter" || event.key == " ")
          onPress(event);
      }
    };
    return /* @__PURE__ */ React86__default.createElement(PopoverAnchor, null, /* @__PURE__ */ React86__default.createElement(
      Box,
      {
        ref,
        as: "button",
        type: "button",
        "aria-label": t2(texts14.openCalendar),
        sx: styles3.calendarTriggerButton,
        ...filteredButtonProps,
        onKeyUp: handleOnPress
      },
      /* @__PURE__ */ React86__default.createElement(CalendarOutline24Icon, null)
    ));
  }
);
var texts14 = createTexts({
  openCalendar: {
    nb: "\xC5pne kalender",
    nn: "\xC5pne kalendar",
    sv: "\xD6ppna kalender",
    en: "Open calendar"
  }
});
var DateTimeSegment = forwardRef$1(
  ({ segment, state: state2 }, externalRef) => {
    const internalRef = useRef(null);
    const ref = externalRef ?? internalRef;
    const { segmentProps } = useDateSegment(
      segment,
      state2,
      ref
    );
    const styles3 = useMultiStyleConfig("Datepicker", {
      isPlaceholder: segment.isPlaceholder,
      isEditable: segment.isEditable
    });
    return /* @__PURE__ */ React86__default.createElement(
      Box,
      {
        ...segmentProps,
        ref,
        style: {
          ...segmentProps.style,
          boxSizing: "content-box"
        },
        textAlign: "center",
        outline: "none",
        borderRadius: "xs",
        fontSize: ["mobile.sm", "desktop.sm"],
        sx: styles3.dateTimeSegment
      },
      isPaddable(segment.type) ? segment.text.padStart(2, "0") : segment.text
    );
  }
);
var isPaddable = (segmentType) => segmentType === "month" || segmentType === "day" || segmentType === "hour" || segmentType === "minute" || segmentType === "second";

// src/datepicker/DateField.tsx
function createCalendar2(identifier) {
  switch (identifier) {
    case "gregory":
      return new GregorianCalendar();
    default:
      throw new Error(`Unsupported calendar ${identifier}`);
  }
}
var DateField = forwardRef$1(
  (props, externalRef) => {
    var _a6;
    const locale = useCurrentLocale();
    const styles3 = useMultiStyleConfig("Datepicker", {});
    const state2 = useDateFieldState({
      ...props,
      locale,
      createCalendar: createCalendar2
    });
    const internalRef = useRef(null);
    const ref = externalRef ?? internalRef;
    const { fieldProps, labelProps } = useDateField(
      props,
      state2,
      ref
    );
    return /* @__PURE__ */ React86__default.createElement(Box, { minWidth: "6rem", width: "100%" }, props.label && /* @__PURE__ */ React86__default.createElement(
      FormLabel$1,
      {
        ...props.labelProps,
        ...labelProps,
        sx: styles3.inputLabel,
        position: "absolute",
        paddingTop: "2px"
      },
      props.label
    ), /* @__PURE__ */ React86__default.createElement(Flex, { ...fieldProps, ref, paddingTop: "3", paddingBottom: "0.5" }, state2.segments.map((segment, i) => /* @__PURE__ */ React86__default.createElement(DateTimeSegment, { key: i, segment, state: state2 }))), /* @__PURE__ */ React86__default.createElement(
      "input",
      {
        type: "hidden",
        value: ((_a6 = state2.value) == null ? void 0 : _a6.toString()) ?? "",
        name: props.name
      }
    ));
  }
);
var StyledField = forwardRef(
  ({ children, variant, ...otherProps }, ref) => {
    const { isInvalid } = useFormControlContext() ?? {
      isInvalid: false
    };
    const styles3 = useMultiStyleConfig("Datepicker", { variant });
    return /* @__PURE__ */ React86__default.createElement(
      Box,
      {
        ...otherProps,
        __css: styles3.wrapper,
        ref,
        "aria-invalid": isInvalid
      },
      children
    );
  }
);

// src/datepicker/DatePicker.tsx
var DatePicker = forwardRef$1(
  ({
    variant,
    errorMessage,
    minHeight,
    showYearNavigation,
    withPortal = true,
    width = "auto",
    ...props
  }, externalRef) => {
    const formControlProps = useFormControlContext();
    const state2 = useDatePickerState({
      ...props,
      shouldCloseOnSelect: true,
      errorMessage,
      isRequired: props.isRequired ?? (formControlProps == null ? void 0 : formControlProps.isRequired),
      validationState: (formControlProps == null ? void 0 : formControlProps.isInvalid) ? "invalid" : "valid"
    });
    const internalRef = useRef(null);
    const ref = externalRef ?? internalRef;
    const {
      groupProps,
      labelProps,
      fieldProps,
      buttonProps,
      dialogProps,
      calendarProps,
      errorMessageProps
    } = useDatePicker(
      props,
      state2,
      ref
    );
    const styles3 = useMultiStyleConfig("Datepicker", { variant });
    const locale = useCurrentLocale();
    const onFieldClick = () => {
      state2.setOpen(true);
    };
    const popoverContent = /* @__PURE__ */ React86__default.createElement(PopoverContent, { color: "darkGrey", sx: styles3.calendarPopover }, /* @__PURE__ */ React86__default.createElement(PopoverArrow, { sx: styles3.arrow }), /* @__PURE__ */ React86__default.createElement(PopoverBody, null, /* @__PURE__ */ React86__default.createElement(FocusLock, null, /* @__PURE__ */ React86__default.createElement(
      Calendar,
      {
        ...calendarProps,
        variant,
        showYearNavigation
      }
    ))));
    return /* @__PURE__ */ React86__default.createElement(I18nProvider, { locale }, /* @__PURE__ */ React86__default.createElement(
      Box,
      {
        position: "relative",
        display: "inline-flex",
        flexDirection: "column",
        width
      },
      /* @__PURE__ */ React86__default.createElement(
        Popover$1,
        {
          ...dialogProps,
          isOpen: state2.isOpen,
          onOpen: state2.open,
          onClose: state2.close,
          flip: false
        },
        /* @__PURE__ */ React86__default.createElement(InputGroup, { ...groupProps, display: "inline-flex" }, /* @__PURE__ */ React86__default.createElement(PopoverAnchor, null, /* @__PURE__ */ React86__default.createElement(
          StyledField,
          {
            variant,
            onClick: onFieldClick,
            paddingX: 3,
            minHeight
          },
          /* @__PURE__ */ React86__default.createElement(PopoverTrigger, null, /* @__PURE__ */ React86__default.createElement(
            CalendarTriggerButton,
            {
              variant,
              ref,
              ...buttonProps
            }
          )),
          /* @__PURE__ */ React86__default.createElement(
            DateField,
            {
              label: props.label,
              labelProps,
              name: props.name,
              ...fieldProps
            }
          )
        ))),
        /* @__PURE__ */ React86__default.createElement(FormErrorMessage, { ...errorMessageProps }, errorMessage),
        state2.isOpen && !props.isDisabled && withPortal && /* @__PURE__ */ React86__default.createElement(Portal, null, popoverContent),
        state2.isOpen && !props.isDisabled && !withPortal && popoverContent
      )
    ));
  }
);
function RangeCalendar(props) {
  const locale = useCurrentLocale();
  const state2 = useRangeCalendarState({
    ...props,
    visibleDuration: { months: 2 },
    locale,
    createCalendar: createCalendar
  });
  const ref = useRef(null);
  const { calendarProps, title } = useRangeCalendar(props, state2, ref);
  return /* @__PURE__ */ React86__default.createElement(Box, { ...calendarProps, ref }, /* @__PURE__ */ React86__default.createElement(CalendarHeader, { state: state2, title }), /* @__PURE__ */ React86__default.createElement(Box, { display: "flex", gap: "8" }, /* @__PURE__ */ React86__default.createElement(CalendarGrid, { variant: props.variant, state: state2 }), /* @__PURE__ */ React86__default.createElement(
    CalendarGrid,
    {
      variant: props.variant,
      state: state2,
      offset: { months: 1 }
    }
  )));
}

// src/datepicker/DateRangePicker.tsx
function DateRangePicker({
  variant,
  minHeight,
  startName,
  endName,
  withPortal = true,
  ...props
}) {
  const formControlProps = useFormControlContext();
  const state2 = useDateRangePickerState({
    ...props,
    shouldCloseOnSelect: true,
    isRequired: props.isRequired ?? (formControlProps == null ? void 0 : formControlProps.isRequired),
    validationState: formControlProps.isInvalid ? "invalid" : "valid"
  });
  const ref = useRef(null);
  const {
    groupProps,
    labelProps,
    startFieldProps,
    endFieldProps,
    buttonProps,
    dialogProps,
    calendarProps
  } = useDateRangePicker(props, state2, ref);
  const styles3 = useMultiStyleConfig("Datepicker", { variant });
  const locale = useCurrentLocale();
  const handleEnterClick = (e) => {
    if (e.key === "Enter" && !state2.isOpen && variant === "base") {
      e.stopPropagation();
      state2.setOpen(true);
    }
  };
  const onFieldClick = () => {
    state2.setOpen(true);
  };
  const popoverContent = /* @__PURE__ */ React86__default.createElement(PopoverContent, { sx: styles3.calendarPopover, maxWidth: "none" }, /* @__PURE__ */ React86__default.createElement(PopoverArrow, { sx: styles3.arrow }), /* @__PURE__ */ React86__default.createElement(PopoverBody, null, /* @__PURE__ */ React86__default.createElement(FocusLock, null, /* @__PURE__ */ React86__default.createElement(RangeCalendar, { variant: "base", ...calendarProps }))));
  return /* @__PURE__ */ React86__default.createElement(I18nProvider, { locale }, /* @__PURE__ */ React86__default.createElement(Box, { position: "relative", display: "inline-flex", flexDirection: "column" }, props.label && /* @__PURE__ */ React86__default.createElement(FormLabel$1, { ...labelProps, sx: styles3.inputLabel }, props.label), /* @__PURE__ */ React86__default.createElement(
    Popover$1,
    {
      ...dialogProps,
      isOpen: state2.isOpen,
      onOpen: state2.open,
      onClose: state2.close,
      flip: false
    },
    /* @__PURE__ */ React86__default.createElement(InputGroup, { ...groupProps, width: "auto", display: "inline-flex" }, /* @__PURE__ */ React86__default.createElement(PopoverAnchor, null, /* @__PURE__ */ React86__default.createElement(
      StyledField,
      {
        alignItems: "center",
        paddingX: 3,
        variant,
        onClick: onFieldClick,
        onKeyPress: handleEnterClick,
        minHeight
      },
      variant && /* @__PURE__ */ React86__default.createElement(PopoverTrigger, null, /* @__PURE__ */ React86__default.createElement(
        CalendarTriggerButton,
        {
          paddingLeft: 1,
          paddingRight: 1,
          variant,
          ref,
          ...buttonProps
        }
      )),
      /* @__PURE__ */ React86__default.createElement(
        DateField,
        {
          ...startFieldProps,
          name: startName,
          label: props.startLabel,
          labelProps
        }
      ),
      /* @__PURE__ */ React86__default.createElement(Box, { as: "span", "aria-hidden": "true", paddingRight: "2" }, "\u2013"),
      /* @__PURE__ */ React86__default.createElement(
        DateField,
        {
          ...endFieldProps,
          name: endName,
          label: props.endLabel,
          labelProps
        }
      )
    ))),
    state2.isOpen && withPortal && /* @__PURE__ */ React86__default.createElement(Portal, null, popoverContent),
    state2.isOpen && !withPortal && popoverContent
  )));
}
var TimeField = ({ state: state2, ...props }) => {
  const ref = useRef(null);
  const { labelProps, fieldProps } = useTimeField(props, state2, ref);
  return /* @__PURE__ */ React86__default.createElement(Box, null, /* @__PURE__ */ React86__default.createElement(
    FormLabel,
    {
      ...labelProps,
      htmlFor: fieldProps.id,
      marginBottom: 0,
      fontSize: "mobile.xs",
      cursor: "text",
      position: "absolute",
      paddingTop: "2px"
    },
    props.label
  ), /* @__PURE__ */ React86__default.createElement(Flex, { ...fieldProps, ref, paddingTop: "3", paddingBottom: "0.5" }, state2.segments.map((segment) => /* @__PURE__ */ React86__default.createElement(DateTimeSegment, { key: segment.type, segment, state: state2 }))), /* @__PURE__ */ React86__default.createElement(
    "input",
    {
      type: "hidden",
      value: getTimestampFromTime(state2.value),
      name: props.name
    }
  ));
};

// src/datepicker/TimePicker.tsx
var TimePicker = ({
  label: externalLabel,
  value,
  defaultValue = getCurrentTime(),
  onChange = () => {
  },
  minuteInterval = 30,
  isDisabled: isDisabledExternally = false,
  name,
  ...boxProps
}) => {
  const { isDisabled: isFormControlDisabled, isInvalid: isFormControlInvalid } = useFormControlContext() ?? {};
  const isDisabled = isDisabledExternally ?? isFormControlDisabled ?? false;
  const { t: t2 } = useTranslation();
  const locale = useCurrentLocale();
  const label = externalLabel ?? t2(texts15.time);
  const state2 = useTimeFieldState({
    value,
    defaultValue,
    onChange,
    locale,
    isDisabled,
    label,
    validationState: isFormControlInvalid ? "invalid" : "valid"
  });
  const dateTime = state2.value;
  const handleBackwardsClick = () => {
    if (!dateTime) {
      return;
    }
    const minutesToSubtract = dateTime.minute % minuteInterval || minuteInterval;
    state2.setValue(
      state2.value.subtract({
        minutes: minutesToSubtract
      })
    );
  };
  const handleForwardClick = () => {
    if (!dateTime) {
      return;
    }
    const minutesToAdd = minuteInterval - dateTime.minute % minuteInterval || minuteInterval;
    state2.setValue(
      state2.value.add({
        minutes: minutesToAdd
      })
    );
  };
  const backwardsLabel = `${t2(texts15.backwards)} ${minuteInterval} ${t2(
    texts15.minutes
  )}`;
  const forwardsLabel = `${t2(texts15.forwards)} ${minuteInterval} ${t2(
    texts15.minutes
  )}`;
  const inputLabel = label ?? t2(texts15.time);
  const ariaLabel = `${inputLabel} \u2013 ${t2(
    texts15.selectedTimeIs(`${(dateTime == null ? void 0 : dateTime.hour) ?? 0} ${(dateTime == null ? void 0 : dateTime.minute) ?? 0}`)
  )}`;
  return /* @__PURE__ */ React86__default.createElement(
    StyledField,
    {
      variant: "base",
      width: "fit-content",
      paddingX: 2,
      alignItems: "center",
      justifyContent: "space-between",
      gap: 2,
      opacity: isDisabled ? 0.5 : 1,
      pointerEvents: isDisabled ? "none" : "auto",
      "aria-disabled": isDisabled,
      "aria-live": "assertive",
      "aria-label": ariaLabel,
      ...boxProps
    },
    /* @__PURE__ */ React86__default.createElement(
      IconButton,
      {
        variant: "ghost",
        size: "xs",
        borderRadius: "xs",
        "aria-label": backwardsLabel,
        title: backwardsLabel,
        icon: /* @__PURE__ */ React86__default.createElement(DropdownLeftFill18Icon, null),
        onClick: handleBackwardsClick,
        isDisabled,
        style: isDisabled ? { backgroundColor: "transparent" } : {}
      }
    ),
    /* @__PURE__ */ React86__default.createElement(TimeField, { label, state: state2, name }),
    /* @__PURE__ */ React86__default.createElement(
      IconButton,
      {
        variant: "ghost",
        size: "xs",
        borderRadius: "xs",
        "aria-label": forwardsLabel,
        title: forwardsLabel,
        icon: /* @__PURE__ */ React86__default.createElement(DropdownRightFill18Icon, null),
        onClick: handleForwardClick,
        isDisabled,
        style: isDisabled ? { backgroundColor: "transparent" } : {}
      }
    )
  );
};
var texts15 = createTexts({
  selectedTimeIs: (time) => ({
    nb: `Valgt tidspunkt er ${time}`,
    nn: `Valt tidspunkt er ${time}`,
    en: `Selected time is ${time}`,
    sv: `Vald tid \xE4r ${time}`
  }),
  time: {
    nb: "Tid",
    nn: "Tid",
    en: "Time",
    sv: "Tid"
  },
  backwards: {
    nb: "Bakover",
    nn: "Bakover",
    en: "Backwards",
    sv: "Bak\xE5t"
  },
  forwards: {
    nb: "Fremover",
    nn: "Fremover",
    en: "Forward",
    sv: "Fram\xE5t"
  },
  minutes: {
    nb: "minutter",
    nn: "minuttar",
    en: "minutes",
    sv: "minuter"
  }
});
var icons = {
  "local-train": {
    sm: TrainFill18Icon,
    md: TrainFill24Icon,
    lg: TrainFill30Icon
  },
  "region-train": {
    sm: TrainFill18Icon,
    md: TrainFill24Icon,
    lg: TrainFill30Icon
  },
  "region-express-train": {
    sm: TrainFill18Icon,
    md: TrainFill24Icon,
    lg: TrainFill30Icon
  },
  "long-distance-train": {
    sm: TrainFill18Icon,
    md: TrainFill24Icon,
    lg: TrainFill30Icon
  },
  "airport-express-train": {
    sm: TrainFill18Icon,
    md: TrainFill24Icon,
    lg: TrainFill30Icon
  },
  "vy-bus": {
    sm: ExpressBusFill18Icon,
    md: ExpressBusFill24Icon,
    lg: ExpressBusFill30Icon
  },
  "local-bus": { sm: BusFill18Icon, md: BusFill24Icon, lg: BusFill30Icon },
  ferry: { sm: FerryFill18Icon, md: FerryFill24Icon, lg: FerryFill30Icon },
  subway: { sm: SubwayFill18Icon, md: SubwayFill24Icon, lg: SubwayFill30Icon },
  tram: { sm: TramFill18Icon, md: TramFill24Icon, lg: TramFill30Icon },
  "alt-transport": {
    sm: AltTransportFill18Icon,
    md: AltTransportFill24Icon,
    lg: AltTransportFill30Icon
  },
  walk: { sm: WalkFill18Icon, md: WalkFill24Icon, lg: WalkFill30Icon }
};
var getCorrectIcon = ({ variant, size: size2 }) => {
  var _a6;
  return ((_a6 = icons[variant]) == null ? void 0 : _a6[size2]) ?? Box;
};

// src/linjetag/LineIcon.tsx
var LineIcon = ({
  variant,
  size: size2 = "md",
  sx,
  ...rest
}) => {
  const styles3 = useMultiStyleConfig("LineIcon", { variant, size: size2, ...rest });
  const Icon = getCorrectIcon({
    variant: variant === "custom" && "customIconVariant" in rest ? rest.customIconVariant : variant === "custom" ? "local-train" : variant,
    size: size2
  });
  if (!Icon) {
    return null;
  }
  return /* @__PURE__ */ React86__default.createElement(Box, { sx: { ...styles3.iconContainer, ...sx }, ...rest }, /* @__PURE__ */ React86__default.createElement(Icon, { sx: styles3.icon }));
};

// src/linjetag/InfoTag.tsx
var InfoTag = ({
  variant,
  size: size2 = "md",
  title,
  description,
  ...customProps
}) => {
  const styles3 = useMultiStyleConfig("InfoTag", {
    variant,
    size: size2,
    ...customProps
  });
  return /* @__PURE__ */ React86__default.createElement(Box, { sx: styles3.container }, /* @__PURE__ */ React86__default.createElement(
    LineIcon,
    {
      variant,
      size: size2,
      sx: styles3.iconContainer,
      ...customProps
    }
  ), /* @__PURE__ */ React86__default.createElement(Box, { sx: styles3.textContainer }, title && /* @__PURE__ */ React86__default.createElement(Box, { as: "span", sx: styles3.title }, title), title && description && " ", description && /* @__PURE__ */ React86__default.createElement(Box, { as: "span", sx: styles3.description }, description)));
};
var TravelTag = forwardRef(
  ({
    variant,
    size: size2 = "md",
    deviationLevel = "none",
    title,
    description,
    isDisabled,
    ...rest
  }, ref) => {
    const styles3 = useMultiStyleConfig("TravelTag", {
      variant,
      size: size2,
      deviationLevel,
      foregroundColor: variant === "custom" ? rest.foregroundColor : void 0,
      backgroundColor: variant === "custom" ? rest.backgroundColor : void 0
    });
    const DeviationLevelIcon = getDeviationLevelIcon({ deviationLevel, size: size2 });
    return /* @__PURE__ */ React86__default.createElement(Box, { sx: styles3.container, "aria-disabled": isDisabled, ref, ...rest }, /* @__PURE__ */ React86__default.createElement(
      LineIcon,
      {
        variant,
        size: size2,
        sx: styles3.iconContainer,
        ...rest
      }
    ), /* @__PURE__ */ React86__default.createElement(Box, { sx: styles3.textContainer }, title && /* @__PURE__ */ React86__default.createElement(Box, { as: "span", sx: styles3.title }, title), title && description && " ", description && /* @__PURE__ */ React86__default.createElement(Box, { as: "span", sx: styles3.description }, description)), DeviationLevelIcon && /* @__PURE__ */ React86__default.createElement(DeviationLevelIcon, { sx: styles3.deviationIcon }));
  }
);
var getDeviationLevelIcon = ({
  deviationLevel,
  size: size2
}) => {
  switch (deviationLevel) {
    case "critical":
      return size2 === "lg" ? ErrorFill24Icon : ErrorFill18Icon;
    case "major":
    case "minor":
      return size2 === "lg" ? WarningFill24Icon : WarningFill18Icon;
    case "info":
      return size2 === "lg" ? InformationFill24Icon : InformationFill18Icon;
    default:
      return null;
  }
};
var TextLink = forwardRef(
  ({ children, ...props }, ref) => {
    var _a6;
    const { t: t2 } = useTranslation();
    const isExternal = props.isExternal !== void 0 ? props.isExternal : Boolean((_a6 = props.href) == null ? void 0 : _a6.match(/^https?:\/\//));
    return /* @__PURE__ */ React86__default.createElement(Link, { ...props, ref, isExternal }, children, isExternal && /* @__PURE__ */ React86__default.createElement(
      LinkOutOutline24Icon,
      {
        marginLeft: 0.5,
        "aria-label": t2(texts16.externalLink)
      }
    ));
  }
);
var texts16 = createTexts({
  externalLink: {
    nb: "Ekstern lenke",
    nn: "Ekstern lenke",
    sv: "Extern l\xE4nk",
    en: "External link"
  }
});
var VyLogo = ({ colorScheme, ...boxProps }) => {
  const mainColor = colorScheme === "light" ? "#1d211c" : "#ffffff";
  const accentColor = colorScheme === "light" ? "#138c6e" : "#ffffff";
  const id = useId();
  return /* @__PURE__ */ React86__default.createElement(Box, { as: "svg", viewBox: "0 0 107 54", ...boxProps }, /* @__PURE__ */ React86__default.createElement("title", null, "Vy logo"), /* @__PURE__ */ React86__default.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M79.97 33.44a.04.04 0 0 0 0-.08 5.76 5.76 0 0 1-2.32-.85c-1.56-1-2.79-2.9-3.83-6.07L68.14 7.16c-1.18-4.04-3.42-5.85-5.48-6.6a8.36 8.36 0 0 0-2.88-.52h-1.44a.04.04 0 0 0 0 .08c.57.09 1.18.24 1.8.5 1.92.8 3.92 2.63 5.06 6.54l5.61 19.07c1.06 3.3 2.31 5.27 3.92 6.3 1.01.64 2.17.9 3.5.9h1.74Z",
      fill: mainColor
    }
  ), /* @__PURE__ */ React86__default.createElement(
    "mask",
    {
      id: `${id}-a`,
      style: { maskType: "alpha" },
      maskUnits: "userSpaceOnUse",
      x: "0",
      y: "0",
      width: "94",
      height: "54"
    },
    /* @__PURE__ */ React86__default.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M0 .03h93.26v53.65H0V.03Z",
        fill: mainColor
      }
    )
  ), /* @__PURE__ */ React86__default.createElement(
    "g",
    {
      mask: `url(#${id}-a)`,
      fillRule: "evenodd",
      clipRule: "evenodd",
      fill: mainColor
    },
    /* @__PURE__ */ React86__default.createElement("path", { d: "M84.57 33.44a.04.04 0 0 0 .01-.08c-2.34-.3-3.85-3.59-4.68-6.38-.88-2.93-4.04-13.63-5.92-19.82C72.08.94 66.2.05 63.54.04a.04.04 0 0 0-.01.08c2.49.34 6.02 1.85 7.55 7.04 1.34 4.55 5.6 19.03 5.76 19.51 1.02 3.03 2.22 4.85 3.73 5.83a6.3 6.3 0 0 0 3.54.94h.46ZM23.28 53.68h-.72c-2.12 0-4.68-1.08-6.09-6.04L3.8 4.37C3.04 1.77 1.93.47.03.15A.04.04 0 0 1 .04.07h1.9c2.54 0 3.92 1.27 4.8 4.3 0 0 11.72 39.78 12.79 43.54.78 2.78 1.7 4.67 3.13 5.43.23.13.42.2.62.26a.04.04 0 0 1 0 .08ZM18.99 5.99C17.77 1.79 15.87.04 12.37.04h-1.71a.04.04 0 0 0 0 .08c2.73.39 4.32 2.19 5.39 5.87 0 0 10.49 35.72 11.85 40.4l1.44-4.87L18.99 6Z" }),
    /* @__PURE__ */ React86__default.createElement("path", { d: "M24.26 53.68h1.24c1.57 0 2.69-.41 3.52-1.1 1.37-1.1 1.99-2.93 2.56-4.86.09-.29 11.2-37.95 11.59-39.42 1.32-4.97 4.27-7.13 7.43-7.9a12.2 12.2 0 0 1 1.58-.28.04.04 0 0 0 0-.08h-1.4c-4.15 0-8.8 1.65-10.56 8.26-.63 2.38-11.5 39.13-11.58 39.42-.57 1.93-1.23 3.96-2.59 5.07-.56.45-1.06.7-1.8.81a.04.04 0 0 0 0 .08ZM81.3 27.76l6.53-21.78C88.89 2.3 90.49.5 93.23.11a.04.04 0 0 0-.01-.08H91.5c-3.5 0-5.4 1.76-6.62 5.95l-5.05 16.97s1.33 4.46 1.46 4.8Z" })
  ), /* @__PURE__ */ React86__default.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M98.49.07h-1.82c-2.98 0-4.6 1.49-5.63 5.06l-6.52 21.79a18.22 18.22 0 0 1-1.67 3.96c.57.78 1.17 1.26 1.76 1.38 1.13-.96 2.06-2.75 2.89-5.46l6.49-21.67c.9-3.1 2.23-4.63 4.5-4.98a.04.04 0 0 0 0-.08Z",
      fill: accentColor
    }
  ), /* @__PURE__ */ React86__default.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M85.25 34.53h-2.93L78.58 46.9c-1.82 6.1 1.05 6.73 2.15 6.73h2.31a.04.04 0 0 0 .01-.09c-1.25-.3-2.96-1.6-1.45-6.64l3.65-12.37ZM102.35.11c.02 0 .03-.02.03-.04a.04.04 0 0 0-.04-.04h-.4c-2.54 0-3.92 1.27-4.8 4.3 0 0-5 16.82-6.57 22.03-1.57 5.2-2.65 6.6-4.78 6.97l-.11.03a.04.04 0 0 0 0 .08h1.45c3.72 0 5.1-2.48 6.41-6.84l7.5-25.07c.19-.6.7-1.23 1.31-1.42Z",
      fill: mainColor
    }
  ), /* @__PURE__ */ React86__default.createElement(
    "mask",
    {
      id: `${id}-b`,
      style: { maskType: "alpha" },
      maskUnits: "userSpaceOnUse",
      x: "29",
      y: "0",
      width: "78",
      height: "54"
    },
    /* @__PURE__ */ React86__default.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M29.55.04H106v53.64H29.55V.04Z",
        fill: mainColor
      }
    )
  ), /* @__PURE__ */ React86__default.createElement("g", { mask: `url(#${id}-b)`, fillRule: "evenodd", clipRule: "evenodd" }, /* @__PURE__ */ React86__default.createElement(
    "path",
    {
      d: "m88.2 34.45-3.96 13.46c-1.54 5.18.9 5.72 1.83 5.72h2.26a.04.04 0 0 0 0-.09c-1.05-.27-2.44-1.4-1.18-5.63l4.43-15.02c-.7.71-1.88 1.37-3.38 1.56ZM93.71 53.63c.02 0 .04-.02.04-.05a.04.04 0 0 0-.03-.04c-.9-.25-2.02-1.24-.96-4.77 0 0 12.4-42.2 13.08-44.6a3.1 3.1 0 0 0-2.47-4.1c-.02 0-.06-.02-.07.01-.01.04.03.06.04.06.3.16.63.52.45 1.14L89.84 48.77c-1.32 4.4.76 4.86 1.55 4.86h2.32ZM74.1 33.44a.04.04 0 0 0 0-.08 5.77 5.77 0 0 1-2.3-.83c-1.64-1.04-2.9-3.06-3.98-6.5-.1-.29-5.37-18.25-5.55-18.87-1.12-3.8-2.91-5.63-4.68-6.46a7.06 7.06 0 0 0-3.04-.66H53a.04.04 0 0 0-.02.08c.3.05 4.32.17 6.35 7.04 2.03 6.86 4.46 15.07 5.28 17.97 1.77 6.26 4.07 8.3 7.75 8.3h1.73Z",
      fill: mainColor
    }
  ), /* @__PURE__ */ React86__default.createElement(
    "path",
    {
      d: "M55.43 2.4c-1.48 1.27-2.7 3.16-3.44 5.9-.07.29-11.08 37.74-11.32 38.55-.93 3.12-1.7 6.21-5.2 6.75a.04.04 0 0 0 0 .08h.7l.6-.01c3.56-.14 5.33-1.66 6.85-6.82L54.94 8.3c.44-1.44.96-3.08 1.7-4.52-.15-.25-.7-.96-1.2-1.38Z",
      fill: mainColor
    }
  ), /* @__PURE__ */ React86__default.createElement(
    "path",
    {
      d: "M53.78 1.44a4.64 4.64 0 0 0-4.17.93A10.79 10.79 0 0 0 46.19 8L34.53 47.72c-.58 1.93-1.2 3.75-2.56 4.87-.62.5-1.4.86-2.39 1.01a.04.04 0 0 0 0 .08h1.8c1.57 0 2.69-.41 3.53-1.1 1.36-1.1 1.98-2.93 2.56-4.86L49.05 8.3c.73-2.74 1.95-4.63 3.43-5.9.43-.36.88-.68 1.35-.95l-.05-.01Z",
      fill: accentColor
    }
  )), /* @__PURE__ */ React86__default.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M26.55 50.33a9.09 9.09 0 0 1-1.24-2.7c-.44-1.54-12.46-42.5-12.46-42.5C11.82 1.56 10.2.07 7.22.07H5.4a.04.04 0 0 0 0 .08C7.67.5 9 2.04 9.9 5.13l12.46 42.5c.65 2.28 1.53 3.74 2.5 4.65.7-.4 1.29-1.05 1.69-1.95Z",
      fill: mainColor
    }
  ));
};
var VyLogoPride = ({ colorScheme, ...boxProps }) => {
  const pinkColor = colorScheme === "light" ? "#ED6F99" : "#ffffff";
  const purpleColor = colorScheme === "light" ? "#C06CF7" : "#ffffff";
  const darkPurpleColor = colorScheme === "light" ? "#821889" : "#ffffff";
  const greenColor = colorScheme === "light" ? "#56BDBF" : "#ffffff";
  const darkGreenColor = colorScheme === "light" ? "#3E8C26" : "#ffffff";
  const blueColor = colorScheme === "light" ? "#3A0692" : "#ffffff";
  const redColor = colorScheme === "light" ? "#EA3323" : "#ffffff";
  const orangeColor = colorScheme === "light" ? "#F09436" : "#ffffff";
  const yellowColor = colorScheme === "light" ? "#FFFF54" : "#ffffff";
  const id = useId();
  return /* @__PURE__ */ React86__default.createElement(Box, { as: "svg", viewBox: "0 0 107 54", ...boxProps }, /* @__PURE__ */ React86__default.createElement("title", null, "Vy logo pride"), /* @__PURE__ */ React86__default.createElement(
    "svg",
    {
      width: "108",
      height: "55",
      viewBox: "0 0 108 55",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    },
    /* @__PURE__ */ React86__default.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M81.4496 34.0577C81.4727 34.0577 81.4914 34.0389 81.4914 34.0158C81.4914 33.9951 81.4762 33.9779 81.4564 33.9747C80.5875 33.8486 79.8027 33.5738 79.0873 33.115C77.4968 32.0951 76.2499 30.1645 75.189 26.9334C75.0494 26.5085 69.7485 8.46796 69.4024 7.29056C68.1947 3.18059 65.9216 1.33839 63.8188 0.561417C62.7398 0.162674 61.7055 0.0441895 60.8829 0.0441895C60.4167 0.0441895 59.4168 0.0441895 59.4168 0.0441895C59.3937 0.0441895 59.375 0.0629034 59.375 0.0859014C59.375 0.106645 59.3902 0.123893 59.4101 0.127162C59.9962 0.211263 60.6246 0.368077 61.262 0.635935C63.2087 1.45371 65.24 3.30719 66.4107 7.29056C66.6722 8.18038 72.0104 26.3533 72.125 26.7112C73.2046 30.0866 74.4763 32.0839 76.1099 33.1244C77.1418 33.7817 78.318 34.0577 79.6817 34.0577H81.4496",
        fill: pinkColor
      }
    ),
    /* @__PURE__ */ React86__default.createElement(
      "mask",
      {
        id: `${id}-a-pride`,
        style: { maskType: "luminance" },
        maskUnits: "userSpaceOnUse",
        x: "0",
        y: "0",
        width: "95",
        height: "55"
      },
      /* @__PURE__ */ React86__default.createElement(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M0.00585938 0.0339355H94.9827V54.6696H0.00585938V0.0339355Z",
          fill: "white"
        }
      )
    ),
    /* @__PURE__ */ React86__default.createElement("g", { mask: `url(#${id}-a-pride)` }, /* @__PURE__ */ React86__default.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M86.1392 34.0577C86.1622 34.0577 86.1809 34.0389 86.1809 34.0158C86.1809 33.9951 86.1658 33.9779 86.146 33.9747V33.9745C83.7657 33.6665 82.2265 30.3247 81.3764 27.4799C80.4843 24.4948 77.2629 13.5951 75.3455 7.29056C73.4194 0.957342 67.4267 0.0485861 64.7129 0.0441895H64.7137C64.6906 0.0441895 64.6719 0.0629034 64.6719 0.0859014C64.6719 0.106645 64.6869 0.123893 64.7068 0.127162L64.7067 0.127388C67.2413 0.468862 70.8417 2.00375 72.3953 7.29056C73.7591 11.9308 78.0927 26.6723 78.2592 27.1656C79.2998 30.2466 80.5197 32.1068 82.0639 33.1046C83.1032 33.776 84.2891 34.0577 85.6664 34.0577H86.1392",
        fill: purpleColor
      }
    ), /* @__PURE__ */ React86__default.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M23.7089 54.6763C23.4058 54.6763 23.1352 54.6763 22.9803 54.6763C20.8144 54.6763 18.2099 53.5754 16.7766 48.5188L3.8641 4.45414C3.09965 1.80939 1.96226 0.481143 0.0347223 0.151506C0.014881 0.148237 0 0.131101 0 0.110245C0 0.0871344 0.018714 0.0684204 0.0418246 0.0684204H1.98402C4.56565 0.0684204 5.96987 1.36104 6.86386 4.45414C6.86386 4.45414 18.8019 44.9686 19.8869 48.7964C20.6896 51.628 21.628 53.5542 23.0795 54.3328C23.3142 54.4587 23.5119 54.5409 23.7154 54.5932C23.7352 54.5965 23.7506 54.6138 23.7506 54.6345C23.7506 54.6576 23.7319 54.6763 23.7089 54.6763Z",
        fill: darkPurpleColor
      }
    ), /* @__PURE__ */ React86__default.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M19.3365 6.09794C18.1013 1.82472 16.1613 0.0390015 12.5947 0.0390015H10.8543C10.8312 0.0390015 10.8125 0.0577155 10.8125 0.0808261C10.8125 0.101569 10.8277 0.118818 10.8476 0.122087V0.121974C13.6341 0.517899 15.2582 2.35232 16.341 6.09794C16.341 6.09794 27.027 42.4871 28.4146 47.2512C28.7189 46.2219 29.2327 44.4828 29.8791 42.2935C28.6038 37.9117 19.3365 6.09794 19.3365 6.09794",
        fill: greenColor
      }
    ), /* @__PURE__ */ React86__default.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M24.7059 54.6763H25.9753C27.5661 54.6763 28.7056 54.2553 29.5596 53.5597C30.9494 52.4272 31.5822 50.5663 32.1676 48.6028C32.2552 48.309 43.5646 9.95201 43.9629 8.45455C45.3098 3.39196 48.3208 1.18687 51.5334 0.404941C52.0668 0.275183 52.6055 0.184995 53.1431 0.127162H53.1439C53.1638 0.123893 53.1789 0.106645 53.1789 0.0859014C53.1789 0.0629034 53.1602 0.0441895 53.1371 0.0441895H51.7232C47.4872 0.0441895 42.7565 1.72507 40.9662 8.45455C40.3206 10.8814 29.2585 48.309 29.1709 48.6028C28.5854 50.5663 27.9202 52.6362 26.5303 53.7687C25.9647 54.2295 25.4469 54.4781 24.6995 54.5933H24.699C24.6792 54.5966 24.6641 54.614 24.6641 54.6346C24.6641 54.6577 24.6828 54.6764 24.7059 54.6764V54.6763",
        fill: darkGreenColor
      }
    ), /* @__PURE__ */ React86__default.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M82.7992 28.2698L89.4539 6.09287C90.5365 2.34748 92.1604 0.513059 94.9467 0.117021H94.9471C94.9669 0.113752 94.9821 0.0965034 94.9821 0.0757602C94.9821 0.0526495 94.9635 0.0339355 94.9403 0.0339355H93.2001C89.6335 0.0339355 87.6935 1.81966 86.4583 6.09287L81.3125 23.3801C81.3125 23.3801 82.6735 27.9173 82.7992 28.2698",
        fill: darkPurpleColor
      }
    )),
    /* @__PURE__ */ React86__default.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M100.313 0.0684204H98.4597C95.4268 0.0684204 93.7771 1.58696 92.7268 5.22074C92.7268 5.22074 86.1431 27.2276 86.0874 27.4145C85.6036 28.9698 84.9952 30.48 84.3828 31.4546C84.9626 32.2484 85.5745 32.7345 86.1805 32.8562C87.3236 31.8751 88.2719 30.0574 89.1204 27.2954C89.1653 27.1488 95.731 5.22074 95.731 5.22074C96.6408 2.0733 98.0002 0.512821 100.319 0.151506H100.32C100.34 0.148237 100.355 0.131101 100.355 0.110245C100.355 0.0871344 100.336 0.0684204 100.313 0.0684204",
        fill: blueColor
      }
    ),
    /* @__PURE__ */ React86__default.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M86.829 35.1664H83.8473C82.4939 39.632 80.7038 45.5437 80.0385 47.7716C78.1846 53.98 81.1091 54.6188 82.2256 54.6188C82.3769 54.6188 83.722 54.6188 84.5809 54.6188C84.604 54.6187 84.6227 54.6001 84.6227 54.577C84.6227 54.5571 84.6088 54.5403 84.5902 54.5361H84.5899C83.3122 54.232 81.5755 52.9078 83.1092 47.7716C83.1092 47.7716 85.8127 38.6188 86.829 35.1664",
        fill: blueColor
      }
    ),
    /* @__PURE__ */ React86__default.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M104.248 0.115556C104.265 0.110144 104.277 0.0943614 104.277 0.0757602C104.277 0.0526495 104.258 0.0339355 104.235 0.0339355H103.82C101.239 0.0339355 99.8344 1.32655 98.9403 4.41955C98.9403 4.41955 93.8509 21.5423 92.2501 26.8474C90.6493 32.1524 89.5515 33.5736 87.3782 33.9486L87.2635 33.9747C87.2436 33.978 87.2285 33.9951 87.2285 34.0158C87.2285 34.0389 87.2472 34.0577 87.2703 34.0577H88.7449C92.5299 34.0577 93.9393 31.5339 95.2711 27.0896C96.387 23.3664 102.914 1.55428 102.914 1.55428C103.1 0.938746 103.632 0.300666 104.248 0.11533V0.115556",
        fill: greenColor
      }
    ),
    /* @__PURE__ */ React86__default.createElement(
      "mask",
      {
        id: `${id}-b-pride`,
        style: { maskType: "luminance" },
        maskUnits: "userSpaceOnUse",
        x: "30",
        y: "0",
        width: "78",
        height: "55"
      },
      /* @__PURE__ */ React86__default.createElement(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M30.0938 0.0441895H107.967V54.6696H30.0938V0.0441895Z",
          fill: "white"
        }
      )
    ),
    /* @__PURE__ */ React86__default.createElement("g", { mask: `url(#${id}-b-pride)` }, /* @__PURE__ */ React86__default.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M89.8289 35.0891C88.7828 38.6493 85.8015 48.8015 85.8015 48.8015C84.2266 54.076 86.7112 54.6188 87.6599 54.6188H89.9623C89.9855 54.6188 90.0042 54.6001 90.0042 54.577C90.0042 54.5571 89.9903 54.5403 89.9717 54.5362V54.5363C88.8916 54.2553 87.4798 53.0991 88.7632 48.8015C88.7632 48.8015 92.0286 37.7282 93.2719 33.5031C92.561 34.2226 91.3615 34.8917 89.8289 35.0891",
        fill: greenColor
      }
    ), /* @__PURE__ */ React86__default.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M95.4467 54.6188C95.4698 54.6188 95.4885 54.6001 95.4885 54.577C95.4885 54.557 95.4747 54.5403 95.4561 54.5362H95.4558C94.5434 54.2765 93.3986 53.2655 94.4728 49.6684C94.4728 49.6684 107.101 6.68958 107.804 4.25563C108.507 1.82169 106.809 0.298979 105.28 0.0692254C105.269 0.0676471 105.219 0.0537807 105.209 0.0862483C105.199 0.118716 105.241 0.138557 105.249 0.143179C105.553 0.303376 105.894 0.672244 105.708 1.30469C105.522 1.93713 91.499 49.6684 91.499 49.6684C90.1586 54.1569 92.273 54.6188 93.0802 54.6188H95.4467",
        fill: darkGreenColor
      }
    ), /* @__PURE__ */ React86__default.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M75.4659 34.0577C75.4889 34.0577 75.5076 34.0389 75.5076 34.0158C75.5076 33.9951 75.4925 33.9778 75.4726 33.9746H75.4723C74.6146 33.8501 73.8387 33.5807 73.1306 33.1321C71.4607 32.0744 70.1687 30.0201 69.0737 26.521C68.9798 26.2215 63.6049 7.92165 63.4194 7.29056C62.2821 3.42105 60.4546 1.5616 58.6517 0.708874C57.557 0.191083 56.4715 0.0441895 55.5553 0.0441895C54.9539 0.0441895 54.4151 0.0441895 53.9784 0.0441895H53.9715C53.9484 0.0441895 53.9297 0.0629034 53.9297 0.0859014C53.9297 0.106645 53.9448 0.123893 53.9646 0.127162V0.127275C54.26 0.171918 58.362 0.298745 60.4275 7.29056C62.493 14.2825 64.9683 22.6405 65.8045 25.5908C67.6133 31.9722 69.9469 34.0577 73.6985 34.0577H75.4659",
        fill: redColor
      }
    ), /* @__PURE__ */ React86__default.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M56.4576 2.44421C56.4559 2.44568 56.4541 2.44703 56.4524 2.4485C54.944 3.74292 53.6961 5.66449 52.9539 8.45445C52.8754 8.74959 41.6662 46.889 41.4206 47.7167C40.4784 50.8926 39.6893 54.0469 36.1209 54.5932C36.101 54.5965 36.0859 54.6138 36.0859 54.6345C36.0859 54.6576 36.1047 54.6763 36.1278 54.6763H36.8373C36.8373 54.6763 37.3489 54.6683 37.4515 54.6642C41.0756 54.5179 42.8818 52.978 44.4271 47.7167C45.5556 43.8746 55.8691 8.75883 55.9604 8.45445C56.4006 6.98517 56.9293 5.3123 57.6882 3.84641C57.53 3.59208 56.9713 2.87385 56.4576 2.44421",
        fill: orangeColor
      }
    ), /* @__PURE__ */ React86__default.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M54.7756 1.4669C53.6292 1.14087 52.0012 1.22801 50.5238 2.41218C49.0463 3.59635 47.7228 5.60664 47.0466 8.14847C46.968 8.4435 35.2535 48.309 35.1658 48.6028C34.5804 50.5662 33.9476 52.4272 32.5578 53.5597C31.9265 54.0741 31.139 54.4382 30.1287 54.5931V54.5932C30.1089 54.5965 30.0938 54.6138 30.0938 54.6345C30.0938 54.6576 30.1125 54.6763 30.1355 54.6763H31.9702C33.561 54.6763 34.7005 54.2555 35.5545 53.5597C36.9444 52.4272 37.5771 50.5663 38.1625 48.6028C38.2502 48.309 49.8795 8.74957 49.958 8.45443C50.7002 5.66447 51.9481 3.7429 53.4565 2.44848C53.8916 2.07499 54.3488 1.75505 54.8217 1.48077C54.8141 1.47817 54.7985 1.47344 54.7756 1.4669",
        fill: yellowColor
      }
    )),
    /* @__PURE__ */ React86__default.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M27.0349 51.2629C26.519 50.5125 26.0823 49.6082 25.7735 48.5189C25.328 46.9472 13.0878 5.22074 13.0878 5.22074C12.0376 1.58696 10.3878 0.0684204 7.355 0.0684204H5.50276C5.47965 0.0684204 5.46094 0.0872471 5.46094 0.110245C5.46094 0.131101 5.47616 0.148237 5.49589 0.151506C7.81439 0.512821 9.17375 2.0733 10.0835 5.22074L22.7739 48.5189C23.4303 50.835 24.3325 52.3205 25.3258 53.2511C26.0299 52.8441 26.6295 52.1809 27.0349 51.2629",
        fill: blueColor
      }
    )
  ));
};
var CargonetLogo = ({
  colorScheme,
  ...boxProps
}) => {
  const mainColor = "#DF8200";
  const accentColor = colorScheme === "light" ? "#383E42" : "#ffffff";
  return /* @__PURE__ */ React86__default.createElement(Box, { as: "svg", viewBox: "0 0 251 52", ...boxProps }, /* @__PURE__ */ React86__default.createElement("title", null, "Cargonet logo"), /* @__PURE__ */ React86__default.createElement(
    "path",
    {
      d: "M87.9222 14.602L84.3862 18.7417C81.1953 15.9821 79.1685 15.2914 76.5379 15.2914C70.933 15.2914 67.4398 19.5609 67.4398 26.029C67.4398 32.5834 71.0186 36.8523 76.4089 36.8523C79.6855 36.8523 81.6694 35.6447 84.9038 32.9285L88.3969 36.982C84.645 40.5608 81.1524 42.1134 76.4951 42.1134C66.9651 42.1134 61.2733 35.214 61.2733 25.9856C61.2733 16.9732 66.7492 10.0309 76.5379 10.0309C81.2387 10.0309 84.3 11.4533 87.9222 14.602Z",
      fill: accentColor
    }
  ), /* @__PURE__ */ React86__default.createElement(
    "path",
    {
      d: "M106.461 41.3802C106.159 40.5604 105.986 39.5259 105.857 38.4046C104.693 40.6038 102.408 42.1131 98.6988 42.1131C94.4299 42.1131 90.8511 40.216 90.8511 35.774C90.8511 30.9013 95.1628 29.1333 100.812 28.1417L105.598 27.3225V26.7187C105.598 24.3903 103.917 23.1399 101.416 23.1399C98.4829 23.1399 96.5858 24.476 94.4734 26.6759L91.0231 23.5712C93.9124 20.2934 97.1468 18.6117 101.373 18.6117C107.754 18.6117 110.946 21.846 110.946 26.5028V35.9037C110.946 38.448 111.118 40.216 111.506 41.3802H106.461ZM105.598 32.6265V31.1607L101.373 31.9364C98.0093 32.5836 96.2414 33.4022 96.2414 35.3861C96.2414 36.9388 97.5346 37.9299 99.8202 37.9299C102.666 37.9299 105.598 36.4647 105.598 32.6265Z",
      fill: accentColor
    }
  ), /* @__PURE__ */ React86__default.createElement(
    "path",
    {
      d: "M130.65 19.6469L129.572 24.5625C128.537 24.2614 127.373 24.0455 126.295 24.0455C123.233 24.0455 121.422 26.4601 121.422 30.5565V41.3803H115.816V25.8563C115.816 22.8813 115.644 20.8111 115.385 19.3448H120.603C120.818 20.1645 120.991 21.4578 121.034 23.0967C122.112 20.5524 123.88 18.9569 126.812 18.9569C128.192 18.9569 129.529 19.2157 130.65 19.6469Z",
      fill: accentColor
    }
  ), /* @__PURE__ */ React86__default.createElement(
    "path",
    {
      d: "M152.813 19.3447V40.6896C152.813 46.9859 148.156 50.1768 142.075 50.1768C138.669 50.1768 135.219 49.3142 132.028 47.4172L134.745 43.3202C137.289 44.8729 139.532 45.692 141.99 45.692C145.008 45.692 147.336 44.269 147.336 40.3018V37.4993C146.043 39.5255 143.93 40.8199 140.911 40.8199C135.349 40.8199 131.209 36.3779 131.209 29.7373C131.209 23.0966 135.349 18.6118 140.911 18.6118C144.188 18.6118 146.345 20.0782 147.639 22.3631V19.3447H152.813ZM147.509 29.7373C147.509 25.9425 145.267 23.3988 142.162 23.3988C138.971 23.3988 136.858 25.9425 136.858 29.7373C136.858 33.5314 138.971 36.0763 142.162 36.0763C145.267 36.0763 147.509 33.5314 147.509 29.7373Z",
      fill: accentColor
    }
  ), /* @__PURE__ */ React86__default.createElement(
    "path",
    {
      d: "M178.72 30.341C178.72 37.3267 173.976 42.0702 167.292 42.0702C160.609 42.0702 155.866 37.3267 155.866 30.341C155.866 23.3553 160.609 18.6117 167.292 18.6117C173.976 18.6117 178.72 23.3553 178.72 30.341ZM161.557 30.341C161.557 34.6967 163.886 37.4992 167.292 37.4992C170.699 37.4992 173.028 34.6967 173.028 30.341C173.028 26.0721 170.699 23.1828 167.292 23.1828C163.886 23.1828 161.557 26.0721 161.557 30.341Z",
      fill: accentColor
    }
  ), /* @__PURE__ */ React86__default.createElement(
    "path",
    {
      d: "M208.903 10.7638V41.38H202.478L194.673 28.9612C192.516 25.5115 190.403 22.1046 188.635 18.8274C188.851 22.4497 188.937 26.4598 188.937 30.8155V41.38H183.029V10.7638H189.585L197.82 23.9589C199.717 26.9773 201.616 29.9529 203.21 32.8851C203.081 29.6507 203.038 26.0719 203.038 21.8893V10.7638H208.903Z",
      fill: mainColor
    }
  ), /* @__PURE__ */ React86__default.createElement(
    "path",
    {
      d: "M233.663 37.7578C230.386 41.035 227.324 42.0707 223.788 42.0707C216.672 42.0707 212.231 37.499 212.231 30.4705C212.231 23.6573 216.371 18.6116 223.313 18.6116C230.041 18.6116 233.619 22.8376 233.619 29.6079C233.619 30.2546 233.577 31.2897 233.534 31.6781H217.578C218.009 35.0844 220.08 37.499 223.917 37.499C226.505 37.499 228.144 36.5936 230.6 34.4378L233.663 37.7578ZM217.708 27.9262H228.359C228.144 24.8644 226.376 22.881 223.227 22.881C220.123 22.881 218.311 24.8644 217.708 27.9262Z",
      fill: mainColor
    }
  ), /* @__PURE__ */ React86__default.createElement(
    "path",
    {
      d: "M250.41 41.0785C248.556 41.6817 246.789 41.8976 245.538 41.8976C240.88 41.8976 239.198 39.8709 239.198 35.7739V23.4415H235.275V19.3445H239.198V12.6182H244.805V19.3445H250.066V23.4415H244.805V34.8257C244.805 36.5937 245.624 37.0244 247.047 37.0244C247.651 37.0244 248.47 36.9387 249.721 36.6365L250.41 41.0785Z",
      fill: mainColor
    }
  ), /* @__PURE__ */ React86__default.createElement(
    "path",
    {
      d: "M21.4911 10.2565H31.1579V0.589175H21.4911V10.2565Z",
      fill: mainColor
    }
  ), /* @__PURE__ */ React86__default.createElement(
    "path",
    {
      d: "M41.3861 10.8855H31.7757V20.5528H41.3861V10.8855Z",
      fill: mainColor
    }
  ), /* @__PURE__ */ React86__default.createElement(
    "path",
    {
      d: "M42.0022 10.2547H51.6126V0.587402H42.0022V10.2547Z",
      fill: mainColor
    }
  ), /* @__PURE__ */ React86__default.createElement(
    "path",
    {
      d: "M21.477 30.7758H31.1431V21.1654H21.477V30.7758Z",
      fill: mainColor
    }
  ), /* @__PURE__ */ React86__default.createElement(
    "path",
    {
      d: "M11.2124 20.5493H20.8791V10.8826H11.2124V20.5493Z",
      fill: mainColor
    }
  ), /* @__PURE__ */ React86__default.createElement(
    "path",
    {
      d: "M0.910156 30.7911H10.5775V21.1801H0.910156V30.7911Z",
      fill: mainColor
    }
  ), /* @__PURE__ */ React86__default.createElement(
    "path",
    {
      d: "M11.1948 41.0258H20.8615V31.4154H11.1948V41.0258Z",
      fill: mainColor
    }
  ), /* @__PURE__ */ React86__default.createElement(
    "path",
    {
      d: "M31.7669 41.0581H41.4336V31.3908H31.7669V41.0581Z",
      fill: mainColor
    }
  ), /* @__PURE__ */ React86__default.createElement(
    "path",
    {
      d: "M21.4776 51.2277H31.1443V41.656H21.4776V51.2277Z",
      fill: mainColor
    }
  ), /* @__PURE__ */ React86__default.createElement(
    "path",
    {
      d: "M42.0615 51.2283H51.7282V41.6989H42.0615V51.2283Z",
      fill: mainColor
    }
  ));
};
var JumpButton = ({
  direction: direction2,
  isDisabled,
  size: size2 = "sm",
  ...props
}) => {
  const { t: t2 } = useTranslation();
  const styles3 = useMultiStyleConfig("MediaControllerButton", {
    variant: "jumpSkip",
    size: size2
  });
  return /* @__PURE__ */ React86__default.createElement(
    Center,
    {
      as: "button",
      sx: styles3.container,
      "aria-label": direction2 === "forward" ? t2(texts17.forward) : t2(texts17.backward),
      disabled: isDisabled,
      ...props
    },
    direction2 === "forward" ? /* @__PURE__ */ React86__default.createElement(Forward15MediaControllerFill30Icon, { sx: styles3.icon }) : /* @__PURE__ */ React86__default.createElement(Backward15MediaControllerFill30Icon, { sx: styles3.icon })
  );
};
var texts17 = createTexts({
  forward: {
    nb: "15 sekunder frem",
    nn: "15 sekunder fram",
    sv: "15 sekunder fram\xE5t",
    en: "15 seconds forward"
  },
  backward: {
    nb: "15 sekunder tilbake",
    nn: "15 sekunder tilbake",
    sv: "15 sekunder tillbaka",
    en: "15 seconds backward"
  }
});
var PlayPauseButton = ({
  size: size2 = "lg",
  isPlaying,
  isDisabled,
  ...props
}) => {
  const { t: t2 } = useTranslation();
  const styles3 = useMultiStyleConfig("MediaControllerButton", {
    variant: "play",
    size: size2
  });
  return /* @__PURE__ */ React86__default.createElement(
    Center,
    {
      as: "button",
      sx: styles3.container,
      "aria-label": isPlaying ? t2(texts18.pause) : t2(texts18.play),
      disabled: isDisabled,
      ...props
    },
    isPlaying ? /* @__PURE__ */ React86__default.createElement(PauseMediaControllerFill24Icon, { sx: styles3.icon }) : /* @__PURE__ */ React86__default.createElement(PlayMediaControllerFill24Icon, { sx: styles3.icon })
  );
};
var texts18 = createTexts({
  pause: {
    nb: "Pause",
    nn: "Pause",
    sv: "Paus",
    en: "Pause"
  },
  play: {
    nb: "Spill av",
    nn: "Spill av",
    sv: "Spel av",
    en: "Play"
  }
});
var SkipButton = ({
  direction: direction2,
  isDisabled,
  size: size2 = "sm",
  ...props
}) => {
  const { t: t2 } = useTranslation();
  const styles3 = useMultiStyleConfig("MediaControllerButton", {
    variant: "jumpSkip",
    size: size2
  });
  return /* @__PURE__ */ React86__default.createElement(
    Center,
    {
      as: "button",
      sx: styles3.container,
      "aria-label": direction2 === "forward" ? t2(texts19.next) : t2(texts19.previous),
      disabled: isDisabled,
      ...props
    },
    direction2 === "forward" ? /* @__PURE__ */ React86__default.createElement(NextMediaControllerFill30Icon, { sx: styles3.icon }) : /* @__PURE__ */ React86__default.createElement(PreviousMediaControllerFill30Icon, { sx: styles3.icon })
  );
};
var texts19 = createTexts({
  next: {
    nb: "Neste",
    nn: "Neste",
    sv: "N\xE4sta",
    en: "Next"
  },
  previous: {
    nb: "Forrige",
    nn: "Forrige",
    sv: "F\xF6reg\xE5ende",
    en: "Previous"
  }
});
var ModalHeader = forwardRef(
  ({ size: size2, ...props }, ref) => {
    const styles3 = {
      fontSize: size2 === "lg" ? ["mobile.lg", "desktop.lg"] : ["mobile.md", "desktop.md"],
      textAlign: size2 === "lg" ? "center" : "left"
    };
    return /* @__PURE__ */ React86__default.createElement(ModalHeader$1, { ...props, ref, ...styles3 });
  }
);

// src/modal/Drawer.tsx
var Drawer = (props) => {
  return /* @__PURE__ */ React86__default.createElement(DrawerProvider, { placement: props.placement }, /* @__PURE__ */ React86__default.createElement(Drawer$1, { ...props }));
};
var DrawerContent = forwardRef(
  ({ children, ...props }, ref) => {
    const placement = useDrawerContext();
    const { onClose } = useModalContext();
    const handlers = useSwipeable({
      onSwiped: (e) => {
        const shouldClose = placement === "bottom" && e.dir === "Down" || placement === "right" && e.dir === "Right" || placement === "left" && e.dir === "Left" || placement === "top" && e.dir === "Up" || placement === "end" && e.dir === "Right" || placement === "start" && e.dir === "Left";
        if (shouldClose) {
          onClose();
        }
      },
      swipeDuration: 500
    });
    const isTopOrBottom = placement === "top" || placement === "bottom";
    const widthConstraits = isTopOrBottom ? { width: ["100%", "37.5rem"], mx: "auto" } : {};
    return /* @__PURE__ */ React86__default.createElement(Box, { ...handlers }, /* @__PURE__ */ React86__default.createElement(
      DrawerContent$1,
      {
        ...widthConstraits,
        borderTopRadius: placement === "bottom" ? "md" : "none",
        borderBottomRadius: placement === "top" ? "md" : "none",
        ...props,
        ref
      },
      /* @__PURE__ */ React86__default.createElement(Box, { position: "relative" }, /* @__PURE__ */ React86__default.createElement(Box, { maxHeight: "100vh", maxWidth: "100vw", overflow: "auto" }, isTopOrBottom && /* @__PURE__ */ React86__default.createElement(Notch, null), /* @__PURE__ */ React86__default.createElement(Box, null, children)))
    ));
  }
);
var Notch = forwardRef((props, ref) => {
  const placement = useDrawerContext();
  return /* @__PURE__ */ React86__default.createElement(
    Box,
    {
      position: "absolute",
      left: 0,
      right: 0,
      top: placement === "bottom" ? 0 : void 0,
      bottom: placement === "top" ? 0 : void 0,
      zIndex: "modal",
      ...props,
      ref
    },
    /* @__PURE__ */ React86__default.createElement(
      Center,
      {
        background: placement === "bottom" ? "bottom" : "top",
        padding: 2,
        borderRadius: "md"
      },
      /* @__PURE__ */ React86__default.createElement(
        Box,
        {
          width: "2.265rem",
          height: 1,
          backgroundColor: "steel",
          borderRadius: "xs"
        }
      )
    )
  );
});
var DrawerContext = React86__default.createContext(void 0);
var DrawerProvider = (props) => /* @__PURE__ */ React86__default.createElement(DrawerContext.Provider, { value: props.placement }, props.children);
var useDrawerContext = () => {
  return React86__default.useContext(DrawerContext);
};
var FullScreenDrawer = ({
  children,
  title,
  placement = "bottom",
  leftButton = /* @__PURE__ */ React86__default.createElement(DrawerBackButton, null),
  rightButton = /* @__PURE__ */ React86__default.createElement(DrawerCloseButton2, null),
  isOpen,
  onClose,
  body
}) => {
  const [isContentBoxScrolled, setContentBoxScrolled] = useState(false);
  const onContentScroll = (e) => {
    const target = e.target;
    if (target.scrollTop <= 0) {
      setContentBoxScrolled(false);
      return;
    }
    setContentBoxScrolled(true);
  };
  useEffect(() => {
    setContentBoxScrolled(false);
  }, [isOpen]);
  return /* @__PURE__ */ React86__default.createElement(Drawer, { isOpen, onClose, placement, size: "full" }, /* @__PURE__ */ React86__default.createElement(DrawerOverlay, null), /* @__PURE__ */ React86__default.createElement(
    DrawerContent$1,
    {
      height: "100vh",
      backgroundSize: "100% 285px, 100%",
      backgroundPosition: "top",
      backgroundRepeat: "no-repeat"
    },
    /* @__PURE__ */ React86__default.createElement(
      DrawerTopMenu,
      {
        isScrolled: isContentBoxScrolled,
        title,
        leftButton,
        rightButton
      }
    ),
    /* @__PURE__ */ React86__default.createElement(DrawerBody, { overflow: "auto", onScroll: onContentScroll, ...body }, children)
  ));
};
var DrawerTopMenu = ({
  title,
  leftButton,
  rightButton,
  isScrolled
}) => {
  const backgroundColor = useColorModeValue(
    "bg.default.light",
    "bg.default.dark"
  );
  return /* @__PURE__ */ React86__default.createElement(
    Flex,
    {
      width: "100%",
      backgroundColor,
      position: "static",
      paddingTop: [1.5, 2.5, 3, 3],
      paddingBottom: [1.5, 2.5, 3, 3],
      paddingLeft: [2, 3, 6, 9],
      paddingRight: [2, 3, 6, 9],
      transition: "box-shadow 0.2s",
      boxShadow: isScrolled ? "md" : void 0
    },
    /* @__PURE__ */ React86__default.createElement(Box, { flex: "1" }, /* @__PURE__ */ React86__default.createElement(Box, { width: "fit-content" }, leftButton)),
    /* @__PURE__ */ React86__default.createElement(
      DrawerHeader,
      {
        as: "h2",
        fontSize: "md",
        fontWeight: "bold",
        textAlign: "center",
        flex: "2",
        margin: 0,
        padding: 0
      },
      title
    ),
    /* @__PURE__ */ React86__default.createElement(Box, { flex: "1" }, /* @__PURE__ */ React86__default.createElement(Box, { width: "fit-content", marginLeft: "auto" }, rightButton))
  );
};
var DrawerCloseButton2 = () => {
  const { onClose } = useModalContext();
  const { t: t2 } = useTranslation();
  const [isScreenSizeMinSm] = useMediaQuery(
    `(min-width: ${tokens11__default.size.breakpoint.sm})`
  );
  if (isScreenSizeMinSm) {
    return /* @__PURE__ */ React86__default.createElement(
      Button2,
      {
        variant: "ghost",
        leftIcon: /* @__PURE__ */ React86__default.createElement(CloseFill24Icon, null),
        onClick: onClose,
        "aria-label": t2(texts20.close),
        width: "fit-content",
        marginLeft: "auto"
      },
      t2(texts20.close)
    );
  }
  return /* @__PURE__ */ React86__default.createElement(
    IconButton,
    {
      variant: "ghost",
      icon: /* @__PURE__ */ React86__default.createElement(CloseFill30Icon, null),
      onClick: onClose,
      "aria-label": t2(texts20.close)
    }
  );
};
var DrawerBackButton = () => {
  const { onClose } = useModalContext();
  const { t: t2 } = useTranslation();
  const [isScreenSizeMinSm] = useMediaQuery(
    `(min-width: ${tokens11__default.size.breakpoint.sm})`
  );
  if (isScreenSizeMinSm) {
    return /* @__PURE__ */ React86__default.createElement(
      Button2,
      {
        variant: "ghost",
        leftIcon: /* @__PURE__ */ React86__default.createElement(ArrowLeftFill24Icon, null),
        onClick: onClose,
        "aria-label": t2(texts20.backAriaLabel),
        width: "fit-content",
        marginLeft: "auto"
      },
      t2(texts20.back)
    );
  }
  return /* @__PURE__ */ React86__default.createElement(
    IconButton,
    {
      variant: "ghost",
      icon: /* @__PURE__ */ React86__default.createElement(ArrowLeftFill30Icon, null),
      onClick: onClose,
      "aria-label": t2(texts20.close)
    }
  );
};
var texts20 = createTexts({
  close: {
    nb: "Lukk",
    nn: "Lukk",
    en: "Close",
    sv: "St\xE4ng"
  },
  closeAriaLabel: {
    nb: "Lukk vindu",
    nn: "Lukk vindauge",
    en: "Close window",
    sv: "St\xE4ng f\xF6nster"
  },
  back: {
    nb: "Tilbake",
    nn: "Tilbake",
    en: "Back",
    sv: "Tillbaka"
  },
  backAriaLabel: {
    nb: "G\xE5 tilbake",
    nn: "G\xE5 tilbake",
    en: "Go back",
    sv: "G\xE5 tillbaka"
  }
});
var SimpleDrawer = ({
  placement,
  children,
  title,
  body,
  ...props
}) => {
  return /* @__PURE__ */ React86__default.createElement(Drawer, { placement, ...props }, /* @__PURE__ */ React86__default.createElement(DrawerOverlay, null), /* @__PURE__ */ React86__default.createElement(DrawerContent, null, /* @__PURE__ */ React86__default.createElement(DrawerCloseButton, null), title && /* @__PURE__ */ React86__default.createElement(ModalHeader, null, title), /* @__PURE__ */ React86__default.createElement(DrawerBody, { ...body }, children)));
};
var EXPIRATION_DELAY = 1e3 * 60 * 60 * 24 * 30;
var Nudge = ({
  introducedDate,
  name,
  children,
  content,
  actions,
  ...props
}) => {
  const { t: t2 } = useTranslation();
  if (new Date(introducedDate).getTime() + EXPIRATION_DELAY < Date.now()) {
    if (process.env.NODE_ENV === "development") {
      console.warn(
        `The nudge ${name} has been used for longer than 30 days. Please remove it from the codebase.
        
        This is a development only warning, and will not be shown in production.`
      );
    }
    return null;
  }
  return /* @__PURE__ */ React86__default.createElement(
    Popover$1,
    {
      arrowSize: 12,
      arrowShadowColor: "none",
      defaultIsOpen: true,
      ...props
    },
    /* @__PURE__ */ React86__default.createElement(PopoverAnchor, null, children),
    /* @__PURE__ */ React86__default.createElement(PopoverContent, { borderRadius: "sm" }, /* @__PURE__ */ React86__default.createElement(DarkMode, null, /* @__PURE__ */ React86__default.createElement(PopoverArrow, null), /* @__PURE__ */ React86__default.createElement(PopoverCloseButton, null), /* @__PURE__ */ React86__default.createElement(PopoverBody, { margin: 1 }, /* @__PURE__ */ React86__default.createElement(Box, { marginRight: 4 }, content), /* @__PURE__ */ React86__default.createElement(Box, { marginTop: 1.5 }, actions ?? /* @__PURE__ */ React86__default.createElement(ButtonGroup, null, /* @__PURE__ */ React86__default.createElement(Button2, { variant: "tertiary", size: "xs" }, t2(texts21.close)), /* @__PURE__ */ React86__default.createElement(Button2, { variant: "secondary", size: "xs", fontWeight: "bold" }, t2(texts21.showMe)))))))
  );
};
var texts21 = createTexts({
  close: {
    nb: "Lukk",
    nn: "Lukk",
    sv: "St\xE4ng",
    en: "Close"
  },
  showMe: {
    nb: "Vis meg",
    nn: "Vis meg",
    sv: "Visa mig",
    en: "Show me"
  }
});
var WizardNudge = ({
  children,
  name,
  onClose,
  content,
  ...props
}) => {
  const [currentStep, setCurrentStep] = useState(1);
  const totalSteps = content.length;
  const isLastStep = totalSteps === currentStep;
  const onNext = () => setCurrentStep((prev) => prev + 1);
  return /* @__PURE__ */ React86__default.createElement(
    Nudge,
    {
      onClose,
      name,
      content: content[currentStep - 1],
      actions: /* @__PURE__ */ React86__default.createElement(Flex, { gap: 3, alignItems: "center" }, /* @__PURE__ */ React86__default.createElement(
        ProgressIndicator,
        {
          activeStep: currentStep,
          numberOfSteps: totalSteps
        }
      ), /* @__PURE__ */ React86__default.createElement(Box, null, /* @__PURE__ */ React86__default.createElement(NextOrCloseButton, { isLastStep, onNext }))),
      ...props
    },
    children
  );
};
var NextOrCloseButton = ({ isLastStep, onNext }) => {
  const { onClose } = usePopoverContext();
  const { t: t2 } = useTranslation();
  return /* @__PURE__ */ React86__default.createElement(
    Button2,
    {
      variant: "tertiary",
      size: "xs",
      leftIcon: isLastStep ? void 0 : /* @__PURE__ */ React86__default.createElement(ArrowRightFill18Icon, null),
      onClick: isLastStep ? onClose : onNext,
      width: "fit-content"
    },
    t2(isLastStep ? texts22.finish : texts22.nextStep)
  );
};
var texts22 = createTexts({
  nextStep: {
    nb: "Neste",
    nn: "Neste",
    sv: "N\xE4sta",
    en: "Next"
  },
  finish: {
    nb: "Fullf\xF8r",
    nn: "Fullf\xF8r",
    sv: "Fullf\xF6r",
    en: "Finish"
  }
});
var Pagination = ({
  totalPages,
  selectedPage,
  onPageChange
}) => {
  const { t: t2 } = useTranslation();
  const style = useMultiStyleConfig("Pagination", { selectedPage });
  const hasPreviousPage = selectedPage > 1;
  const hasNextPage = selectedPage < totalPages;
  const renderPaginationButtons = () => {
    const displayPageNumbers = [];
    const maxVisiblePages = 8;
    if (totalPages <= maxVisiblePages) {
      displayPageNumbers.push(
        ...Array.from({ length: totalPages }, (_, i) => i + 1)
      );
    } else {
      if (selectedPage <= Math.floor(maxVisiblePages / 2) + 1) {
        displayPageNumbers.push(
          ...Array.from({ length: maxVisiblePages - 1 }, (_, i) => i + 1)
        );
        displayPageNumbers.push("...");
        displayPageNumbers.push(totalPages);
      } else if (selectedPage >= totalPages - Math.floor(maxVisiblePages / 2)) {
        displayPageNumbers.push(1);
        displayPageNumbers.push("...");
        displayPageNumbers.push(
          ...Array.from(
            { length: maxVisiblePages - 1 },
            (_, i) => totalPages - maxVisiblePages + 2 + i
          )
        );
      } else {
        displayPageNumbers.push(1);
        displayPageNumbers.push("...");
        for (let i = selectedPage - Math.floor((maxVisiblePages - 3) / 2); i <= selectedPage + Math.floor((maxVisiblePages - 3) / 2); i++) {
          displayPageNumbers.push(i);
        }
        displayPageNumbers.push("...");
        displayPageNumbers.push(totalPages);
      }
    }
    return displayPageNumbers.map(
      (pageNumber, index) => pageNumber === "..." ? /* @__PURE__ */ React86__default.createElement(ListItem, { key: index, sx: style.listItem }, /* @__PURE__ */ React86__default.createElement(Center, null, "...")) : /* @__PURE__ */ React86__default.createElement(
        Link,
        {
          key: index,
          as: ListItem,
          onClick: () => {
            if (pageNumber !== "...") {
              onPageChange(+pageNumber);
            }
          },
          padding: pageNumber === "..." ? 0 : void 0,
          sx: pageNumber === selectedPage ? style.activeButton : style.link
        },
        pageNumber
      )
    );
  };
  return /* @__PURE__ */ React86__default.createElement(Flex, { as: "nav", "aria-label": "pagination" }, /* @__PURE__ */ React86__default.createElement(
    UnorderedList,
    {
      display: "flex",
      listStyleType: "none",
      gap: [0, 1],
      padding: 0,
      margin: 0
    },
    /* @__PURE__ */ React86__default.createElement(ListItem, { "aria-label": t2(texts23.previousPage) }, /* @__PURE__ */ React86__default.createElement(
      TextLink,
      {
        onClick: () => onPageChange(selectedPage - 1),
        sx: hasPreviousPage ? style.link : style.disabled
      },
      /* @__PURE__ */ React86__default.createElement(DropdownLeftFill18Icon, { sx: style.icon })
    )),
    renderPaginationButtons(),
    /* @__PURE__ */ React86__default.createElement(ListItem, { "aria-label": t2(texts23.nextPage) }, /* @__PURE__ */ React86__default.createElement(
      TextLink,
      {
        onClick: () => onPageChange(selectedPage + 1),
        sx: hasNextPage ? style.link : style.disabled
      },
      /* @__PURE__ */ React86__default.createElement(DropdownRightFill18Icon, { sx: style.icon })
    ))
  ));
};
var texts23 = createTexts({
  previousPage: {
    nb: "Forrige side",
    nn: "F\xF8rre side",
    en: "Previous page",
    sv: "F\xF6reg\xE5ende sida"
  },
  nextPage: {
    nb: "Neste side",
    nn: "Neste side",
    en: "Next page",
    sv: "N\xE4sta sida"
  }
});
var ProgressDot = ({ isActive }) => {
  const style = useMultiStyleConfig("ProgressIndicator");
  return /* @__PURE__ */ React86__default.createElement(
    Box,
    {
      as: "svg",
      display: "block",
      __css: style.progressDot,
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 100 100",
      "aria-current": isActive ? "step" : void 0
    },
    /* @__PURE__ */ React86__default.createElement(Box, { as: "circle", cx: "50", cy: "50", r: "50" })
  );
};

// src/progress-indicator/ProgressIndicator.tsx
var ProgressIndicator = ({
  numberOfSteps,
  activeStep
}) => {
  const { t: t2 } = useTranslation();
  const style = useMultiStyleConfig("ProgressIndicator");
  return /* @__PURE__ */ React86__default.createElement(
    Box,
    {
      __css: style.root,
      role: "progressbar",
      "aria-valuemin": 1,
      "aria-valuemax": numberOfSteps,
      "aria-valuenow": activeStep,
      "aria-valuetext": t2(texts24.stepsOf(activeStep, numberOfSteps))
    },
    /* @__PURE__ */ React86__default.createElement(Box, { __css: style.container }, Array.from({ length: numberOfSteps }, (_, i) => /* @__PURE__ */ React86__default.createElement(
      ProgressDot,
      {
        key: i,
        "aria-value": i + 1,
        isActive: activeStep === i + 1
      }
    )))
  );
};
var texts24 = createTexts({
  stepsOf: (activeStep, numberOfSteps) => ({
    nb: `Steg ${activeStep} av ${numberOfSteps}`,
    nn: `Steg ${activeStep} av ${numberOfSteps}`,
    sv: `Steg ${activeStep} av ${numberOfSteps}`,
    en: `Step ${activeStep} of ${numberOfSteps}`
  })
});
var SporProvider = ({
  theme: theme3 = theme,
  language = "nb" /* NorwegianBokmal */,
  brand = "VyDigital" /* VyDigital */,
  children,
  ...props
}) => {
  const brandCustomizations = brandTheme[brand] ?? {};
  const extendedTheme = deepmerge(theme3, brandCustomizations);
  return /* @__PURE__ */ React86__default.createElement(LanguageProvider, { language }, /* @__PURE__ */ React86__default.createElement(ChakraProvider, { theme: extendedTheme, ...props }, /* @__PURE__ */ React86__default.createElement(Global, { styles: fontFaces }), children));
};
var StepperContext = React86__default.createContext(null);
var StepperProvider = ({
  activeStep,
  children,
  onClick,
  numberOfSteps,
  variant
}) => {
  return /* @__PURE__ */ React86__default.createElement(
    StepperContext.Provider,
    {
      value: { activeStep, onClick, numberOfSteps, variant }
    },
    children
  );
};
var useStepper = () => {
  const context = React86__default.useContext(StepperContext);
  if (!context) {
    throw new Error(
      "useStepper must be used within a StepperProvider. Most likely, you forgot to wrap your StepperStep in a Stepper component"
    );
  }
  return context;
};

// src/stepper/Stepper.tsx
var Stepper = ({
  onClick = () => {
  },
  onBackButtonClick,
  steps,
  activeStep: activeStepAsStringOrNumber,
  title,
  heading,
  headingLevel,
  variant,
  isDisabled
}) => {
  const style = useMultiStyleConfig("Stepper", { variant });
  const numberOfSteps = steps.length;
  const activeStep = Number(activeStepAsStringOrNumber);
  const { t: t2 } = useTranslation();
  const hideBackButtonOnFirstStep = activeStep === 1 && !onBackButtonClick;
  const shownHeading = heading || title;
  return /* @__PURE__ */ React86__default.createElement(Box, { sx: style.root }, /* @__PURE__ */ React86__default.createElement(
    StepperProvider,
    {
      onClick,
      activeStep,
      variant,
      numberOfSteps
    },
    /* @__PURE__ */ React86__default.createElement(Box, { sx: style.container }, /* @__PURE__ */ React86__default.createElement(Box, { sx: style.innerContainer }, /* @__PURE__ */ React86__default.createElement(
      Flex,
      {
        justifyContent: "space-between",
        alignItems: "center",
        gap: 2,
        flex: 1
      },
      /* @__PURE__ */ React86__default.createElement(
        IconButton,
        {
          "aria-label": t2(texts25.back),
          icon: /* @__PURE__ */ React86__default.createElement(ArrowLeftFill24Icon, null),
          variant: "ghost",
          size: "sm",
          visibility: hideBackButtonOnFirstStep ? "hidden" : "visible",
          onClick: () => {
            const stepToGoTo = activeStep - 1;
            if (onBackButtonClick) {
              onBackButtonClick(stepToGoTo);
            }
            onClick(stepToGoTo);
          }
        }
      ),
      shownHeading && /* @__PURE__ */ React86__default.createElement(Text4, { flex: 1, variant: "sm", as: headingLevel, sx: style.title }, shownHeading),
      /* @__PURE__ */ React86__default.createElement(Box, { sx: style.stepCounter }, t2(texts25.stepsOf(activeStep, numberOfSteps)))
    )), /* @__PURE__ */ React86__default.createElement(Flex, { justifyContent: "center", display: ["none", null, "flex"] }, steps.map((step, index) => /* @__PURE__ */ React86__default.createElement(
      StepperStep,
      {
        key: index,
        stepNumber: index + 1,
        variant,
        "aria-current": index + 1 === activeStep ? "step" : void 0,
        isDisabled
      },
      step
    ))))
  ));
};
var texts25 = createTexts({
  stepsOf: (activeStep, numberOfSteps) => ({
    nb: `Steg ${activeStep}/${numberOfSteps}`,
    nn: `Steg ${activeStep}/${numberOfSteps}`,
    sv: `Steg ${activeStep}/${numberOfSteps}`,
    en: `Step ${activeStep}/${numberOfSteps}`
  }),
  back: {
    nb: "Tilbake",
    nn: "Tilbake",
    sv: "Tillbaka",
    en: "Back"
  }
});
var StepperStep = ({
  children,
  stepNumber,
  variant,
  isDisabled: isDisabledOverride
}) => {
  const { activeStep, onClick } = useStepper();
  const state2 = getState(stepNumber, activeStep);
  const style = useMultiStyleConfig("Stepper", {
    state: state2,
    variant
  });
  const disabledTextColor = useColorModeValue(
    "blackAlpha.400",
    "whiteAlpha.400"
  );
  const iconColor = useColorModeValue("blackAlpha.200", "whiteAlpha.200");
  const isDisabled = state2 !== "active" && isDisabledOverride || state2 === "disabled";
  return /* @__PURE__ */ React86__default.createElement(Box, { sx: style.stepContainer }, stepNumber > 1 && /* @__PURE__ */ React86__default.createElement(
    DropdownRightFill18Icon,
    {
      marginX: 5,
      display: ["none", null, "block"],
      color: iconColor
    }
  ), isDisabled ? /* @__PURE__ */ React86__default.createElement(
    Text4,
    {
      variant: "xs",
      fontSize: "16px",
      color: disabledTextColor,
      cursor: "default",
      paddingX: 2
    },
    children
  ) : /* @__PURE__ */ React86__default.createElement(
    Button2,
    {
      size: "xs",
      variant: state2 === "active" ? "primary" : "ghost",
      onClick: state2 === "completed" ? () => onClick(stepNumber) : void 0,
      pointerEvents: state2 === "active" ? "none" : "auto",
      tabIndex: state2 === "active" ? -1 : void 0,
      sx: style.stepButton
    },
    children
  ));
};
var getState = (stepNumber, activeStep) => {
  if (stepNumber < activeStep) {
    return "completed";
  }
  if (stepNumber === activeStep) {
    return "active";
  }
  return "disabled";
};
var Tabs = forwardRef((props, ref) => {
  return /* @__PURE__ */ React86.createElement(Tabs$1, { ...props, ref });
});
var Table = forwardRef((props, ref) => {
  const { variant, size: size2, colorScheme, children, ...rest } = props;
  return /* @__PURE__ */ React86__default.createElement(Box, { ...rest, ...getStyleProps(props) }, /* @__PURE__ */ React86__default.createElement(Box, { overflowX: "auto", role: "region" }, /* @__PURE__ */ React86__default.createElement(
    Table$1,
    {
      variant,
      size: size2,
      colorScheme,
      ref
    },
    children
  )));
});
function getStyleProps(props) {
  return props.variant === "outline" ? {
    border: "1px solid",
    borderColor: props.colorScheme === "grey" ? "silver" : "blackAlpha.200",
    overflow: "hidden",
    borderRadius: "md"
  } : {};
}

// ../../node_modules/@chakra-ui/shared-utils/dist/index.mjs
function isObject(value) {
  const type = typeof value;
  return value != null && (type === "object" || type === "function") && !Array.isArray(value);
}

// ../../node_modules/@chakra-ui/theme/dist/chunk-SIH73G3H.mjs
var transitionProperty = {
  common: "background-color, border-color, color, fill, stroke, opacity, box-shadow, transform",
  colors: "background-color, border-color, color, fill, stroke",
  dimensions: "width, height",
  position: "left, right, top, bottom",
  background: "background-color, background-image, background-position"
};
var transitionTimingFunction = {
  "ease-in": "cubic-bezier(0.4, 0, 1, 1)",
  "ease-out": "cubic-bezier(0, 0, 0.2, 1)",
  "ease-in-out": "cubic-bezier(0.4, 0, 0.2, 1)"
};
var transitionDuration = {
  "ultra-fast": "50ms",
  faster: "100ms",
  fast: "150ms",
  normal: "200ms",
  slow: "300ms",
  slower: "400ms",
  "ultra-slow": "500ms"
};
var transition = {
  property: transitionProperty,
  easing: transitionTimingFunction,
  duration: transitionDuration
};
var transition_default = transition;

// ../../node_modules/@chakra-ui/theme/dist/chunk-45VJLTIL.mjs
var zIndices = {
  hide: -1,
  auto: "auto",
  base: 0,
  docked: 10,
  dropdown: 1e3,
  sticky: 1100,
  banner: 1200,
  overlay: 1300,
  modal: 1400,
  popover: 1500,
  skipLink: 1600,
  toast: 1700,
  tooltip: 1800
};
var z_index_default = zIndices;

// ../../node_modules/@chakra-ui/theme/dist/chunk-B75T2J64.mjs
var borders = {
  none: 0,
  "1px": "1px solid",
  "2px": "2px solid",
  "4px": "4px solid",
  "8px": "8px solid"
};
var borders_default = borders;

// ../../node_modules/@chakra-ui/theme/dist/chunk-TXLFBUTF.mjs
var breakpoints = {
  base: "0em",
  sm: "30em",
  md: "48em",
  lg: "62em",
  xl: "80em",
  "2xl": "96em"
};
var breakpoints_default = breakpoints;

// ../../node_modules/@chakra-ui/theme/dist/chunk-E47HH2QS.mjs
var colors = {
  transparent: "transparent",
  current: "currentColor",
  black: "#000000",
  white: "#FFFFFF",
  whiteAlpha: {
    50: "rgba(255, 255, 255, 0.04)",
    100: "rgba(255, 255, 255, 0.06)",
    200: "rgba(255, 255, 255, 0.08)",
    300: "rgba(255, 255, 255, 0.16)",
    400: "rgba(255, 255, 255, 0.24)",
    500: "rgba(255, 255, 255, 0.36)",
    600: "rgba(255, 255, 255, 0.48)",
    700: "rgba(255, 255, 255, 0.64)",
    800: "rgba(255, 255, 255, 0.80)",
    900: "rgba(255, 255, 255, 0.92)"
  },
  blackAlpha: {
    50: "rgba(0, 0, 0, 0.04)",
    100: "rgba(0, 0, 0, 0.06)",
    200: "rgba(0, 0, 0, 0.08)",
    300: "rgba(0, 0, 0, 0.16)",
    400: "rgba(0, 0, 0, 0.24)",
    500: "rgba(0, 0, 0, 0.36)",
    600: "rgba(0, 0, 0, 0.48)",
    700: "rgba(0, 0, 0, 0.64)",
    800: "rgba(0, 0, 0, 0.80)",
    900: "rgba(0, 0, 0, 0.92)"
  },
  gray: {
    50: "#F7FAFC",
    100: "#EDF2F7",
    200: "#E2E8F0",
    300: "#CBD5E0",
    400: "#A0AEC0",
    500: "#718096",
    600: "#4A5568",
    700: "#2D3748",
    800: "#1A202C",
    900: "#171923"
  },
  red: {
    50: "#FFF5F5",
    100: "#FED7D7",
    200: "#FEB2B2",
    300: "#FC8181",
    400: "#F56565",
    500: "#E53E3E",
    600: "#C53030",
    700: "#9B2C2C",
    800: "#822727",
    900: "#63171B"
  },
  orange: {
    50: "#FFFAF0",
    100: "#FEEBC8",
    200: "#FBD38D",
    300: "#F6AD55",
    400: "#ED8936",
    500: "#DD6B20",
    600: "#C05621",
    700: "#9C4221",
    800: "#7B341E",
    900: "#652B19"
  },
  yellow: {
    50: "#FFFFF0",
    100: "#FEFCBF",
    200: "#FAF089",
    300: "#F6E05E",
    400: "#ECC94B",
    500: "#D69E2E",
    600: "#B7791F",
    700: "#975A16",
    800: "#744210",
    900: "#5F370E"
  },
  green: {
    50: "#F0FFF4",
    100: "#C6F6D5",
    200: "#9AE6B4",
    300: "#68D391",
    400: "#48BB78",
    500: "#38A169",
    600: "#2F855A",
    700: "#276749",
    800: "#22543D",
    900: "#1C4532"
  },
  teal: {
    50: "#E6FFFA",
    100: "#B2F5EA",
    200: "#81E6D9",
    300: "#4FD1C5",
    400: "#38B2AC",
    500: "#319795",
    600: "#2C7A7B",
    700: "#285E61",
    800: "#234E52",
    900: "#1D4044"
  },
  blue: {
    50: "#ebf8ff",
    100: "#bee3f8",
    200: "#90cdf4",
    300: "#63b3ed",
    400: "#4299e1",
    500: "#3182ce",
    600: "#2b6cb0",
    700: "#2c5282",
    800: "#2a4365",
    900: "#1A365D"
  },
  cyan: {
    50: "#EDFDFD",
    100: "#C4F1F9",
    200: "#9DECF9",
    300: "#76E4F7",
    400: "#0BC5EA",
    500: "#00B5D8",
    600: "#00A3C4",
    700: "#0987A0",
    800: "#086F83",
    900: "#065666"
  },
  purple: {
    50: "#FAF5FF",
    100: "#E9D8FD",
    200: "#D6BCFA",
    300: "#B794F4",
    400: "#9F7AEA",
    500: "#805AD5",
    600: "#6B46C1",
    700: "#553C9A",
    800: "#44337A",
    900: "#322659"
  },
  pink: {
    50: "#FFF5F7",
    100: "#FED7E2",
    200: "#FBB6CE",
    300: "#F687B3",
    400: "#ED64A6",
    500: "#D53F8C",
    600: "#B83280",
    700: "#97266D",
    800: "#702459",
    900: "#521B41"
  },
  linkedin: {
    50: "#E8F4F9",
    100: "#CFEDFB",
    200: "#9BDAF3",
    300: "#68C7EC",
    400: "#34B3E4",
    500: "#00A0DC",
    600: "#008CC9",
    700: "#0077B5",
    800: "#005E93",
    900: "#004471"
  },
  facebook: {
    50: "#E8F4F9",
    100: "#D9DEE9",
    200: "#B7C2DA",
    300: "#6482C0",
    400: "#4267B2",
    500: "#385898",
    600: "#314E89",
    700: "#29487D",
    800: "#223B67",
    900: "#1E355B"
  },
  messenger: {
    50: "#D0E6FF",
    100: "#B9DAFF",
    200: "#A2CDFF",
    300: "#7AB8FF",
    400: "#2E90FF",
    500: "#0078FF",
    600: "#0063D1",
    700: "#0052AC",
    800: "#003C7E",
    900: "#002C5C"
  },
  whatsapp: {
    50: "#dffeec",
    100: "#b9f5d0",
    200: "#90edb3",
    300: "#65e495",
    400: "#3cdd78",
    500: "#22c35e",
    600: "#179848",
    700: "#0c6c33",
    800: "#01421c",
    900: "#001803"
  },
  twitter: {
    50: "#E5F4FD",
    100: "#C8E9FB",
    200: "#A8DCFA",
    300: "#83CDF7",
    400: "#57BBF5",
    500: "#1DA1F2",
    600: "#1A94DA",
    700: "#1681BF",
    800: "#136B9E",
    900: "#0D4D71"
  },
  telegram: {
    50: "#E3F2F9",
    100: "#C5E4F3",
    200: "#A2D4EC",
    300: "#7AC1E4",
    400: "#47A9DA",
    500: "#0088CC",
    600: "#007AB8",
    700: "#006BA1",
    800: "#005885",
    900: "#003F5E"
  }
};
var colors_default = colors;

// ../../node_modules/@chakra-ui/theme/dist/chunk-VIVTPWHP.mjs
var radii = {
  none: "0",
  sm: "0.125rem",
  base: "0.25rem",
  md: "0.375rem",
  lg: "0.5rem",
  xl: "0.75rem",
  "2xl": "1rem",
  "3xl": "1.5rem",
  full: "9999px"
};
var radius_default = radii;

// ../../node_modules/@chakra-ui/theme/dist/chunk-IZUFFCXS.mjs
var shadows = {
  xs: "0 0 0 1px rgba(0, 0, 0, 0.05)",
  sm: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
  base: "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)",
  md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
  lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
  xl: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
  "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)",
  outline: "0 0 0 3px rgba(66, 153, 225, 0.6)",
  inner: "inset 0 2px 4px 0 rgba(0,0,0,0.06)",
  none: "none",
  "dark-lg": "rgba(0, 0, 0, 0.1) 0px 0px 0px 1px, rgba(0, 0, 0, 0.2) 0px 5px 10px, rgba(0, 0, 0, 0.4) 0px 15px 40px"
};
var shadows_default = shadows;

// ../../node_modules/@chakra-ui/theme/dist/chunk-HQ6WXDYV.mjs
var blur = {
  none: 0,
  sm: "4px",
  base: "8px",
  md: "12px",
  lg: "16px",
  xl: "24px",
  "2xl": "40px",
  "3xl": "64px"
};
var blur_default = blur;

// ../../node_modules/@chakra-ui/theme/dist/chunk-6XA2KDUD.mjs
var typography = {
  letterSpacings: {
    tighter: "-0.05em",
    tight: "-0.025em",
    normal: "0",
    wide: "0.025em",
    wider: "0.05em",
    widest: "0.1em"
  },
  lineHeights: {
    normal: "normal",
    none: 1,
    shorter: 1.25,
    short: 1.375,
    base: 1.5,
    tall: 1.625,
    taller: "2",
    "3": ".75rem",
    "4": "1rem",
    "5": "1.25rem",
    "6": "1.5rem",
    "7": "1.75rem",
    "8": "2rem",
    "9": "2.25rem",
    "10": "2.5rem"
  },
  fontWeights: {
    hairline: 100,
    thin: 200,
    light: 300,
    normal: 400,
    medium: 500,
    semibold: 600,
    bold: 700,
    extrabold: 800,
    black: 900
  },
  fonts: {
    heading: `-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
    body: `-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
    mono: `SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace`
  },
  fontSizes: {
    "3xs": "0.45rem",
    "2xs": "0.625rem",
    xs: "0.75rem",
    sm: "0.875rem",
    md: "1rem",
    lg: "1.125rem",
    xl: "1.25rem",
    "2xl": "1.5rem",
    "3xl": "1.875rem",
    "4xl": "2.25rem",
    "5xl": "3rem",
    "6xl": "3.75rem",
    "7xl": "4.5rem",
    "8xl": "6rem",
    "9xl": "8rem"
  }
};
var typography_default = typography;

// ../../node_modules/@chakra-ui/theme/dist/chunk-V7WMN6TQ.mjs
var spacing = {
  px: "1px",
  0.5: "0.125rem",
  1: "0.25rem",
  1.5: "0.375rem",
  2: "0.5rem",
  2.5: "0.625rem",
  3: "0.75rem",
  3.5: "0.875rem",
  4: "1rem",
  5: "1.25rem",
  6: "1.5rem",
  7: "1.75rem",
  8: "2rem",
  9: "2.25rem",
  10: "2.5rem",
  12: "3rem",
  14: "3.5rem",
  16: "4rem",
  20: "5rem",
  24: "6rem",
  28: "7rem",
  32: "8rem",
  36: "9rem",
  40: "10rem",
  44: "11rem",
  48: "12rem",
  52: "13rem",
  56: "14rem",
  60: "15rem",
  64: "16rem",
  72: "18rem",
  80: "20rem",
  96: "24rem"
};

// ../../node_modules/@chakra-ui/theme/dist/chunk-NJCYBKFH.mjs
var largeSizes = {
  max: "max-content",
  min: "min-content",
  full: "100%",
  "3xs": "14rem",
  "2xs": "16rem",
  xs: "20rem",
  sm: "24rem",
  md: "28rem",
  lg: "32rem",
  xl: "36rem",
  "2xl": "42rem",
  "3xl": "48rem",
  "4xl": "56rem",
  "5xl": "64rem",
  "6xl": "72rem",
  "7xl": "80rem",
  "8xl": "90rem",
  prose: "60ch"
};
var container = {
  sm: "640px",
  md: "768px",
  lg: "1024px",
  xl: "1280px"
};
var sizes = {
  ...spacing,
  ...largeSizes,
  container
};
var sizes_default = sizes;

// ../../node_modules/@chakra-ui/theme/dist/chunk-3WO5B3NB.mjs
var foundations = {
  breakpoints: breakpoints_default,
  zIndices: z_index_default,
  radii: radius_default,
  blur: blur_default,
  colors: colors_default,
  ...typography_default,
  sizes: sizes_default,
  shadows: shadows_default,
  space: spacing,
  borders: borders_default,
  transition: transition_default
};

// ../../node_modules/@chakra-ui/styled-system/dist/index.mjs
__toESM(require_lodash(), 1);
__toESM(require_lodash(), 1);
var import_lodash3 = __toESM(require_lodash(), 1);
__toESM(require_lodash(), 1);
var isImportant = (value) => /!(important)?$/.test(value);
var withoutImportant = (value) => typeof value === "string" ? value.replace(/!(important)?$/, "").trim() : value;
var tokenToCSSVar = (scale, value) => (theme3) => {
  const valueStr = String(value);
  const important = isImportant(valueStr);
  const valueWithoutImportant = withoutImportant(valueStr);
  const key = scale ? `${scale}.${valueWithoutImportant}` : valueWithoutImportant;
  let transformed = isObject(theme3.__cssMap) && key in theme3.__cssMap ? theme3.__cssMap[key].varRef : value;
  transformed = withoutImportant(transformed);
  return important ? `${transformed} !important` : transformed;
};
function createTransform(options) {
  const { scale, transform: transform2, compose } = options;
  const fn = (value, theme3) => {
    var _a6;
    const _value = tokenToCSSVar(scale, value)(theme3);
    let result = (_a6 = transform2 == null ? void 0 : transform2(_value, theme3)) != null ? _a6 : _value;
    if (compose) {
      result = compose(result, theme3);
    }
    return result;
  };
  return fn;
}
var pipe = (...fns) => (v) => fns.reduce((a, b) => b(a), v);
function toConfig(scale, transform2) {
  return (property) => {
    const result = { property, scale };
    result.transform = createTransform({
      scale,
      transform: transform2
    });
    return result;
  };
}
var getRtl = ({ rtl, ltr }) => (theme3) => theme3.direction === "rtl" ? rtl : ltr;
function logical(options) {
  const { property, scale, transform: transform2 } = options;
  return {
    scale,
    property: getRtl(property),
    transform: scale ? createTransform({
      scale,
      compose: transform2
    }) : transform2
  };
}
var transformTemplate = [
  "rotate(var(--chakra-rotate, 0))",
  "scaleX(var(--chakra-scale-x, 1))",
  "scaleY(var(--chakra-scale-y, 1))",
  "skewX(var(--chakra-skew-x, 0))",
  "skewY(var(--chakra-skew-y, 0))"
];
function getTransformTemplate() {
  return [
    "translateX(var(--chakra-translate-x, 0))",
    "translateY(var(--chakra-translate-y, 0))",
    ...transformTemplate
  ].join(" ");
}
function getTransformGpuTemplate() {
  return [
    "translate3d(var(--chakra-translate-x, 0), var(--chakra-translate-y, 0), 0)",
    ...transformTemplate
  ].join(" ");
}
var filterTemplate = {
  "--chakra-blur": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-invert": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-sepia": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-drop-shadow": "var(--chakra-empty,/*!*/ /*!*/)",
  filter: [
    "var(--chakra-blur)",
    "var(--chakra-brightness)",
    "var(--chakra-contrast)",
    "var(--chakra-grayscale)",
    "var(--chakra-hue-rotate)",
    "var(--chakra-invert)",
    "var(--chakra-saturate)",
    "var(--chakra-sepia)",
    "var(--chakra-drop-shadow)"
  ].join(" ")
};
var backdropFilterTemplate = {
  backdropFilter: [
    "var(--chakra-backdrop-blur)",
    "var(--chakra-backdrop-brightness)",
    "var(--chakra-backdrop-contrast)",
    "var(--chakra-backdrop-grayscale)",
    "var(--chakra-backdrop-hue-rotate)",
    "var(--chakra-backdrop-invert)",
    "var(--chakra-backdrop-opacity)",
    "var(--chakra-backdrop-saturate)",
    "var(--chakra-backdrop-sepia)"
  ].join(" "),
  "--chakra-backdrop-blur": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-invert": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-opacity": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-sepia": "var(--chakra-empty,/*!*/ /*!*/)"
};
function getRingTemplate(value) {
  return {
    "--chakra-ring-offset-shadow": `var(--chakra-ring-inset) 0 0 0 var(--chakra-ring-offset-width) var(--chakra-ring-offset-color)`,
    "--chakra-ring-shadow": `var(--chakra-ring-inset) 0 0 0 calc(var(--chakra-ring-width) + var(--chakra-ring-offset-width)) var(--chakra-ring-color)`,
    "--chakra-ring-width": value,
    boxShadow: [
      `var(--chakra-ring-offset-shadow)`,
      `var(--chakra-ring-shadow)`,
      `var(--chakra-shadow, 0 0 #0000)`
    ].join(", ")
  };
}
var flexDirectionTemplate = {
  "row-reverse": {
    space: "--chakra-space-x-reverse",
    divide: "--chakra-divide-x-reverse"
  },
  "column-reverse": {
    space: "--chakra-space-y-reverse",
    divide: "--chakra-divide-y-reverse"
  }
};
var directionMap = {
  "to-t": "to top",
  "to-tr": "to top right",
  "to-r": "to right",
  "to-br": "to bottom right",
  "to-b": "to bottom",
  "to-bl": "to bottom left",
  "to-l": "to left",
  "to-tl": "to top left"
};
var valueSet = new Set(Object.values(directionMap));
var globalSet = /* @__PURE__ */ new Set([
  "none",
  "-moz-initial",
  "inherit",
  "initial",
  "revert",
  "unset"
]);
var trimSpace = (str) => str.trim();
function parseGradient(value, theme3) {
  if (value == null || globalSet.has(value))
    return value;
  const prevent = isCSSFunction(value) || globalSet.has(value);
  if (!prevent)
    return `url('${value}')`;
  const regex = /(^[a-z-A-Z]+)\((.*)\)/g;
  const results = regex.exec(value);
  const type = results == null ? void 0 : results[1];
  const values = results == null ? void 0 : results[2];
  if (!type || !values)
    return value;
  const _type = type.includes("-gradient") ? type : `${type}-gradient`;
  const [maybeDirection, ...stops] = values.split(",").map(trimSpace).filter(Boolean);
  if ((stops == null ? void 0 : stops.length) === 0)
    return value;
  const direction2 = maybeDirection in directionMap ? directionMap[maybeDirection] : maybeDirection;
  stops.unshift(direction2);
  const _values = stops.map((stop) => {
    if (valueSet.has(stop))
      return stop;
    const firstStop = stop.indexOf(" ");
    const [_color, _stop] = firstStop !== -1 ? [stop.substr(0, firstStop), stop.substr(firstStop + 1)] : [stop];
    const _stopOrFunc = isCSSFunction(_stop) ? _stop : _stop && _stop.split(" ");
    const key = `colors.${_color}`;
    const color2 = key in theme3.__cssMap ? theme3.__cssMap[key].varRef : _color;
    return _stopOrFunc ? [
      color2,
      ...Array.isArray(_stopOrFunc) ? _stopOrFunc : [_stopOrFunc]
    ].join(" ") : color2;
  });
  return `${_type}(${_values.join(", ")})`;
}
var isCSSFunction = (value) => {
  return typeof value === "string" && value.includes("(") && value.includes(")");
};
var gradientTransform = (value, theme3) => parseGradient(value, theme3 != null ? theme3 : {});
function isCssVar(value) {
  return /^var\(--.+\)$/.test(value);
}
var analyzeCSSValue = (value) => {
  const num = parseFloat(value.toString());
  const unit = value.toString().replace(String(num), "");
  return { unitless: !unit, value: num, unit };
};
var wrap = (str) => (value) => `${str}(${value})`;
var transformFunctions = {
  filter(value) {
    return value !== "auto" ? value : filterTemplate;
  },
  backdropFilter(value) {
    return value !== "auto" ? value : backdropFilterTemplate;
  },
  ring(value) {
    return getRingTemplate(transformFunctions.px(value));
  },
  bgClip(value) {
    return value === "text" ? { color: "transparent", backgroundClip: "text" } : { backgroundClip: value };
  },
  transform(value) {
    if (value === "auto")
      return getTransformTemplate();
    if (value === "auto-gpu")
      return getTransformGpuTemplate();
    return value;
  },
  vh(value) {
    return value === "$100vh" ? "var(--chakra-vh)" : value;
  },
  px(value) {
    if (value == null)
      return value;
    const { unitless } = analyzeCSSValue(value);
    return unitless || typeof value === "number" ? `${value}px` : value;
  },
  fraction(value) {
    return !(typeof value === "number") || value > 1 ? value : `${value * 100}%`;
  },
  float(value, theme3) {
    const map = { left: "right", right: "left" };
    return theme3.direction === "rtl" ? map[value] : value;
  },
  degree(value) {
    if (isCssVar(value) || value == null)
      return value;
    const unitless = typeof value === "string" && !value.endsWith("deg");
    return typeof value === "number" || unitless ? `${value}deg` : value;
  },
  gradient: gradientTransform,
  blur: wrap("blur"),
  opacity: wrap("opacity"),
  brightness: wrap("brightness"),
  contrast: wrap("contrast"),
  dropShadow: wrap("drop-shadow"),
  grayscale: wrap("grayscale"),
  hueRotate: (value) => wrap("hue-rotate")(transformFunctions.degree(value)),
  invert: wrap("invert"),
  saturate: wrap("saturate"),
  sepia: wrap("sepia"),
  bgImage(value) {
    if (value == null)
      return value;
    const prevent = isCSSFunction(value) || globalSet.has(value);
    return !prevent ? `url(${value})` : value;
  },
  outline(value) {
    const isNoneOrZero = String(value) === "0" || String(value) === "none";
    return value !== null && isNoneOrZero ? { outline: "2px solid transparent", outlineOffset: "2px" } : { outline: value };
  },
  flexDirection(value) {
    var _a6;
    const { space: space22, divide: divide2 } = (_a6 = flexDirectionTemplate[value]) != null ? _a6 : {};
    const result = { flexDirection: value };
    if (space22)
      result[space22] = 1;
    if (divide2)
      result[divide2] = 1;
    return result;
  }
};
var t = {
  borderWidths: toConfig("borderWidths"),
  borderStyles: toConfig("borderStyles"),
  colors: toConfig("colors"),
  borders: toConfig("borders"),
  gradients: toConfig("gradients", transformFunctions.gradient),
  radii: toConfig("radii", transformFunctions.px),
  space: toConfig("space", pipe(transformFunctions.vh, transformFunctions.px)),
  spaceT: toConfig("space", pipe(transformFunctions.vh, transformFunctions.px)),
  degreeT(property) {
    return { property, transform: transformFunctions.degree };
  },
  prop(property, scale, transform2) {
    return {
      property,
      scale,
      ...scale && {
        transform: createTransform({ scale, transform: transform2 })
      }
    };
  },
  propT(property, transform2) {
    return { property, transform: transform2 };
  },
  sizes: toConfig("sizes", pipe(transformFunctions.vh, transformFunctions.px)),
  sizesT: toConfig("sizes", pipe(transformFunctions.vh, transformFunctions.fraction)),
  shadows: toConfig("shadows"),
  logical,
  blur: toConfig("blur", transformFunctions.blur)
};
var background = {
  background: t.colors("background"),
  backgroundColor: t.colors("backgroundColor"),
  backgroundImage: t.gradients("backgroundImage"),
  backgroundSize: true,
  backgroundPosition: true,
  backgroundRepeat: true,
  backgroundAttachment: true,
  backgroundClip: { transform: transformFunctions.bgClip },
  bgSize: t.prop("backgroundSize"),
  bgPosition: t.prop("backgroundPosition"),
  bg: t.colors("background"),
  bgColor: t.colors("backgroundColor"),
  bgPos: t.prop("backgroundPosition"),
  bgRepeat: t.prop("backgroundRepeat"),
  bgAttachment: t.prop("backgroundAttachment"),
  bgGradient: t.gradients("backgroundImage"),
  bgClip: { transform: transformFunctions.bgClip }
};
Object.assign(background, {
  bgImage: background.backgroundImage,
  bgImg: background.backgroundImage
});
var border = {
  border: t.borders("border"),
  borderWidth: t.borderWidths("borderWidth"),
  borderStyle: t.borderStyles("borderStyle"),
  borderColor: t.colors("borderColor"),
  borderRadius: t.radii("borderRadius"),
  borderTop: t.borders("borderTop"),
  borderBlockStart: t.borders("borderBlockStart"),
  borderTopLeftRadius: t.radii("borderTopLeftRadius"),
  borderStartStartRadius: t.logical({
    scale: "radii",
    property: {
      ltr: "borderTopLeftRadius",
      rtl: "borderTopRightRadius"
    }
  }),
  borderEndStartRadius: t.logical({
    scale: "radii",
    property: {
      ltr: "borderBottomLeftRadius",
      rtl: "borderBottomRightRadius"
    }
  }),
  borderTopRightRadius: t.radii("borderTopRightRadius"),
  borderStartEndRadius: t.logical({
    scale: "radii",
    property: {
      ltr: "borderTopRightRadius",
      rtl: "borderTopLeftRadius"
    }
  }),
  borderEndEndRadius: t.logical({
    scale: "radii",
    property: {
      ltr: "borderBottomRightRadius",
      rtl: "borderBottomLeftRadius"
    }
  }),
  borderRight: t.borders("borderRight"),
  borderInlineEnd: t.borders("borderInlineEnd"),
  borderBottom: t.borders("borderBottom"),
  borderBlockEnd: t.borders("borderBlockEnd"),
  borderBottomLeftRadius: t.radii("borderBottomLeftRadius"),
  borderBottomRightRadius: t.radii("borderBottomRightRadius"),
  borderLeft: t.borders("borderLeft"),
  borderInlineStart: {
    property: "borderInlineStart",
    scale: "borders"
  },
  borderInlineStartRadius: t.logical({
    scale: "radii",
    property: {
      ltr: ["borderTopLeftRadius", "borderBottomLeftRadius"],
      rtl: ["borderTopRightRadius", "borderBottomRightRadius"]
    }
  }),
  borderInlineEndRadius: t.logical({
    scale: "radii",
    property: {
      ltr: ["borderTopRightRadius", "borderBottomRightRadius"],
      rtl: ["borderTopLeftRadius", "borderBottomLeftRadius"]
    }
  }),
  borderX: t.borders(["borderLeft", "borderRight"]),
  borderInline: t.borders("borderInline"),
  borderY: t.borders(["borderTop", "borderBottom"]),
  borderBlock: t.borders("borderBlock"),
  borderTopWidth: t.borderWidths("borderTopWidth"),
  borderBlockStartWidth: t.borderWidths("borderBlockStartWidth"),
  borderTopColor: t.colors("borderTopColor"),
  borderBlockStartColor: t.colors("borderBlockStartColor"),
  borderTopStyle: t.borderStyles("borderTopStyle"),
  borderBlockStartStyle: t.borderStyles("borderBlockStartStyle"),
  borderBottomWidth: t.borderWidths("borderBottomWidth"),
  borderBlockEndWidth: t.borderWidths("borderBlockEndWidth"),
  borderBottomColor: t.colors("borderBottomColor"),
  borderBlockEndColor: t.colors("borderBlockEndColor"),
  borderBottomStyle: t.borderStyles("borderBottomStyle"),
  borderBlockEndStyle: t.borderStyles("borderBlockEndStyle"),
  borderLeftWidth: t.borderWidths("borderLeftWidth"),
  borderInlineStartWidth: t.borderWidths("borderInlineStartWidth"),
  borderLeftColor: t.colors("borderLeftColor"),
  borderInlineStartColor: t.colors("borderInlineStartColor"),
  borderLeftStyle: t.borderStyles("borderLeftStyle"),
  borderInlineStartStyle: t.borderStyles("borderInlineStartStyle"),
  borderRightWidth: t.borderWidths("borderRightWidth"),
  borderInlineEndWidth: t.borderWidths("borderInlineEndWidth"),
  borderRightColor: t.colors("borderRightColor"),
  borderInlineEndColor: t.colors("borderInlineEndColor"),
  borderRightStyle: t.borderStyles("borderRightStyle"),
  borderInlineEndStyle: t.borderStyles("borderInlineEndStyle"),
  borderTopRadius: t.radii(["borderTopLeftRadius", "borderTopRightRadius"]),
  borderBottomRadius: t.radii([
    "borderBottomLeftRadius",
    "borderBottomRightRadius"
  ]),
  borderLeftRadius: t.radii(["borderTopLeftRadius", "borderBottomLeftRadius"]),
  borderRightRadius: t.radii([
    "borderTopRightRadius",
    "borderBottomRightRadius"
  ])
};
Object.assign(border, {
  rounded: border.borderRadius,
  roundedTop: border.borderTopRadius,
  roundedTopLeft: border.borderTopLeftRadius,
  roundedTopRight: border.borderTopRightRadius,
  roundedTopStart: border.borderStartStartRadius,
  roundedTopEnd: border.borderStartEndRadius,
  roundedBottom: border.borderBottomRadius,
  roundedBottomLeft: border.borderBottomLeftRadius,
  roundedBottomRight: border.borderBottomRightRadius,
  roundedBottomStart: border.borderEndStartRadius,
  roundedBottomEnd: border.borderEndEndRadius,
  roundedLeft: border.borderLeftRadius,
  roundedRight: border.borderRightRadius,
  roundedStart: border.borderInlineStartRadius,
  roundedEnd: border.borderInlineEndRadius,
  borderStart: border.borderInlineStart,
  borderEnd: border.borderInlineEnd,
  borderTopStartRadius: border.borderStartStartRadius,
  borderTopEndRadius: border.borderStartEndRadius,
  borderBottomStartRadius: border.borderEndStartRadius,
  borderBottomEndRadius: border.borderEndEndRadius,
  borderStartRadius: border.borderInlineStartRadius,
  borderEndRadius: border.borderInlineEndRadius,
  borderStartWidth: border.borderInlineStartWidth,
  borderEndWidth: border.borderInlineEndWidth,
  borderStartColor: border.borderInlineStartColor,
  borderEndColor: border.borderInlineEndColor,
  borderStartStyle: border.borderInlineStartStyle,
  borderEndStyle: border.borderInlineEndStyle
});
var color = {
  color: t.colors("color"),
  textColor: t.colors("color"),
  fill: t.colors("fill"),
  stroke: t.colors("stroke")
};
var effect = {
  boxShadow: t.shadows("boxShadow"),
  mixBlendMode: true,
  blendMode: t.prop("mixBlendMode"),
  backgroundBlendMode: true,
  bgBlendMode: t.prop("backgroundBlendMode"),
  opacity: true
};
Object.assign(effect, {
  shadow: effect.boxShadow
});
var filter = {
  filter: { transform: transformFunctions.filter },
  blur: t.blur("--chakra-blur"),
  brightness: t.propT("--chakra-brightness", transformFunctions.brightness),
  contrast: t.propT("--chakra-contrast", transformFunctions.contrast),
  hueRotate: t.propT("--chakra-hue-rotate", transformFunctions.hueRotate),
  invert: t.propT("--chakra-invert", transformFunctions.invert),
  saturate: t.propT("--chakra-saturate", transformFunctions.saturate),
  dropShadow: t.propT("--chakra-drop-shadow", transformFunctions.dropShadow),
  backdropFilter: { transform: transformFunctions.backdropFilter },
  backdropBlur: t.blur("--chakra-backdrop-blur"),
  backdropBrightness: t.propT(
    "--chakra-backdrop-brightness",
    transformFunctions.brightness
  ),
  backdropContrast: t.propT("--chakra-backdrop-contrast", transformFunctions.contrast),
  backdropHueRotate: t.propT(
    "--chakra-backdrop-hue-rotate",
    transformFunctions.hueRotate
  ),
  backdropInvert: t.propT("--chakra-backdrop-invert", transformFunctions.invert),
  backdropSaturate: t.propT("--chakra-backdrop-saturate", transformFunctions.saturate)
};
var flexbox = {
  alignItems: true,
  alignContent: true,
  justifyItems: true,
  justifyContent: true,
  flexWrap: true,
  flexDirection: { transform: transformFunctions.flexDirection },
  flex: true,
  flexFlow: true,
  flexGrow: true,
  flexShrink: true,
  flexBasis: t.sizes("flexBasis"),
  justifySelf: true,
  alignSelf: true,
  order: true,
  placeItems: true,
  placeContent: true,
  placeSelf: true,
  gap: t.space("gap"),
  rowGap: t.space("rowGap"),
  columnGap: t.space("columnGap")
};
Object.assign(flexbox, {
  flexDir: flexbox.flexDirection
});
var grid = {
  gridGap: t.space("gridGap"),
  gridColumnGap: t.space("gridColumnGap"),
  gridRowGap: t.space("gridRowGap"),
  gridColumn: true,
  gridRow: true,
  gridAutoFlow: true,
  gridAutoColumns: true,
  gridColumnStart: true,
  gridColumnEnd: true,
  gridRowStart: true,
  gridRowEnd: true,
  gridAutoRows: true,
  gridTemplate: true,
  gridTemplateColumns: true,
  gridTemplateRows: true,
  gridTemplateAreas: true,
  gridArea: true
};
var interactivity = {
  appearance: true,
  cursor: true,
  resize: true,
  userSelect: true,
  pointerEvents: true,
  outline: { transform: transformFunctions.outline },
  outlineOffset: true,
  outlineColor: t.colors("outlineColor")
};
var layout = {
  width: t.sizesT("width"),
  inlineSize: t.sizesT("inlineSize"),
  height: t.sizes("height"),
  blockSize: t.sizes("blockSize"),
  boxSize: t.sizes(["width", "height"]),
  minWidth: t.sizes("minWidth"),
  minInlineSize: t.sizes("minInlineSize"),
  minHeight: t.sizes("minHeight"),
  minBlockSize: t.sizes("minBlockSize"),
  maxWidth: t.sizes("maxWidth"),
  maxInlineSize: t.sizes("maxInlineSize"),
  maxHeight: t.sizes("maxHeight"),
  maxBlockSize: t.sizes("maxBlockSize"),
  overflow: true,
  overflowX: true,
  overflowY: true,
  overscrollBehavior: true,
  overscrollBehaviorX: true,
  overscrollBehaviorY: true,
  display: true,
  aspectRatio: true,
  hideFrom: {
    scale: "breakpoints",
    transform: (value, theme3) => {
      var _a6, _b5, _c3;
      const breakpoint = (_c3 = (_b5 = (_a6 = theme3.__breakpoints) == null ? void 0 : _a6.get(value)) == null ? void 0 : _b5.minW) != null ? _c3 : value;
      const mq = `@media screen and (min-width: ${breakpoint})`;
      return { [mq]: { display: "none" } };
    }
  },
  hideBelow: {
    scale: "breakpoints",
    transform: (value, theme3) => {
      var _a6, _b5, _c3;
      const breakpoint = (_c3 = (_b5 = (_a6 = theme3.__breakpoints) == null ? void 0 : _a6.get(value)) == null ? void 0 : _b5._minW) != null ? _c3 : value;
      const mq = `@media screen and (max-width: ${breakpoint})`;
      return { [mq]: { display: "none" } };
    }
  },
  verticalAlign: true,
  boxSizing: true,
  boxDecorationBreak: true,
  float: t.propT("float", transformFunctions.float),
  objectFit: true,
  objectPosition: true,
  visibility: true,
  isolation: true
};
Object.assign(layout, {
  w: layout.width,
  h: layout.height,
  minW: layout.minWidth,
  maxW: layout.maxWidth,
  minH: layout.minHeight,
  maxH: layout.maxHeight,
  overscroll: layout.overscrollBehavior,
  overscrollX: layout.overscrollBehaviorX,
  overscrollY: layout.overscrollBehaviorY
});
var list = {
  listStyleType: true,
  listStylePosition: true,
  listStylePos: t.prop("listStylePosition"),
  listStyleImage: true,
  listStyleImg: t.prop("listStyleImage")
};
function get(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet = memoize(get);
var srOnly = {
  border: "0px",
  clip: "rect(0, 0, 0, 0)",
  width: "1px",
  height: "1px",
  margin: "-1px",
  padding: "0px",
  overflow: "hidden",
  whiteSpace: "nowrap",
  position: "absolute"
};
var srFocusable = {
  position: "static",
  width: "auto",
  height: "auto",
  clip: "auto",
  padding: "0",
  margin: "0",
  overflow: "visible",
  whiteSpace: "normal"
};
var getWithPriority = (theme3, key, styles3) => {
  const result = {};
  const obj = memoizedGet(theme3, key, {});
  for (const prop in obj) {
    const isInStyles = prop in styles3 && styles3[prop] != null;
    if (!isInStyles)
      result[prop] = obj[prop];
  }
  return result;
};
var others = {
  srOnly: {
    transform(value) {
      if (value === true)
        return srOnly;
      if (value === "focusable")
        return srFocusable;
      return {};
    }
  },
  layerStyle: {
    processResult: true,
    transform: (value, theme3, styles3) => getWithPriority(theme3, `layerStyles.${value}`, styles3)
  },
  textStyle: {
    processResult: true,
    transform: (value, theme3, styles3) => getWithPriority(theme3, `textStyles.${value}`, styles3)
  },
  apply: {
    processResult: true,
    transform: (value, theme3, styles3) => getWithPriority(theme3, value, styles3)
  }
};
var position = {
  position: true,
  pos: t.prop("position"),
  zIndex: t.prop("zIndex", "zIndices"),
  inset: t.spaceT("inset"),
  insetX: t.spaceT(["left", "right"]),
  insetInline: t.spaceT("insetInline"),
  insetY: t.spaceT(["top", "bottom"]),
  insetBlock: t.spaceT("insetBlock"),
  top: t.spaceT("top"),
  insetBlockStart: t.spaceT("insetBlockStart"),
  bottom: t.spaceT("bottom"),
  insetBlockEnd: t.spaceT("insetBlockEnd"),
  left: t.spaceT("left"),
  insetInlineStart: t.logical({
    scale: "space",
    property: { ltr: "left", rtl: "right" }
  }),
  right: t.spaceT("right"),
  insetInlineEnd: t.logical({
    scale: "space",
    property: { ltr: "right", rtl: "left" }
  })
};
Object.assign(position, {
  insetStart: position.insetInlineStart,
  insetEnd: position.insetInlineEnd
});
var ring = {
  ring: { transform: transformFunctions.ring },
  ringColor: t.colors("--chakra-ring-color"),
  ringOffset: t.prop("--chakra-ring-offset-width"),
  ringOffsetColor: t.colors("--chakra-ring-offset-color"),
  ringInset: t.prop("--chakra-ring-inset")
};
var space = {
  margin: t.spaceT("margin"),
  marginTop: t.spaceT("marginTop"),
  marginBlockStart: t.spaceT("marginBlockStart"),
  marginRight: t.spaceT("marginRight"),
  marginInlineEnd: t.spaceT("marginInlineEnd"),
  marginBottom: t.spaceT("marginBottom"),
  marginBlockEnd: t.spaceT("marginBlockEnd"),
  marginLeft: t.spaceT("marginLeft"),
  marginInlineStart: t.spaceT("marginInlineStart"),
  marginX: t.spaceT(["marginInlineStart", "marginInlineEnd"]),
  marginInline: t.spaceT("marginInline"),
  marginY: t.spaceT(["marginTop", "marginBottom"]),
  marginBlock: t.spaceT("marginBlock"),
  padding: t.space("padding"),
  paddingTop: t.space("paddingTop"),
  paddingBlockStart: t.space("paddingBlockStart"),
  paddingRight: t.space("paddingRight"),
  paddingBottom: t.space("paddingBottom"),
  paddingBlockEnd: t.space("paddingBlockEnd"),
  paddingLeft: t.space("paddingLeft"),
  paddingInlineStart: t.space("paddingInlineStart"),
  paddingInlineEnd: t.space("paddingInlineEnd"),
  paddingX: t.space(["paddingInlineStart", "paddingInlineEnd"]),
  paddingInline: t.space("paddingInline"),
  paddingY: t.space(["paddingTop", "paddingBottom"]),
  paddingBlock: t.space("paddingBlock")
};
Object.assign(space, {
  m: space.margin,
  mt: space.marginTop,
  mr: space.marginRight,
  me: space.marginInlineEnd,
  marginEnd: space.marginInlineEnd,
  mb: space.marginBottom,
  ml: space.marginLeft,
  ms: space.marginInlineStart,
  marginStart: space.marginInlineStart,
  mx: space.marginX,
  my: space.marginY,
  p: space.padding,
  pt: space.paddingTop,
  py: space.paddingY,
  px: space.paddingX,
  pb: space.paddingBottom,
  pl: space.paddingLeft,
  ps: space.paddingInlineStart,
  paddingStart: space.paddingInlineStart,
  pr: space.paddingRight,
  pe: space.paddingInlineEnd,
  paddingEnd: space.paddingInlineEnd
});
var textDecoration = {
  textDecorationColor: t.colors("textDecorationColor"),
  textDecoration: true,
  textDecor: { property: "textDecoration" },
  textDecorationLine: true,
  textDecorationStyle: true,
  textDecorationThickness: true,
  textUnderlineOffset: true,
  textShadow: t.shadows("textShadow")
};
var transform = {
  clipPath: true,
  transform: t.propT("transform", transformFunctions.transform),
  transformOrigin: true,
  translateX: t.spaceT("--chakra-translate-x"),
  translateY: t.spaceT("--chakra-translate-y"),
  skewX: t.degreeT("--chakra-skew-x"),
  skewY: t.degreeT("--chakra-skew-y"),
  scaleX: t.prop("--chakra-scale-x"),
  scaleY: t.prop("--chakra-scale-y"),
  scale: t.prop(["--chakra-scale-x", "--chakra-scale-y"]),
  rotate: t.degreeT("--chakra-rotate")
};
var transition2 = {
  transition: true,
  transitionDelay: true,
  animation: true,
  willChange: true,
  transitionDuration: t.prop("transitionDuration", "transition.duration"),
  transitionProperty: t.prop("transitionProperty", "transition.property"),
  transitionTimingFunction: t.prop(
    "transitionTimingFunction",
    "transition.easing"
  )
};
var typography2 = {
  fontFamily: t.prop("fontFamily", "fonts"),
  fontSize: t.prop("fontSize", "fontSizes", transformFunctions.px),
  fontWeight: t.prop("fontWeight", "fontWeights"),
  lineHeight: t.prop("lineHeight", "lineHeights"),
  letterSpacing: t.prop("letterSpacing", "letterSpacings"),
  textAlign: true,
  fontStyle: true,
  textIndent: true,
  wordBreak: true,
  overflowWrap: true,
  textOverflow: true,
  textTransform: true,
  whiteSpace: true,
  isTruncated: {
    transform(value) {
      if (value === true) {
        return {
          overflow: "hidden",
          textOverflow: "ellipsis",
          whiteSpace: "nowrap"
        };
      }
    }
  },
  noOfLines: {
    static: {
      overflow: "hidden",
      textOverflow: "ellipsis",
      display: "-webkit-box",
      WebkitBoxOrient: "vertical",
      //@ts-ignore
      WebkitLineClamp: "var(--chakra-line-clamp)"
    },
    property: "--chakra-line-clamp"
  }
};
var scroll = {
  scrollBehavior: true,
  scrollSnapAlign: true,
  scrollSnapStop: true,
  scrollSnapType: true,
  // scroll margin
  scrollMargin: t.spaceT("scrollMargin"),
  scrollMarginTop: t.spaceT("scrollMarginTop"),
  scrollMarginBottom: t.spaceT("scrollMarginBottom"),
  scrollMarginLeft: t.spaceT("scrollMarginLeft"),
  scrollMarginRight: t.spaceT("scrollMarginRight"),
  scrollMarginX: t.spaceT(["scrollMarginLeft", "scrollMarginRight"]),
  scrollMarginY: t.spaceT(["scrollMarginTop", "scrollMarginBottom"]),
  // scroll padding
  scrollPadding: t.spaceT("scrollPadding"),
  scrollPaddingTop: t.spaceT("scrollPaddingTop"),
  scrollPaddingBottom: t.spaceT("scrollPaddingBottom"),
  scrollPaddingLeft: t.spaceT("scrollPaddingLeft"),
  scrollPaddingRight: t.spaceT("scrollPaddingRight"),
  scrollPaddingX: t.spaceT(["scrollPaddingLeft", "scrollPaddingRight"]),
  scrollPaddingY: t.spaceT(["scrollPaddingTop", "scrollPaddingBottom"])
};
function resolveReference(operand) {
  if (isObject(operand) && operand.reference) {
    return operand.reference;
  }
  return String(operand);
}
var toExpression = (operator, ...operands) => operands.map(resolveReference).join(` ${operator} `).replace(/calc/g, "");
var add = (...operands) => `calc(${toExpression("+", ...operands)})`;
var subtract = (...operands) => `calc(${toExpression("-", ...operands)})`;
var multiply = (...operands) => `calc(${toExpression("*", ...operands)})`;
var divide = (...operands) => `calc(${toExpression("/", ...operands)})`;
var negate = (x) => {
  const value = resolveReference(x);
  if (value != null && !Number.isNaN(parseFloat(value))) {
    return String(value).startsWith("-") ? String(value).slice(1) : `-${value}`;
  }
  return multiply(value, -1);
};
var calc = Object.assign(
  (x) => ({
    add: (...operands) => calc(add(x, ...operands)),
    subtract: (...operands) => calc(subtract(x, ...operands)),
    multiply: (...operands) => calc(multiply(x, ...operands)),
    divide: (...operands) => calc(divide(x, ...operands)),
    negate: () => calc(negate(x)),
    toString: () => x.toString()
  }),
  {
    add,
    subtract,
    multiply,
    divide,
    negate
  }
);
function replaceWhiteSpace(value, replaceValue = "-") {
  return value.replace(/\s+/g, replaceValue);
}
function escape(value) {
  const valueStr = replaceWhiteSpace(value.toString());
  return escapeSymbol(escapeDot(valueStr));
}
function escapeDot(value) {
  if (value.includes("\\."))
    return value;
  const isDecimal = !Number.isInteger(parseFloat(value.toString()));
  return isDecimal ? value.replace(".", `\\.`) : value;
}
function escapeSymbol(value) {
  return value.replace(/[!-,/:-@[-^`{-~]/g, "\\$&");
}
function addPrefix(value, prefix = "") {
  return [prefix, value].filter(Boolean).join("-");
}
function toVarReference(name, fallback) {
  return `var(${name}${fallback ? `, ${fallback}` : ""})`;
}
function toVarDefinition(value, prefix = "") {
  return escape(`--${addPrefix(value, prefix)}`);
}
function cssVar(name, fallback, cssVarPrefix) {
  const cssVariable = toVarDefinition(name, cssVarPrefix);
  return {
    variable: cssVariable,
    reference: toVarReference(cssVariable, fallback)
  };
}
function defineCssVars(scope, keys2) {
  const vars2 = {};
  for (const key of keys2) {
    if (Array.isArray(key)) {
      const [name, fallback] = key;
      vars2[name] = cssVar(`${scope}-${name}`, fallback);
      continue;
    }
    vars2[key] = cssVar(`${scope}-${key}`);
  }
  return vars2;
}
var state = {
  hover: (str, post) => `${str}:hover ${post}, ${str}[data-hover] ${post}`,
  focus: (str, post) => `${str}:focus ${post}, ${str}[data-focus] ${post}`,
  focusVisible: (str, post) => `${str}:focus-visible ${post}`,
  focusWithin: (str, post) => `${str}:focus-within ${post}`,
  active: (str, post) => `${str}:active ${post}, ${str}[data-active] ${post}`,
  disabled: (str, post) => `${str}:disabled ${post}, ${str}[data-disabled] ${post}`,
  invalid: (str, post) => `${str}:invalid ${post}, ${str}[data-invalid] ${post}`,
  checked: (str, post) => `${str}:checked ${post}, ${str}[data-checked] ${post}`,
  indeterminate: (str, post) => `${str}:indeterminate ${post}, ${str}[aria-checked=mixed] ${post}, ${str}[data-indeterminate] ${post}`,
  readOnly: (str, post) => `${str}:read-only ${post}, ${str}[readonly] ${post}, ${str}[data-read-only] ${post}`,
  expanded: (str, post) => `${str}:read-only ${post}, ${str}[aria-expanded=true] ${post}, ${str}[data-expanded] ${post}`,
  placeholderShown: (str, post) => `${str}:placeholder-shown ${post}`
};
var toGroup = (fn) => merge((v) => fn(v, "&"), "[role=group]", "[data-group]", ".group");
var toPeer = (fn) => merge((v) => fn(v, "~ &"), "[data-peer]", ".peer");
var merge = (fn, ...selectors) => selectors.map(fn).join(", ");
var pseudoSelectors = {
  /**
   * Styles for CSS selector `&:hover`
   */
  _hover: "&:hover, &[data-hover]",
  /**
   * Styles for CSS Selector `&:active`
   */
  _active: "&:active, &[data-active]",
  /**
   * Styles for CSS selector `&:focus`
   *
   */
  _focus: "&:focus, &[data-focus]",
  /**
   * Styles for the highlighted state.
   */
  _highlighted: "&[data-highlighted]",
  /**
   * Styles to apply when a child of this element has received focus
   * - CSS Selector `&:focus-within`
   */
  _focusWithin: "&:focus-within",
  /**
   * Styles to apply when this element has received focus via tabbing
   * - CSS Selector `&:focus-visible`
   */
  _focusVisible: "&:focus-visible, &[data-focus-visible]",
  /**
   * Styles to apply when this element is disabled. The passed styles are applied to these CSS selectors:
   * - `&[aria-disabled=true]`
   * - `&:disabled`
   * - `&[data-disabled]`
   * - `&[disabled]`
   */
  _disabled: "&:disabled, &[disabled], &[aria-disabled=true], &[data-disabled]",
  /**
   * Styles for CSS Selector `&:readonly`
   */
  _readOnly: "&[aria-readonly=true], &[readonly], &[data-readonly]",
  /**
   * Styles for CSS selector `&::before`
   *
   * NOTE:When using this, ensure the `content` is wrapped in a backtick.
   * @example
   * ```jsx
   * <Box _before={{content:`""` }}/>
   * ```
   */
  _before: "&::before",
  /**
   * Styles for CSS selector `&::after`
   *
   * NOTE:When using this, ensure the `content` is wrapped in a backtick.
   * @example
   * ```jsx
   * <Box _after={{content:`""` }}/>
   * ```
   */
  _after: "&::after",
  /**
   * Styles for CSS selector `&:empty`
   */
  _empty: "&:empty",
  /**
   * Styles to apply when the ARIA attribute `aria-expanded` is `true`
   * - CSS selector `&[aria-expanded=true]`
   */
  _expanded: "&[aria-expanded=true], &[data-expanded]",
  /**
   * Styles to apply when the ARIA attribute `aria-checked` is `true`
   * - CSS selector `&[aria-checked=true]`
   */
  _checked: "&[aria-checked=true], &[data-checked]",
  /**
   * Styles to apply when the ARIA attribute `aria-grabbed` is `true`
   * - CSS selector `&[aria-grabbed=true]`
   */
  _grabbed: "&[aria-grabbed=true], &[data-grabbed]",
  /**
   * Styles for CSS Selector `&[aria-pressed=true]`
   * Typically used to style the current "pressed" state of toggle buttons
   */
  _pressed: "&[aria-pressed=true], &[data-pressed]",
  /**
   * Styles to apply when the ARIA attribute `aria-invalid` is `true`
   * - CSS selector `&[aria-invalid=true]`
   */
  _invalid: "&[aria-invalid=true], &[data-invalid]",
  /**
   * Styles for the valid state
   * - CSS selector `&[data-valid], &[data-state=valid]`
   */
  _valid: "&[data-valid], &[data-state=valid]",
  /**
   * Styles for CSS Selector `&[aria-busy=true]` or `&[data-loading=true]`.
   * Useful for styling loading states
   */
  _loading: "&[data-loading], &[aria-busy=true]",
  /**
   * Styles to apply when the ARIA attribute `aria-selected` is `true`
   *
   * - CSS selector `&[aria-selected=true]`
   */
  _selected: "&[aria-selected=true], &[data-selected]",
  /**
   * Styles for CSS Selector `[hidden=true]`
   */
  _hidden: "&[hidden], &[data-hidden]",
  /**
   * Styles for CSS Selector `&:-webkit-autofill`
   */
  _autofill: "&:-webkit-autofill",
  /**
   * Styles for CSS Selector `&:nth-child(even)`
   */
  _even: "&:nth-of-type(even)",
  /**
   * Styles for CSS Selector `&:nth-child(odd)`
   */
  _odd: "&:nth-of-type(odd)",
  /**
   * Styles for CSS Selector `&:first-of-type`
   */
  _first: "&:first-of-type",
  /**
   * Styles for CSS selector `&::first-letter`
   *
   * NOTE: This selector is only applied for block-level elements and not preceded by an image or table.
   * @example
   * ```jsx
   * <Text _firstLetter={{ textDecoration: 'underline' }}>Once upon a time</Text>
   * ```
   */
  _firstLetter: "&::first-letter",
  /**
   * Styles for CSS Selector `&:last-of-type`
   */
  _last: "&:last-of-type",
  /**
   * Styles for CSS Selector `&:not(:first-of-type)`
   */
  _notFirst: "&:not(:first-of-type)",
  /**
   * Styles for CSS Selector `&:not(:last-of-type)`
   */
  _notLast: "&:not(:last-of-type)",
  /**
   * Styles for CSS Selector `&:visited`
   */
  _visited: "&:visited",
  /**
   * Used to style the active link in a navigation
   * Styles for CSS Selector `&[aria-current=page]`
   */
  _activeLink: "&[aria-current=page]",
  /**
   * Used to style the current step within a process
   * Styles for CSS Selector `&[aria-current=step]`
   */
  _activeStep: "&[aria-current=step]",
  /**
   * Styles to apply when the ARIA attribute `aria-checked` is `mixed`
   * - CSS selector `&[aria-checked=mixed]`
   */
  _indeterminate: "&:indeterminate, &[aria-checked=mixed], &[data-indeterminate]",
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is hovered
   */
  _groupHover: toGroup(state.hover),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` is hovered
   */
  _peerHover: toPeer(state.hover),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is focused
   */
  _groupFocus: toGroup(state.focus),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` is focused
   */
  _peerFocus: toPeer(state.focus),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` has visible focus
   */
  _groupFocusVisible: toGroup(state.focusVisible),
  /**
   * Styles to apply when a sibling element with `.peer`or `data-peer` has visible focus
   */
  _peerFocusVisible: toPeer(state.focusVisible),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is active
   */
  _groupActive: toGroup(state.active),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` is active
   */
  _peerActive: toPeer(state.active),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is disabled
   */
  _groupDisabled: toGroup(state.disabled),
  /**
   *  Styles to apply when a sibling element with `.peer` or `data-peer` is disabled
   */
  _peerDisabled: toPeer(state.disabled),
  /**
   *  Styles to apply when a parent element with `.group`, `data-group` or `role=group` is invalid
   */
  _groupInvalid: toGroup(state.invalid),
  /**
   *  Styles to apply when a sibling element with `.peer` or `data-peer` is invalid
   */
  _peerInvalid: toPeer(state.invalid),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is checked
   */
  _groupChecked: toGroup(state.checked),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` is checked
   */
  _peerChecked: toPeer(state.checked),
  /**
   *  Styles to apply when a parent element with `.group`, `data-group` or `role=group` has focus within
   */
  _groupFocusWithin: toGroup(state.focusWithin),
  /**
   *  Styles to apply when a sibling element with `.peer` or `data-peer` has focus within
   */
  _peerFocusWithin: toPeer(state.focusWithin),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` has placeholder shown
   */
  _peerPlaceholderShown: toPeer(state.placeholderShown),
  /**
   * Styles for CSS Selector `&::placeholder`.
   */
  _placeholder: "&::placeholder",
  /**
   * Styles for CSS Selector `&:placeholder-shown`.
   */
  _placeholderShown: "&:placeholder-shown",
  /**
   * Styles for CSS Selector `&:fullscreen`.
   */
  _fullScreen: "&:fullscreen",
  /**
   * Styles for CSS Selector `&::selection`
   */
  _selection: "&::selection",
  /**
   * Styles for CSS Selector `[dir=rtl] &`
   * It is applied when a parent element or this element has `dir="rtl"`
   */
  _rtl: "[dir=rtl] &, &[dir=rtl]",
  /**
   * Styles for CSS Selector `[dir=ltr] &`
   * It is applied when a parent element or this element has `dir="ltr"`
   */
  _ltr: "[dir=ltr] &, &[dir=ltr]",
  /**
   * Styles for CSS Selector `@media (prefers-color-scheme: dark)`
   * It is used when the user has requested the system use a light or dark color theme.
   */
  _mediaDark: "@media (prefers-color-scheme: dark)",
  /**
   * Styles for CSS Selector `@media (prefers-reduced-motion: reduce)`
   * It is used when the user has requested the system to reduce the amount of animations.
   */
  _mediaReduceMotion: "@media (prefers-reduced-motion: reduce)",
  /**
   * Styles for when `data-theme` is applied to any parent of
   * this component or element.
   */
  _dark: ".chakra-ui-dark &:not([data-theme]),[data-theme=dark] &:not([data-theme]),&[data-theme=dark]",
  /**
   * Styles for when `data-theme` is applied to any parent of
   * this component or element.
   */
  _light: ".chakra-ui-light &:not([data-theme]),[data-theme=light] &:not([data-theme]),&[data-theme=light]",
  /**
   * Styles for the CSS Selector `&[data-orientation=horizontal]`
   */
  _horizontal: "&[data-orientation=horizontal]",
  /**
   * Styles for the CSS Selector `&[data-orientation=vertical]`
   */
  _vertical: "&[data-orientation=vertical]"
};
var pseudoPropNames = Object.keys(
  pseudoSelectors
);
var systemProps = (0, import_lodash3.default)(
  {},
  background,
  border,
  color,
  flexbox,
  layout,
  filter,
  ring,
  interactivity,
  grid,
  others,
  position,
  effect,
  space,
  scroll,
  typography2,
  textDecoration,
  transform,
  list,
  transition2
);
Object.assign({}, space, layout, flexbox, grid, position);
[...Object.keys(systemProps), ...pseudoPropNames];
({ ...systemProps, ...pseudoSelectors });
function defineStyle(styles3) {
  return styles3;
}
function defineStyleConfig(config45) {
  return config45;
}
function createMultiStyleConfigHelpers(parts20) {
  return {
    definePartsStyle(config45) {
      return config45;
    },
    defineMultiStyleConfig(config45) {
      return { parts: parts20, ...config45 };
    }
  };
}

// ../../node_modules/@chakra-ui/theme/dist/chunk-Q5NOVGYN.mjs
var { defineMultiStyleConfig, definePartsStyle } = createMultiStyleConfigHelpers([
  "stepper",
  "step",
  "title",
  "description",
  "indicator",
  "separator",
  "icon",
  "number"
]);
var $size = cssVar("stepper-indicator-size");
var $iconSize = cssVar("stepper-icon-size");
var $titleFontSize = cssVar("stepper-title-font-size");
var $descFontSize = cssVar("stepper-description-font-size");
var $accentColor = cssVar("stepper-accent-color");
var baseStyle = definePartsStyle(({ colorScheme: c }) => ({
  stepper: {
    display: "flex",
    justifyContent: "space-between",
    gap: "4",
    "&[data-orientation=vertical]": {
      flexDirection: "column",
      alignItems: "flex-start"
    },
    "&[data-orientation=horizontal]": {
      flexDirection: "row",
      alignItems: "center"
    },
    [$accentColor.variable]: `colors.${c}.500`,
    _dark: {
      [$accentColor.variable]: `colors.${c}.200`
    }
  },
  title: {
    fontSize: $titleFontSize.reference,
    fontWeight: "medium"
  },
  description: {
    fontSize: $descFontSize.reference,
    color: "chakra-subtle-text"
  },
  number: {
    fontSize: $titleFontSize.reference
  },
  step: {
    flexShrink: 0,
    position: "relative",
    display: "flex",
    gap: "2",
    "&[data-orientation=horizontal]": {
      alignItems: "center"
    },
    flex: "1",
    "&:last-of-type:not([data-stretch])": {
      flex: "initial"
    }
  },
  icon: {
    flexShrink: 0,
    width: $iconSize.reference,
    height: $iconSize.reference
  },
  indicator: {
    flexShrink: 0,
    borderRadius: "full",
    width: $size.reference,
    height: $size.reference,
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    "&[data-status=active]": {
      borderWidth: "2px",
      borderColor: $accentColor.reference
    },
    "&[data-status=complete]": {
      bg: $accentColor.reference,
      color: "chakra-inverse-text"
    },
    "&[data-status=incomplete]": {
      borderWidth: "2px"
    }
  },
  separator: {
    bg: "chakra-border-color",
    flex: "1",
    "&[data-status=complete]": {
      bg: $accentColor.reference
    },
    "&[data-orientation=horizontal]": {
      width: "100%",
      height: "2px",
      marginStart: "2"
    },
    "&[data-orientation=vertical]": {
      width: "2px",
      position: "absolute",
      height: "100%",
      maxHeight: `calc(100% - ${$size.reference} - 8px)`,
      top: `calc(${$size.reference} + 4px)`,
      insetStart: `calc(${$size.reference} / 2 - 1px)`
    }
  }
}));
var stepperTheme = defineMultiStyleConfig({
  baseStyle,
  sizes: {
    xs: definePartsStyle({
      stepper: {
        [$size.variable]: "sizes.4",
        [$iconSize.variable]: "sizes.3",
        [$titleFontSize.variable]: "fontSizes.xs",
        [$descFontSize.variable]: "fontSizes.xs"
      }
    }),
    sm: definePartsStyle({
      stepper: {
        [$size.variable]: "sizes.6",
        [$iconSize.variable]: "sizes.4",
        [$titleFontSize.variable]: "fontSizes.sm",
        [$descFontSize.variable]: "fontSizes.xs"
      }
    }),
    md: definePartsStyle({
      stepper: {
        [$size.variable]: "sizes.8",
        [$iconSize.variable]: "sizes.5",
        [$titleFontSize.variable]: "fontSizes.md",
        [$descFontSize.variable]: "fontSizes.sm"
      }
    }),
    lg: definePartsStyle({
      stepper: {
        [$size.variable]: "sizes.10",
        [$iconSize.variable]: "sizes.6",
        [$titleFontSize.variable]: "fontSizes.lg",
        [$descFontSize.variable]: "fontSizes.md"
      }
    })
  },
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// ../../node_modules/@chakra-ui/anatomy/dist/chunk-OA3DH5LS.mjs
function anatomy(name, map = {}) {
  let called = false;
  function assert() {
    if (!called) {
      called = true;
      return;
    }
    throw new Error(
      "[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?"
    );
  }
  function parts20(...values) {
    assert();
    for (const part of values) {
      map[part] = toPart(part);
    }
    return anatomy(name, map);
  }
  function extend(...parts22) {
    for (const part of parts22) {
      if (part in map)
        continue;
      map[part] = toPart(part);
    }
    return anatomy(name, map);
  }
  function selectors() {
    const value = Object.fromEntries(
      Object.entries(map).map(([key, part]) => [key, part.selector])
    );
    return value;
  }
  function classnames() {
    const value = Object.fromEntries(
      Object.entries(map).map(([key, part]) => [key, part.className])
    );
    return value;
  }
  function toPart(part) {
    const el = ["container", "root"].includes(part != null ? part : "") ? [name] : [name, part];
    const attr = el.filter(Boolean).join("__");
    const className = `chakra-${attr}`;
    const partObj = {
      className,
      selector: `.${className}`,
      toString: () => part
    };
    return partObj;
  }
  const __type = {};
  return {
    parts: parts20,
    toPart,
    extend,
    selectors,
    classnames,
    get keys() {
      return Object.keys(map);
    },
    __type
  };
}

// ../../node_modules/@chakra-ui/anatomy/dist/chunk-7OOI6RFH.mjs
var accordionAnatomy = anatomy("accordion").parts("root", "container", "button", "panel").extend("icon");
var alertAnatomy = anatomy("alert").parts("title", "description", "container").extend("icon", "spinner");
var avatarAnatomy = anatomy("avatar").parts("label", "badge", "container").extend("excessLabel", "group");
var breadcrumbAnatomy = anatomy("breadcrumb").parts("link", "item", "container").extend("separator");
anatomy("button").parts();
var checkboxAnatomy = anatomy("checkbox").parts("control", "icon", "container").extend("label");
anatomy("progress").parts("track", "filledTrack").extend("label");
var drawerAnatomy = anatomy("drawer").parts("overlay", "dialogContainer", "dialog").extend("header", "closeButton", "body", "footer");
var editableAnatomy = anatomy("editable").parts(
  "preview",
  "input",
  "textarea"
);
var formAnatomy = anatomy("form").parts(
  "container",
  "requiredIndicator",
  "helperText"
);
var formErrorAnatomy = anatomy("formError").parts("text", "icon");
var inputAnatomy = anatomy("input").parts(
  "addon",
  "field",
  "element",
  "group"
);
var listAnatomy = anatomy("list").parts("container", "item", "icon");
var menuAnatomy = anatomy("menu").parts("button", "list", "item").extend("groupTitle", "icon", "command", "divider");
var modalAnatomy = anatomy("modal").parts("overlay", "dialogContainer", "dialog").extend("header", "closeButton", "body", "footer");
var numberInputAnatomy = anatomy("numberinput").parts(
  "root",
  "field",
  "stepperGroup",
  "stepper"
);
anatomy("pininput").parts("field");
var popoverAnatomy = anatomy("popover").parts("content", "header", "body", "footer").extend("popper", "arrow", "closeButton");
var progressAnatomy = anatomy("progress").parts(
  "label",
  "filledTrack",
  "track"
);
var radioAnatomy = anatomy("radio").parts(
  "container",
  "control",
  "label"
);
var selectAnatomy = anatomy("select").parts("field", "icon");
var sliderAnatomy = anatomy("slider").parts(
  "container",
  "track",
  "thumb",
  "filledTrack",
  "mark"
);
var statAnatomy = anatomy("stat").parts(
  "container",
  "label",
  "helpText",
  "number",
  "icon"
);
var switchAnatomy = anatomy("switch").parts(
  "container",
  "track",
  "thumb",
  "label"
);
var tableAnatomy = anatomy("table").parts(
  "table",
  "thead",
  "tbody",
  "tr",
  "th",
  "td",
  "tfoot",
  "caption"
);
var tabsAnatomy = anatomy("tabs").parts(
  "root",
  "tab",
  "tablist",
  "tabpanel",
  "tabpanels",
  "indicator"
);
var tagAnatomy = anatomy("tag").parts(
  "container",
  "label",
  "closeButton"
);
var cardAnatomy = anatomy("card").parts(
  "container",
  "header",
  "body",
  "footer"
);
anatomy("stepper").parts(
  "stepper",
  "step",
  "title",
  "description",
  "indicator",
  "separator",
  "icon",
  "number"
);
var { defineMultiStyleConfig: defineMultiStyleConfig2, definePartsStyle: definePartsStyle2 } = createMultiStyleConfigHelpers(switchAnatomy.keys);
var $width = cssVar$1("switch-track-width");
var $height = cssVar$1("switch-track-height");
var $diff = cssVar$1("switch-track-diff");
var diffValue = calc$1.subtract($width, $height);
var $translateX = cssVar$1("switch-thumb-x");
var $bg = cssVar$1("switch-bg");
var baseStyleTrack = defineStyle((props) => {
  const { colorScheme: c } = props;
  return {
    borderRadius: "full",
    p: "0.5",
    width: [$width.reference],
    height: [$height.reference],
    transitionProperty: "common",
    transitionDuration: "fast",
    [$bg.variable]: "colors.gray.300",
    _dark: {
      [$bg.variable]: "colors.whiteAlpha.400"
    },
    _focusVisible: {
      boxShadow: "outline"
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    },
    _checked: {
      [$bg.variable]: `colors.${c}.500`,
      _dark: {
        [$bg.variable]: `colors.${c}.200`
      }
    },
    bg: $bg.reference
  };
});
var baseStyleThumb = defineStyle({
  bg: "white",
  transitionProperty: "transform",
  transitionDuration: "normal",
  borderRadius: "inherit",
  width: [$height.reference],
  height: [$height.reference],
  _checked: {
    transform: `translateX(${$translateX.reference})`
  }
});
var baseStyle2 = definePartsStyle2((props) => ({
  container: {
    [$diff.variable]: diffValue,
    [$translateX.variable]: $diff.reference,
    _rtl: {
      [$translateX.variable]: calc$1($diff).negate().toString()
    }
  },
  track: baseStyleTrack(props),
  thumb: baseStyleThumb
}));
var sizes2 = {
  sm: definePartsStyle2({
    container: {
      [$width.variable]: "1.375rem",
      [$height.variable]: "sizes.3"
    }
  }),
  md: definePartsStyle2({
    container: {
      [$width.variable]: "1.875rem",
      [$height.variable]: "sizes.4"
    }
  }),
  lg: definePartsStyle2({
    container: {
      [$width.variable]: "2.875rem",
      [$height.variable]: "sizes.6"
    }
  })
};
var switchTheme = defineMultiStyleConfig2({
  baseStyle: baseStyle2,
  sizes: sizes2,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});
var { defineMultiStyleConfig: defineMultiStyleConfig3, definePartsStyle: definePartsStyle3 } = createMultiStyleConfigHelpers(tableAnatomy.keys);
var baseStyle3 = definePartsStyle3({
  table: {
    fontVariantNumeric: "lining-nums tabular-nums",
    borderCollapse: "collapse",
    width: "full"
  },
  th: {
    fontFamily: "heading",
    fontWeight: "bold",
    textTransform: "uppercase",
    letterSpacing: "wider",
    textAlign: "start"
  },
  td: {
    textAlign: "start"
  },
  caption: {
    mt: 4,
    fontFamily: "heading",
    textAlign: "center",
    fontWeight: "medium"
  }
});
var numericStyles = defineStyle({
  "&[data-is-numeric=true]": {
    textAlign: "end"
  }
});
var variantSimple = definePartsStyle3((props) => {
  const { colorScheme: c } = props;
  return {
    th: {
      color: mode("gray.600", "gray.400")(props),
      borderBottom: "1px",
      borderColor: mode(`${c}.100`, `${c}.700`)(props),
      ...numericStyles
    },
    td: {
      borderBottom: "1px",
      borderColor: mode(`${c}.100`, `${c}.700`)(props),
      ...numericStyles
    },
    caption: {
      color: mode("gray.600", "gray.100")(props)
    },
    tfoot: {
      tr: {
        "&:last-of-type": {
          th: { borderBottomWidth: 0 }
        }
      }
    }
  };
});
var variantStripe = definePartsStyle3((props) => {
  const { colorScheme: c } = props;
  return {
    th: {
      color: mode("gray.600", "gray.400")(props),
      borderBottom: "1px",
      borderColor: mode(`${c}.100`, `${c}.700`)(props),
      ...numericStyles
    },
    td: {
      borderBottom: "1px",
      borderColor: mode(`${c}.100`, `${c}.700`)(props),
      ...numericStyles
    },
    caption: {
      color: mode("gray.600", "gray.100")(props)
    },
    tbody: {
      tr: {
        "&:nth-of-type(odd)": {
          "th, td": {
            borderBottomWidth: "1px",
            borderColor: mode(`${c}.100`, `${c}.700`)(props)
          },
          td: {
            background: mode(`${c}.100`, `${c}.700`)(props)
          }
        }
      }
    },
    tfoot: {
      tr: {
        "&:last-of-type": {
          th: { borderBottomWidth: 0 }
        }
      }
    }
  };
});
var variants = {
  simple: variantSimple,
  striped: variantStripe,
  unstyled: defineStyle({})
};
var sizes3 = {
  sm: definePartsStyle3({
    th: {
      px: "4",
      py: "1",
      lineHeight: "4",
      fontSize: "xs"
    },
    td: {
      px: "4",
      py: "2",
      fontSize: "sm",
      lineHeight: "4"
    },
    caption: {
      px: "4",
      py: "2",
      fontSize: "xs"
    }
  }),
  md: definePartsStyle3({
    th: {
      px: "6",
      py: "3",
      lineHeight: "4",
      fontSize: "xs"
    },
    td: {
      px: "6",
      py: "4",
      lineHeight: "5"
    },
    caption: {
      px: "6",
      py: "2",
      fontSize: "sm"
    }
  }),
  lg: definePartsStyle3({
    th: {
      px: "8",
      py: "4",
      lineHeight: "5",
      fontSize: "sm"
    },
    td: {
      px: "8",
      py: "5",
      lineHeight: "6"
    },
    caption: {
      px: "6",
      py: "2",
      fontSize: "md"
    }
  })
};
var tableTheme = defineMultiStyleConfig3({
  baseStyle: baseStyle3,
  variants,
  sizes: sizes3,
  defaultProps: {
    variant: "simple",
    size: "md",
    colorScheme: "gray"
  }
});
var $fg = cssVar("tabs-color");
var $bg2 = cssVar("tabs-bg");
var $border = cssVar("tabs-border-color");
var { defineMultiStyleConfig: defineMultiStyleConfig4, definePartsStyle: definePartsStyle4 } = createMultiStyleConfigHelpers(tabsAnatomy.keys);
var baseStyleRoot = defineStyle((props) => {
  const { orientation } = props;
  return {
    display: orientation === "vertical" ? "flex" : "block"
  };
});
var baseStyleTab = defineStyle((props) => {
  const { isFitted } = props;
  return {
    flex: isFitted ? 1 : void 0,
    transitionProperty: "common",
    transitionDuration: "normal",
    _focusVisible: {
      zIndex: 1,
      boxShadow: "outline"
    },
    _disabled: {
      cursor: "not-allowed",
      opacity: 0.4
    }
  };
});
var baseStyleTablist = defineStyle((props) => {
  const { align = "start", orientation } = props;
  const alignments = {
    end: "flex-end",
    center: "center",
    start: "flex-start"
  };
  return {
    justifyContent: alignments[align],
    flexDirection: orientation === "vertical" ? "column" : "row"
  };
});
var baseStyleTabpanel = defineStyle({
  p: 4
});
var baseStyle4 = definePartsStyle4((props) => ({
  root: baseStyleRoot(props),
  tab: baseStyleTab(props),
  tablist: baseStyleTablist(props),
  tabpanel: baseStyleTabpanel
}));
var sizes4 = {
  sm: definePartsStyle4({
    tab: {
      py: 1,
      px: 4,
      fontSize: "sm"
    }
  }),
  md: definePartsStyle4({
    tab: {
      fontSize: "md",
      py: 2,
      px: 4
    }
  }),
  lg: definePartsStyle4({
    tab: {
      fontSize: "lg",
      py: 3,
      px: 4
    }
  })
};
var variantLine = definePartsStyle4((props) => {
  const { colorScheme: c, orientation } = props;
  const isVertical = orientation === "vertical";
  const borderProp = isVertical ? "borderStart" : "borderBottom";
  const marginProp = isVertical ? "marginStart" : "marginBottom";
  return {
    tablist: {
      [borderProp]: "2px solid",
      borderColor: "inherit"
    },
    tab: {
      [borderProp]: "2px solid",
      borderColor: "transparent",
      [marginProp]: "-2px",
      _selected: {
        [$fg.variable]: `colors.${c}.600`,
        _dark: {
          [$fg.variable]: `colors.${c}.300`
        },
        borderColor: "currentColor"
      },
      _active: {
        [$bg2.variable]: "colors.gray.200",
        _dark: {
          [$bg2.variable]: "colors.whiteAlpha.300"
        }
      },
      _disabled: {
        _active: { bg: "none" }
      },
      color: $fg.reference,
      bg: $bg2.reference
    }
  };
});
var variantEnclosed = definePartsStyle4((props) => {
  const { colorScheme: c } = props;
  return {
    tab: {
      borderTopRadius: "md",
      border: "1px solid",
      borderColor: "transparent",
      mb: "-1px",
      [$border.variable]: "transparent",
      _selected: {
        [$fg.variable]: `colors.${c}.600`,
        [$border.variable]: `colors.white`,
        _dark: {
          [$fg.variable]: `colors.${c}.300`,
          [$border.variable]: `colors.gray.800`
        },
        borderColor: "inherit",
        borderBottomColor: $border.reference
      },
      color: $fg.reference
    },
    tablist: {
      mb: "-1px",
      borderBottom: "1px solid",
      borderColor: "inherit"
    }
  };
});
var variantEnclosedColored = definePartsStyle4((props) => {
  const { colorScheme: c } = props;
  return {
    tab: {
      border: "1px solid",
      borderColor: "inherit",
      [$bg2.variable]: "colors.gray.50",
      _dark: {
        [$bg2.variable]: "colors.whiteAlpha.50"
      },
      mb: "-1px",
      _notLast: {
        marginEnd: "-1px"
      },
      _selected: {
        [$bg2.variable]: "colors.white",
        [$fg.variable]: `colors.${c}.600`,
        _dark: {
          [$bg2.variable]: "colors.gray.800",
          [$fg.variable]: `colors.${c}.300`
        },
        borderColor: "inherit",
        borderTopColor: "currentColor",
        borderBottomColor: "transparent"
      },
      color: $fg.reference,
      bg: $bg2.reference
    },
    tablist: {
      mb: "-1px",
      borderBottom: "1px solid",
      borderColor: "inherit"
    }
  };
});
var variantSoftRounded = definePartsStyle4((props) => {
  const { colorScheme: c, theme: theme3 } = props;
  return {
    tab: {
      borderRadius: "full",
      fontWeight: "semibold",
      color: "gray.600",
      _selected: {
        color: getColor(theme3, `${c}.700`),
        bg: getColor(theme3, `${c}.100`)
      }
    }
  };
});
var variantSolidRounded = definePartsStyle4((props) => {
  const { colorScheme: c } = props;
  return {
    tab: {
      borderRadius: "full",
      fontWeight: "semibold",
      [$fg.variable]: "colors.gray.600",
      _dark: {
        [$fg.variable]: "inherit"
      },
      _selected: {
        [$fg.variable]: "colors.white",
        [$bg2.variable]: `colors.${c}.600`,
        _dark: {
          [$fg.variable]: "colors.gray.800",
          [$bg2.variable]: `colors.${c}.300`
        }
      },
      color: $fg.reference,
      bg: $bg2.reference
    }
  };
});
var variantUnstyled = definePartsStyle4({});
var variants2 = {
  line: variantLine,
  enclosed: variantEnclosed,
  "enclosed-colored": variantEnclosedColored,
  "soft-rounded": variantSoftRounded,
  "solid-rounded": variantSolidRounded,
  unstyled: variantUnstyled
};
var tabsTheme = defineMultiStyleConfig4({
  baseStyle: baseStyle4,
  sizes: sizes4,
  variants: variants2,
  defaultProps: {
    size: "md",
    variant: "line",
    colorScheme: "blue"
  }
});
var vars = defineCssVars("badge", ["bg", "color", "shadow"]);
var baseStyle5 = defineStyle({
  px: 1,
  textTransform: "uppercase",
  fontSize: "xs",
  borderRadius: "sm",
  fontWeight: "bold",
  bg: vars.bg.reference,
  color: vars.color.reference,
  boxShadow: vars.shadow.reference
});
var variantSolid = defineStyle((props) => {
  const { colorScheme: c, theme: theme3 } = props;
  const dark = transparentize(`${c}.500`, 0.6)(theme3);
  return {
    [vars.bg.variable]: `colors.${c}.500`,
    [vars.color.variable]: `colors.white`,
    _dark: {
      [vars.bg.variable]: dark,
      [vars.color.variable]: `colors.whiteAlpha.800`
    }
  };
});
var variantSubtle = defineStyle((props) => {
  const { colorScheme: c, theme: theme3 } = props;
  const darkBg = transparentize(`${c}.200`, 0.16)(theme3);
  return {
    [vars.bg.variable]: `colors.${c}.100`,
    [vars.color.variable]: `colors.${c}.800`,
    _dark: {
      [vars.bg.variable]: darkBg,
      [vars.color.variable]: `colors.${c}.200`
    }
  };
});
var variantOutline = defineStyle((props) => {
  const { colorScheme: c, theme: theme3 } = props;
  const darkColor = transparentize(`${c}.200`, 0.8)(theme3);
  return {
    [vars.color.variable]: `colors.${c}.500`,
    _dark: {
      [vars.color.variable]: darkColor
    },
    [vars.shadow.variable]: `inset 0 0 0px 1px ${vars.color.reference}`
  };
});
var variants3 = {
  solid: variantSolid,
  subtle: variantSubtle,
  outline: variantOutline
};
var badgeTheme = defineStyleConfig({
  baseStyle: baseStyle5,
  variants: variants3,
  defaultProps: {
    variant: "subtle",
    colorScheme: "gray"
  }
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-7RVLYCMR.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig5, definePartsStyle: definePartsStyle5 } = createMultiStyleConfigHelpers(tagAnatomy.keys);
var $bg3 = cssVar("tag-bg");
var $color = cssVar("tag-color");
var $shadow = cssVar("tag-shadow");
var $minH = cssVar("tag-min-height");
var $minW = cssVar("tag-min-width");
var $fontSize = cssVar("tag-font-size");
var $paddingX = cssVar("tag-padding-inline");
var baseStyleContainer = defineStyle({
  fontWeight: "medium",
  lineHeight: 1.2,
  outline: 0,
  [$color.variable]: vars.color.reference,
  [$bg3.variable]: vars.bg.reference,
  [$shadow.variable]: vars.shadow.reference,
  color: $color.reference,
  bg: $bg3.reference,
  boxShadow: $shadow.reference,
  borderRadius: "md",
  minH: $minH.reference,
  minW: $minW.reference,
  fontSize: $fontSize.reference,
  px: $paddingX.reference,
  _focusVisible: {
    [$shadow.variable]: "shadows.outline"
  }
});
var baseStyleLabel = defineStyle({
  lineHeight: 1.2,
  overflow: "visible"
});
var baseStyleCloseButton = defineStyle({
  fontSize: "lg",
  w: "5",
  h: "5",
  transitionProperty: "common",
  transitionDuration: "normal",
  borderRadius: "full",
  marginStart: "1.5",
  marginEnd: "-1",
  opacity: 0.5,
  _disabled: {
    opacity: 0.4
  },
  _focusVisible: {
    boxShadow: "outline",
    bg: "rgba(0, 0, 0, 0.14)"
  },
  _hover: {
    opacity: 0.8
  },
  _active: {
    opacity: 1
  }
});
var baseStyle6 = definePartsStyle5({
  container: baseStyleContainer,
  label: baseStyleLabel,
  closeButton: baseStyleCloseButton
});
var sizes5 = {
  sm: definePartsStyle5({
    container: {
      [$minH.variable]: "sizes.5",
      [$minW.variable]: "sizes.5",
      [$fontSize.variable]: "fontSizes.xs",
      [$paddingX.variable]: "space.2"
    },
    closeButton: {
      marginEnd: "-2px",
      marginStart: "0.35rem"
    }
  }),
  md: definePartsStyle5({
    container: {
      [$minH.variable]: "sizes.6",
      [$minW.variable]: "sizes.6",
      [$fontSize.variable]: "fontSizes.sm",
      [$paddingX.variable]: "space.2"
    }
  }),
  lg: definePartsStyle5({
    container: {
      [$minH.variable]: "sizes.8",
      [$minW.variable]: "sizes.8",
      [$fontSize.variable]: "fontSizes.md",
      [$paddingX.variable]: "space.3"
    }
  })
};
var variants4 = {
  subtle: definePartsStyle5((props) => {
    var _a6;
    return {
      container: (_a6 = badgeTheme.variants) == null ? void 0 : _a6.subtle(props)
    };
  }),
  solid: definePartsStyle5((props) => {
    var _a6;
    return {
      container: (_a6 = badgeTheme.variants) == null ? void 0 : _a6.solid(props)
    };
  }),
  outline: definePartsStyle5((props) => {
    var _a6;
    return {
      container: (_a6 = badgeTheme.variants) == null ? void 0 : _a6.outline(props)
    };
  })
};
var tagTheme = defineMultiStyleConfig5({
  variants: variants4,
  baseStyle: baseStyle6,
  sizes: sizes5,
  defaultProps: {
    size: "md",
    variant: "subtle",
    colorScheme: "gray"
  }
});
var { definePartsStyle: definePartsStyle6, defineMultiStyleConfig: defineMultiStyleConfig6 } = createMultiStyleConfigHelpers(inputAnatomy.keys);
var $height2 = cssVar("input-height");
var $fontSize2 = cssVar("input-font-size");
var $padding = cssVar("input-padding");
var $borderRadius = cssVar("input-border-radius");
var baseStyle7 = definePartsStyle6({
  addon: {
    height: $height2.reference,
    fontSize: $fontSize2.reference,
    px: $padding.reference,
    borderRadius: $borderRadius.reference
  },
  field: {
    width: "100%",
    height: $height2.reference,
    fontSize: $fontSize2.reference,
    px: $padding.reference,
    borderRadius: $borderRadius.reference,
    minWidth: 0,
    outline: 0,
    position: "relative",
    appearance: "none",
    transitionProperty: "common",
    transitionDuration: "normal",
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    }
  }
});
var size = {
  lg: defineStyle({
    [$fontSize2.variable]: "fontSizes.lg",
    [$padding.variable]: "space.4",
    [$borderRadius.variable]: "radii.md",
    [$height2.variable]: "sizes.12"
  }),
  md: defineStyle({
    [$fontSize2.variable]: "fontSizes.md",
    [$padding.variable]: "space.4",
    [$borderRadius.variable]: "radii.md",
    [$height2.variable]: "sizes.10"
  }),
  sm: defineStyle({
    [$fontSize2.variable]: "fontSizes.sm",
    [$padding.variable]: "space.3",
    [$borderRadius.variable]: "radii.sm",
    [$height2.variable]: "sizes.8"
  }),
  xs: defineStyle({
    [$fontSize2.variable]: "fontSizes.xs",
    [$padding.variable]: "space.2",
    [$borderRadius.variable]: "radii.sm",
    [$height2.variable]: "sizes.6"
  })
};
var sizes6 = {
  lg: definePartsStyle6({
    field: size.lg,
    group: size.lg
  }),
  md: definePartsStyle6({
    field: size.md,
    group: size.md
  }),
  sm: definePartsStyle6({
    field: size.sm,
    group: size.sm
  }),
  xs: definePartsStyle6({
    field: size.xs,
    group: size.xs
  })
};
function getDefaults(props) {
  const { focusBorderColor: fc, errorBorderColor: ec } = props;
  return {
    focusBorderColor: fc || mode("blue.500", "blue.300")(props),
    errorBorderColor: ec || mode("red.500", "red.300")(props)
  };
}
var variantOutline2 = definePartsStyle6((props) => {
  const { theme: theme3 } = props;
  const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults(props);
  return {
    field: {
      border: "1px solid",
      borderColor: "inherit",
      bg: "inherit",
      _hover: {
        borderColor: mode("gray.300", "whiteAlpha.400")(props)
      },
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _invalid: {
        borderColor: getColor(theme3, ec),
        boxShadow: `0 0 0 1px ${getColor(theme3, ec)}`
      },
      _focusVisible: {
        zIndex: 1,
        borderColor: getColor(theme3, fc),
        boxShadow: `0 0 0 1px ${getColor(theme3, fc)}`
      }
    },
    addon: {
      border: "1px solid",
      borderColor: mode("inherit", "whiteAlpha.50")(props),
      bg: mode("gray.100", "whiteAlpha.300")(props)
    }
  };
});
var variantFilled = definePartsStyle6((props) => {
  const { theme: theme3 } = props;
  const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults(props);
  return {
    field: {
      border: "2px solid",
      borderColor: "transparent",
      bg: mode("gray.100", "whiteAlpha.50")(props),
      _hover: {
        bg: mode("gray.200", "whiteAlpha.100")(props)
      },
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _invalid: {
        borderColor: getColor(theme3, ec)
      },
      _focusVisible: {
        bg: "transparent",
        borderColor: getColor(theme3, fc)
      }
    },
    addon: {
      border: "2px solid",
      borderColor: "transparent",
      bg: mode("gray.100", "whiteAlpha.50")(props)
    }
  };
});
var variantFlushed = definePartsStyle6((props) => {
  const { theme: theme3 } = props;
  const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults(props);
  return {
    field: {
      borderBottom: "1px solid",
      borderColor: "inherit",
      borderRadius: "0",
      px: "0",
      bg: "transparent",
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _invalid: {
        borderColor: getColor(theme3, ec),
        boxShadow: `0px 1px 0px 0px ${getColor(theme3, ec)}`
      },
      _focusVisible: {
        borderColor: getColor(theme3, fc),
        boxShadow: `0px 1px 0px 0px ${getColor(theme3, fc)}`
      }
    },
    addon: {
      borderBottom: "2px solid",
      borderColor: "inherit",
      borderRadius: "0",
      px: "0",
      bg: "transparent"
    }
  };
});
var variantUnstyled2 = definePartsStyle6({
  field: {
    bg: "transparent",
    px: "0",
    height: "auto"
  },
  addon: {
    bg: "transparent",
    px: "0",
    height: "auto"
  }
});
var variants5 = {
  outline: variantOutline2,
  filled: variantFilled,
  flushed: variantFlushed,
  unstyled: variantUnstyled2
};
var inputTheme = defineMultiStyleConfig6({
  baseStyle: baseStyle7,
  sizes: sizes6,
  variants: variants5,
  defaultProps: {
    size: "md",
    variant: "outline"
  }
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-KJ26FGJD.mjs
var _a;
var baseStyle8 = defineStyle({
  ...(_a = inputTheme.baseStyle) == null ? void 0 : _a.field,
  paddingY: "2",
  minHeight: "20",
  lineHeight: "short",
  verticalAlign: "top"
});
var _a2;
var _b;
var variants6 = {
  outline: defineStyle(
    (props) => {
      var _a42, _b32;
      return (_b32 = (_a42 = inputTheme.variants) == null ? void 0 : _a42.outline(props).field) != null ? _b32 : {};
    }
  ),
  flushed: defineStyle(
    (props) => {
      var _a42, _b32;
      return (_b32 = (_a42 = inputTheme.variants) == null ? void 0 : _a42.flushed(props).field) != null ? _b32 : {};
    }
  ),
  filled: defineStyle(
    (props) => {
      var _a42, _b32;
      return (_b32 = (_a42 = inputTheme.variants) == null ? void 0 : _a42.filled(props).field) != null ? _b32 : {};
    }
  ),
  unstyled: (_b = (_a2 = inputTheme.variants) == null ? void 0 : _a2.unstyled.field) != null ? _b : {}
};
var _a3;
var _b2;
var _c;
var _d;
var _e;
var _f;
var _g;
var _h;
var sizes7 = {
  xs: (_b2 = (_a3 = inputTheme.sizes) == null ? void 0 : _a3.xs.field) != null ? _b2 : {},
  sm: (_d = (_c = inputTheme.sizes) == null ? void 0 : _c.sm.field) != null ? _d : {},
  md: (_f = (_e = inputTheme.sizes) == null ? void 0 : _e.md.field) != null ? _f : {},
  lg: (_h = (_g = inputTheme.sizes) == null ? void 0 : _g.lg.field) != null ? _h : {}
};
var textareaTheme = defineStyleConfig({
  baseStyle: baseStyle8,
  sizes: sizes7,
  variants: variants6,
  defaultProps: {
    size: "md",
    variant: "outline"
  }
});
var $bg4 = cssVar$1("tooltip-bg");
var $fg2 = cssVar$1("tooltip-fg");
var $arrowBg = cssVar$1("popper-arrow-bg");
var baseStyle9 = defineStyle({
  bg: $bg4.reference,
  color: $fg2.reference,
  [$bg4.variable]: "colors.gray.700",
  [$fg2.variable]: "colors.whiteAlpha.900",
  _dark: {
    [$bg4.variable]: "colors.gray.300",
    [$fg2.variable]: "colors.gray.900"
  },
  [$arrowBg.variable]: $bg4.reference,
  px: "2",
  py: "0.5",
  borderRadius: "sm",
  fontWeight: "medium",
  fontSize: "sm",
  boxShadow: "md",
  maxW: "xs",
  zIndex: "tooltip"
});
var tooltipTheme = defineStyleConfig({
  baseStyle: baseStyle9
});
var { defineMultiStyleConfig: defineMultiStyleConfig7, definePartsStyle: definePartsStyle7 } = createMultiStyleConfigHelpers(progressAnatomy.keys);
var filledStyle = defineStyle((props) => {
  const { colorScheme: c, theme: t2, isIndeterminate, hasStripe } = props;
  const stripeStyle = mode(
    generateStripe(),
    generateStripe("1rem", "rgba(0,0,0,0.1)")
  )(props);
  const bgColor = mode(`${c}.500`, `${c}.200`)(props);
  const gradient = `linear-gradient(
    to right,
    transparent 0%,
    ${getColor(t2, bgColor)} 50%,
    transparent 100%
  )`;
  const addStripe = !isIndeterminate && hasStripe;
  return {
    ...addStripe && stripeStyle,
    ...isIndeterminate ? { bgImage: gradient } : { bgColor }
  };
});
var baseStyleLabel2 = defineStyle({
  lineHeight: "1",
  fontSize: "0.25em",
  fontWeight: "bold",
  color: "white"
});
var baseStyleTrack2 = defineStyle((props) => {
  return {
    bg: mode("gray.100", "whiteAlpha.300")(props)
  };
});
var baseStyleFilledTrack = defineStyle((props) => {
  return {
    transitionProperty: "common",
    transitionDuration: "slow",
    ...filledStyle(props)
  };
});
var baseStyle10 = definePartsStyle7((props) => ({
  label: baseStyleLabel2,
  filledTrack: baseStyleFilledTrack(props),
  track: baseStyleTrack2(props)
}));
var sizes8 = {
  xs: definePartsStyle7({
    track: { h: "1" }
  }),
  sm: definePartsStyle7({
    track: { h: "2" }
  }),
  md: definePartsStyle7({
    track: { h: "3" }
  }),
  lg: definePartsStyle7({
    track: { h: "4" }
  })
};
var progressTheme = defineMultiStyleConfig7({
  sizes: sizes8,
  baseStyle: baseStyle10,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-UV3F75RF.mjs
var isFunction = (value) => typeof value === "function";
function runIfFn(valueOrFn, ...args) {
  return isFunction(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
var { definePartsStyle: definePartsStyle8, defineMultiStyleConfig: defineMultiStyleConfig8 } = createMultiStyleConfigHelpers(checkboxAnatomy.keys);
var $size2 = cssVar("checkbox-size");
var baseStyleControl = defineStyle((props) => {
  const { colorScheme: c } = props;
  return {
    w: $size2.reference,
    h: $size2.reference,
    transitionProperty: "box-shadow",
    transitionDuration: "normal",
    border: "2px solid",
    borderRadius: "sm",
    borderColor: "inherit",
    color: "white",
    _checked: {
      bg: mode(`${c}.500`, `${c}.200`)(props),
      borderColor: mode(`${c}.500`, `${c}.200`)(props),
      color: mode("white", "gray.900")(props),
      _hover: {
        bg: mode(`${c}.600`, `${c}.300`)(props),
        borderColor: mode(`${c}.600`, `${c}.300`)(props)
      },
      _disabled: {
        borderColor: mode("gray.200", "transparent")(props),
        bg: mode("gray.200", "whiteAlpha.300")(props),
        color: mode("gray.500", "whiteAlpha.500")(props)
      }
    },
    _indeterminate: {
      bg: mode(`${c}.500`, `${c}.200`)(props),
      borderColor: mode(`${c}.500`, `${c}.200`)(props),
      color: mode("white", "gray.900")(props)
    },
    _disabled: {
      bg: mode("gray.100", "whiteAlpha.100")(props),
      borderColor: mode("gray.100", "transparent")(props)
    },
    _focusVisible: {
      boxShadow: "outline"
    },
    _invalid: {
      borderColor: mode("red.500", "red.300")(props)
    }
  };
});
var baseStyleContainer2 = defineStyle({
  _disabled: { cursor: "not-allowed" }
});
var baseStyleLabel3 = defineStyle({
  userSelect: "none",
  _disabled: { opacity: 0.4 }
});
var baseStyleIcon = defineStyle({
  transitionProperty: "transform",
  transitionDuration: "normal"
});
var baseStyle11 = definePartsStyle8((props) => ({
  icon: baseStyleIcon,
  container: baseStyleContainer2,
  control: runIfFn(baseStyleControl, props),
  label: baseStyleLabel3
}));
var sizes9 = {
  sm: definePartsStyle8({
    control: { [$size2.variable]: "sizes.3" },
    label: { fontSize: "sm" },
    icon: { fontSize: "3xs" }
  }),
  md: definePartsStyle8({
    control: { [$size2.variable]: "sizes.4" },
    label: { fontSize: "md" },
    icon: { fontSize: "2xs" }
  }),
  lg: definePartsStyle8({
    control: { [$size2.variable]: "sizes.5" },
    label: { fontSize: "lg" },
    icon: { fontSize: "2xs" }
  })
};
var checkboxTheme = defineMultiStyleConfig8({
  baseStyle: baseStyle11,
  sizes: sizes9,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-VZUATZ4E.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig9, definePartsStyle: definePartsStyle9 } = createMultiStyleConfigHelpers(radioAnatomy.keys);
var baseStyleControl2 = defineStyle((props) => {
  var _a6;
  const controlStyle = (_a6 = runIfFn(checkboxTheme.baseStyle, props)) == null ? void 0 : _a6.control;
  return {
    ...controlStyle,
    borderRadius: "full",
    _checked: {
      ...controlStyle == null ? void 0 : controlStyle["_checked"],
      _before: {
        content: `""`,
        display: "inline-block",
        pos: "relative",
        w: "50%",
        h: "50%",
        borderRadius: "50%",
        bg: "currentColor"
      }
    }
  };
});
var baseStyle12 = definePartsStyle9((props) => {
  var _a6, _b5, _c3, _d3;
  return {
    label: (_b5 = (_a6 = checkboxTheme).baseStyle) == null ? void 0 : _b5.call(_a6, props).label,
    container: (_d3 = (_c3 = checkboxTheme).baseStyle) == null ? void 0 : _d3.call(_c3, props).container,
    control: baseStyleControl2(props)
  };
});
var sizes10 = {
  md: definePartsStyle9({
    control: { w: "4", h: "4" },
    label: { fontSize: "md" }
  }),
  lg: definePartsStyle9({
    control: { w: "5", h: "5" },
    label: { fontSize: "lg" }
  }),
  sm: definePartsStyle9({
    control: { width: "3", height: "3" },
    label: { fontSize: "sm" }
  })
};
var radioTheme = defineMultiStyleConfig9({
  baseStyle: baseStyle12,
  sizes: sizes10,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-NNA4E64A.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig10, definePartsStyle: definePartsStyle10 } = createMultiStyleConfigHelpers(selectAnatomy.keys);
var $bg5 = cssVar("select-bg");
var _a4;
var baseStyleField = defineStyle({
  ...(_a4 = inputTheme.baseStyle) == null ? void 0 : _a4.field,
  appearance: "none",
  paddingBottom: "1px",
  lineHeight: "normal",
  bg: $bg5.reference,
  [$bg5.variable]: "colors.white",
  _dark: {
    [$bg5.variable]: "colors.gray.700"
  },
  "> option, > optgroup": {
    bg: $bg5.reference
  }
});
var baseStyleIcon2 = defineStyle({
  width: "6",
  height: "100%",
  insetEnd: "2",
  position: "relative",
  color: "currentColor",
  fontSize: "xl",
  _disabled: {
    opacity: 0.5
  }
});
var baseStyle13 = definePartsStyle10({
  field: baseStyleField,
  icon: baseStyleIcon2
});
var iconSpacing = defineStyle({
  paddingInlineEnd: "8"
});
var _a22;
var _b3;
var _c2;
var _d2;
var _e2;
var _f2;
var _g2;
var _h2;
var sizes11 = {
  lg: {
    ...(_a22 = inputTheme.sizes) == null ? void 0 : _a22.lg,
    field: {
      ...(_b3 = inputTheme.sizes) == null ? void 0 : _b3.lg.field,
      ...iconSpacing
    }
  },
  md: {
    ...(_c2 = inputTheme.sizes) == null ? void 0 : _c2.md,
    field: {
      ...(_d2 = inputTheme.sizes) == null ? void 0 : _d2.md.field,
      ...iconSpacing
    }
  },
  sm: {
    ...(_e2 = inputTheme.sizes) == null ? void 0 : _e2.sm,
    field: {
      ...(_f2 = inputTheme.sizes) == null ? void 0 : _f2.sm.field,
      ...iconSpacing
    }
  },
  xs: {
    ...(_g2 = inputTheme.sizes) == null ? void 0 : _g2.xs,
    field: {
      ...(_h2 = inputTheme.sizes) == null ? void 0 : _h2.xs.field,
      ...iconSpacing
    },
    icon: {
      insetEnd: "1"
    }
  }
};
var selectTheme = defineMultiStyleConfig10({
  baseStyle: baseStyle13,
  sizes: sizes11,
  variants: inputTheme.variants,
  defaultProps: inputTheme.defaultProps
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-X6XFE4TF.mjs
var $startColor = cssVar("skeleton-start-color");
var $endColor = cssVar("skeleton-end-color");
var baseStyle14 = defineStyle({
  [$startColor.variable]: "colors.gray.100",
  [$endColor.variable]: "colors.gray.400",
  _dark: {
    [$startColor.variable]: "colors.gray.800",
    [$endColor.variable]: "colors.gray.600"
  },
  background: $startColor.reference,
  borderColor: $endColor.reference,
  opacity: 0.7,
  borderRadius: "sm"
});
var skeletonTheme = defineStyleConfig({
  baseStyle: baseStyle14
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-ZREGO6US.mjs
var $bg6 = cssVar("skip-link-bg");
var baseStyle15 = defineStyle({
  borderRadius: "md",
  fontWeight: "semibold",
  _focusVisible: {
    boxShadow: "outline",
    padding: "4",
    position: "fixed",
    top: "6",
    insetStart: "6",
    [$bg6.variable]: "colors.white",
    _dark: {
      [$bg6.variable]: "colors.gray.700"
    },
    bg: $bg6.reference
  }
});
var skipLinkTheme = defineStyleConfig({
  baseStyle: baseStyle15
});
var { defineMultiStyleConfig: defineMultiStyleConfig11, definePartsStyle: definePartsStyle11 } = createMultiStyleConfigHelpers(sliderAnatomy.keys);
var $thumbSize = cssVar("slider-thumb-size");
var $trackSize = cssVar("slider-track-size");
var $bg7 = cssVar("slider-bg");
var baseStyleContainer3 = defineStyle((props) => {
  const { orientation } = props;
  return {
    display: "inline-block",
    position: "relative",
    cursor: "pointer",
    _disabled: {
      opacity: 0.6,
      cursor: "default",
      pointerEvents: "none"
    },
    ...orient({
      orientation,
      vertical: { h: "100%" },
      horizontal: { w: "100%" }
    })
  };
});
var baseStyleTrack3 = defineStyle((props) => {
  const orientationStyles = orient({
    orientation: props.orientation,
    horizontal: { h: $trackSize.reference },
    vertical: { w: $trackSize.reference }
  });
  return {
    ...orientationStyles,
    overflow: "hidden",
    borderRadius: "sm",
    [$bg7.variable]: "colors.gray.200",
    _dark: {
      [$bg7.variable]: "colors.whiteAlpha.200"
    },
    _disabled: {
      [$bg7.variable]: "colors.gray.300",
      _dark: {
        [$bg7.variable]: "colors.whiteAlpha.300"
      }
    },
    bg: $bg7.reference
  };
});
var baseStyleThumb2 = defineStyle((props) => {
  const { orientation } = props;
  const orientationStyle = orient({
    orientation,
    vertical: {
      left: "50%",
      transform: `translateX(-50%)`,
      _active: {
        transform: `translateX(-50%) scale(1.15)`
      }
    },
    horizontal: {
      top: "50%",
      transform: `translateY(-50%)`,
      _active: {
        transform: `translateY(-50%) scale(1.15)`
      }
    }
  });
  return {
    ...orientationStyle,
    w: $thumbSize.reference,
    h: $thumbSize.reference,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    position: "absolute",
    outline: 0,
    zIndex: 1,
    borderRadius: "full",
    bg: "white",
    boxShadow: "base",
    border: "1px solid",
    borderColor: "transparent",
    transitionProperty: "transform",
    transitionDuration: "normal",
    _focusVisible: {
      boxShadow: "outline"
    },
    _disabled: {
      bg: "gray.300"
    }
  };
});
var baseStyleFilledTrack2 = defineStyle((props) => {
  const { colorScheme: c } = props;
  return {
    width: "inherit",
    height: "inherit",
    [$bg7.variable]: `colors.${c}.500`,
    _dark: {
      [$bg7.variable]: `colors.${c}.200`
    },
    bg: $bg7.reference
  };
});
var baseStyle16 = definePartsStyle11((props) => ({
  container: baseStyleContainer3(props),
  track: baseStyleTrack3(props),
  thumb: baseStyleThumb2(props),
  filledTrack: baseStyleFilledTrack2(props)
}));
var sizeLg = definePartsStyle11({
  container: {
    [$thumbSize.variable]: `sizes.4`,
    [$trackSize.variable]: `sizes.1`
  }
});
var sizeMd = definePartsStyle11({
  container: {
    [$thumbSize.variable]: `sizes.3.5`,
    [$trackSize.variable]: `sizes.1`
  }
});
var sizeSm = definePartsStyle11({
  container: {
    [$thumbSize.variable]: `sizes.2.5`,
    [$trackSize.variable]: `sizes.0.5`
  }
});
var sizes12 = {
  lg: sizeLg,
  md: sizeMd,
  sm: sizeSm
};
var sliderTheme = defineMultiStyleConfig11({
  baseStyle: baseStyle16,
  sizes: sizes12,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});
var $size3 = cssVar$1("spinner-size");
var baseStyle17 = defineStyle({
  width: [$size3.reference],
  height: [$size3.reference]
});
var sizes13 = {
  xs: defineStyle({
    [$size3.variable]: "sizes.3"
  }),
  sm: defineStyle({
    [$size3.variable]: "sizes.4"
  }),
  md: defineStyle({
    [$size3.variable]: "sizes.6"
  }),
  lg: defineStyle({
    [$size3.variable]: "sizes.8"
  }),
  xl: defineStyle({
    [$size3.variable]: "sizes.12"
  })
};
var spinnerTheme = defineStyleConfig({
  baseStyle: baseStyle17,
  sizes: sizes13,
  defaultProps: {
    size: "md"
  }
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-2KWJXISX.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig12, definePartsStyle: definePartsStyle12 } = createMultiStyleConfigHelpers(statAnatomy.keys);
var baseStyleLabel4 = defineStyle({
  fontWeight: "medium"
});
var baseStyleHelpText = defineStyle({
  opacity: 0.8,
  marginBottom: "2"
});
var baseStyleNumber = defineStyle({
  verticalAlign: "baseline",
  fontWeight: "semibold"
});
var baseStyleIcon3 = defineStyle({
  marginEnd: 1,
  w: "3.5",
  h: "3.5",
  verticalAlign: "middle"
});
var baseStyle18 = definePartsStyle12({
  container: {},
  label: baseStyleLabel4,
  helpText: baseStyleHelpText,
  number: baseStyleNumber,
  icon: baseStyleIcon3
});
var sizes14 = {
  md: definePartsStyle12({
    label: { fontSize: "sm" },
    helpText: { fontSize: "sm" },
    number: { fontSize: "2xl" }
  })
};
var statTheme = defineMultiStyleConfig12({
  baseStyle: baseStyle18,
  sizes: sizes14,
  defaultProps: {
    size: "md"
  }
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-AFCBUAM5.mjs
var $bg8 = cssVar("kbd-bg");
var baseStyle19 = defineStyle({
  [$bg8.variable]: "colors.gray.100",
  _dark: {
    [$bg8.variable]: "colors.whiteAlpha.100"
  },
  bg: $bg8.reference,
  borderRadius: "md",
  borderWidth: "1px",
  borderBottomWidth: "3px",
  fontSize: "0.8em",
  fontWeight: "bold",
  lineHeight: "normal",
  px: "0.4em",
  whiteSpace: "nowrap"
});
var kbdTheme = defineStyleConfig({
  baseStyle: baseStyle19
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-V5KSHSOQ.mjs
var baseStyle20 = defineStyle({
  transitionProperty: "common",
  transitionDuration: "fast",
  transitionTimingFunction: "ease-out",
  cursor: "pointer",
  textDecoration: "none",
  outline: "none",
  color: "inherit",
  _hover: {
    textDecoration: "underline"
  },
  _focusVisible: {
    boxShadow: "outline"
  }
});
var linkTheme = defineStyleConfig({
  baseStyle: baseStyle20
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-MGNM2WZQ.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig13, definePartsStyle: definePartsStyle13 } = createMultiStyleConfigHelpers(listAnatomy.keys);
var baseStyleIcon4 = defineStyle({
  marginEnd: "2",
  display: "inline",
  verticalAlign: "text-bottom"
});
var baseStyle21 = definePartsStyle13({
  icon: baseStyleIcon4
});
var listTheme = defineMultiStyleConfig13({
  baseStyle: baseStyle21
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-N2GP2AF7.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig14, definePartsStyle: definePartsStyle14 } = createMultiStyleConfigHelpers(menuAnatomy.keys);
var $bg9 = cssVar("menu-bg");
var $shadow2 = cssVar("menu-shadow");
var baseStyleList = defineStyle({
  [$bg9.variable]: "#fff",
  [$shadow2.variable]: "shadows.sm",
  _dark: {
    [$bg9.variable]: "colors.gray.700",
    [$shadow2.variable]: "shadows.dark-lg"
  },
  color: "inherit",
  minW: "3xs",
  py: "2",
  zIndex: 1,
  borderRadius: "md",
  borderWidth: "1px",
  bg: $bg9.reference,
  boxShadow: $shadow2.reference
});
var baseStyleItem = defineStyle({
  py: "1.5",
  px: "3",
  transitionProperty: "background",
  transitionDuration: "ultra-fast",
  transitionTimingFunction: "ease-in",
  _focus: {
    [$bg9.variable]: "colors.gray.100",
    _dark: {
      [$bg9.variable]: "colors.whiteAlpha.100"
    }
  },
  _active: {
    [$bg9.variable]: "colors.gray.200",
    _dark: {
      [$bg9.variable]: "colors.whiteAlpha.200"
    }
  },
  _expanded: {
    [$bg9.variable]: "colors.gray.100",
    _dark: {
      [$bg9.variable]: "colors.whiteAlpha.100"
    }
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed"
  },
  bg: $bg9.reference
});
var baseStyleGroupTitle = defineStyle({
  mx: 4,
  my: 2,
  fontWeight: "semibold",
  fontSize: "sm"
});
var baseStyleIcon5 = defineStyle({
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  flexShrink: 0
});
var baseStyleCommand = defineStyle({
  opacity: 0.6
});
var baseStyleDivider = defineStyle({
  border: 0,
  borderBottom: "1px solid",
  borderColor: "inherit",
  my: "2",
  opacity: 0.6
});
var baseStyleButton = defineStyle({
  transitionProperty: "common",
  transitionDuration: "normal"
});
var baseStyle22 = definePartsStyle14({
  button: baseStyleButton,
  list: baseStyleList,
  item: baseStyleItem,
  groupTitle: baseStyleGroupTitle,
  icon: baseStyleIcon5,
  command: baseStyleCommand,
  divider: baseStyleDivider
});
var menuTheme = defineMultiStyleConfig14({
  baseStyle: baseStyle22
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-JN6QBAR6.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig15, definePartsStyle: definePartsStyle15 } = createMultiStyleConfigHelpers(modalAnatomy.keys);
var $bg10 = cssVar("modal-bg");
var $shadow3 = cssVar("modal-shadow");
var baseStyleOverlay = defineStyle({
  bg: "blackAlpha.600",
  zIndex: "modal"
});
var baseStyleDialogContainer = defineStyle((props) => {
  const { isCentered, scrollBehavior } = props;
  return {
    display: "flex",
    zIndex: "modal",
    justifyContent: "center",
    alignItems: isCentered ? "center" : "flex-start",
    overflow: scrollBehavior === "inside" ? "hidden" : "auto",
    overscrollBehaviorY: "none"
  };
});
var baseStyleDialog = defineStyle((props) => {
  const { isCentered, scrollBehavior } = props;
  return {
    borderRadius: "md",
    color: "inherit",
    my: isCentered ? "auto" : "16",
    mx: isCentered ? "auto" : void 0,
    zIndex: "modal",
    maxH: scrollBehavior === "inside" ? "calc(100% - 7.5rem)" : void 0,
    [$bg10.variable]: "colors.white",
    [$shadow3.variable]: "shadows.lg",
    _dark: {
      [$bg10.variable]: "colors.gray.700",
      [$shadow3.variable]: "shadows.dark-lg"
    },
    bg: $bg10.reference,
    boxShadow: $shadow3.reference
  };
});
var baseStyleHeader = defineStyle({
  px: "6",
  py: "4",
  fontSize: "xl",
  fontWeight: "semibold"
});
var baseStyleCloseButton2 = defineStyle({
  position: "absolute",
  top: "2",
  insetEnd: "3"
});
var baseStyleBody = defineStyle((props) => {
  const { scrollBehavior } = props;
  return {
    px: "6",
    py: "2",
    flex: "1",
    overflow: scrollBehavior === "inside" ? "auto" : void 0
  };
});
var baseStyleFooter = defineStyle({
  px: "6",
  py: "4"
});
var baseStyle23 = definePartsStyle15((props) => ({
  overlay: baseStyleOverlay,
  dialogContainer: runIfFn(baseStyleDialogContainer, props),
  dialog: runIfFn(baseStyleDialog, props),
  header: baseStyleHeader,
  closeButton: baseStyleCloseButton2,
  body: runIfFn(baseStyleBody, props),
  footer: baseStyleFooter
}));
function getSize(value) {
  if (value === "full") {
    return definePartsStyle15({
      dialog: {
        maxW: "100vw",
        minH: "$100vh",
        my: "0",
        borderRadius: "0"
      }
    });
  }
  return definePartsStyle15({
    dialog: { maxW: value }
  });
}
var sizes15 = {
  xs: getSize("xs"),
  sm: getSize("sm"),
  md: getSize("md"),
  lg: getSize("lg"),
  xl: getSize("xl"),
  "2xl": getSize("2xl"),
  "3xl": getSize("3xl"),
  "4xl": getSize("4xl"),
  "5xl": getSize("5xl"),
  "6xl": getSize("6xl"),
  full: getSize("full")
};
var modalTheme = defineMultiStyleConfig15({
  baseStyle: baseStyle23,
  sizes: sizes15,
  defaultProps: { size: "md" }
});
var { defineMultiStyleConfig: defineMultiStyleConfig16, definePartsStyle: definePartsStyle16 } = createMultiStyleConfigHelpers(numberInputAnatomy.keys);
var $stepperWidth = cssVar$1("number-input-stepper-width");
var $inputPadding = cssVar$1("number-input-input-padding");
var inputPaddingValue = calc$1($stepperWidth).add("0.5rem").toString();
var $bg11 = cssVar$1("number-input-bg");
var $fg3 = cssVar$1("number-input-color");
var $border2 = cssVar$1("number-input-border-color");
var baseStyleRoot2 = defineStyle({
  [$stepperWidth.variable]: "sizes.6",
  [$inputPadding.variable]: inputPaddingValue
});
var baseStyleField2 = defineStyle(
  (props) => {
    var _a6, _b5;
    return (_b5 = (_a6 = runIfFn(inputTheme.baseStyle, props)) == null ? void 0 : _a6.field) != null ? _b5 : {};
  }
);
var baseStyleStepperGroup = defineStyle({
  width: $stepperWidth.reference
});
var baseStyleStepper = defineStyle({
  borderStart: "1px solid",
  borderStartColor: $border2.reference,
  color: $fg3.reference,
  bg: $bg11.reference,
  [$fg3.variable]: "colors.chakra-body-text",
  [$border2.variable]: "colors.chakra-border-color",
  _dark: {
    [$fg3.variable]: "colors.whiteAlpha.800",
    [$border2.variable]: "colors.whiteAlpha.300"
  },
  _active: {
    [$bg11.variable]: "colors.gray.200",
    _dark: {
      [$bg11.variable]: "colors.whiteAlpha.300"
    }
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed"
  }
});
var baseStyle24 = definePartsStyle16((props) => {
  var _a6;
  return {
    root: baseStyleRoot2,
    field: (_a6 = runIfFn(baseStyleField2, props)) != null ? _a6 : {},
    stepperGroup: baseStyleStepperGroup,
    stepper: baseStyleStepper
  };
});
function getSize2(size2) {
  var _a6, _b5, _c3;
  const sizeStyle = (_a6 = inputTheme.sizes) == null ? void 0 : _a6[size2];
  const radius = {
    lg: "md",
    md: "md",
    sm: "sm",
    xs: "sm"
  };
  const _fontSize = (_c3 = (_b5 = sizeStyle.field) == null ? void 0 : _b5.fontSize) != null ? _c3 : "md";
  const fontSize = typography_default.fontSizes[_fontSize];
  return definePartsStyle16({
    field: {
      ...sizeStyle.field,
      paddingInlineEnd: $inputPadding.reference,
      verticalAlign: "top"
    },
    stepper: {
      fontSize: calc$1(fontSize).multiply(0.75).toString(),
      _first: {
        borderTopEndRadius: radius[size2]
      },
      _last: {
        borderBottomEndRadius: radius[size2],
        mt: "-1px",
        borderTopWidth: 1
      }
    }
  });
}
var sizes16 = {
  xs: getSize2("xs"),
  sm: getSize2("sm"),
  md: getSize2("md"),
  lg: getSize2("lg")
};
var numberInputTheme = defineMultiStyleConfig16({
  baseStyle: baseStyle24,
  sizes: sizes16,
  variants: inputTheme.variants,
  defaultProps: inputTheme.defaultProps
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-OEFJDLVS.mjs
var _a5;
var baseStyle25 = defineStyle({
  ...(_a5 = inputTheme.baseStyle) == null ? void 0 : _a5.field,
  textAlign: "center"
});
var sizes17 = {
  lg: defineStyle({
    fontSize: "lg",
    w: 12,
    h: 12,
    borderRadius: "md"
  }),
  md: defineStyle({
    fontSize: "md",
    w: 10,
    h: 10,
    borderRadius: "md"
  }),
  sm: defineStyle({
    fontSize: "sm",
    w: 8,
    h: 8,
    borderRadius: "sm"
  }),
  xs: defineStyle({
    fontSize: "xs",
    w: 6,
    h: 6,
    borderRadius: "sm"
  })
};
var _a23;
var _b4;
var variants7 = {
  outline: defineStyle(
    (props) => {
      var _a32, _b22, _c3;
      return (_c3 = (_b22 = runIfFn((_a32 = inputTheme.variants) == null ? void 0 : _a32.outline, props)) == null ? void 0 : _b22.field) != null ? _c3 : {};
    }
  ),
  flushed: defineStyle(
    (props) => {
      var _a32, _b22, _c3;
      return (_c3 = (_b22 = runIfFn((_a32 = inputTheme.variants) == null ? void 0 : _a32.flushed, props)) == null ? void 0 : _b22.field) != null ? _c3 : {};
    }
  ),
  filled: defineStyle(
    (props) => {
      var _a32, _b22, _c3;
      return (_c3 = (_b22 = runIfFn((_a32 = inputTheme.variants) == null ? void 0 : _a32.filled, props)) == null ? void 0 : _b22.field) != null ? _c3 : {};
    }
  ),
  unstyled: (_b4 = (_a23 = inputTheme.variants) == null ? void 0 : _a23.unstyled.field) != null ? _b4 : {}
};
var pinInputTheme = defineStyleConfig({
  baseStyle: baseStyle25,
  sizes: sizes17,
  variants: variants7,
  defaultProps: inputTheme.defaultProps
});
var { defineMultiStyleConfig: defineMultiStyleConfig17, definePartsStyle: definePartsStyle17 } = createMultiStyleConfigHelpers(popoverAnatomy.keys);
var $popperBg = cssVar$1("popper-bg");
var $arrowBg2 = cssVar$1("popper-arrow-bg");
var $arrowShadowColor = cssVar$1("popper-arrow-shadow-color");
var baseStylePopper = defineStyle({ zIndex: 10 });
var baseStyleContent = defineStyle({
  [$popperBg.variable]: `colors.white`,
  bg: $popperBg.reference,
  [$arrowBg2.variable]: $popperBg.reference,
  [$arrowShadowColor.variable]: `colors.gray.200`,
  _dark: {
    [$popperBg.variable]: `colors.gray.700`,
    [$arrowShadowColor.variable]: `colors.whiteAlpha.300`
  },
  width: "xs",
  border: "1px solid",
  borderColor: "inherit",
  borderRadius: "md",
  boxShadow: "sm",
  zIndex: "inherit",
  _focusVisible: {
    outline: 0,
    boxShadow: "outline"
  }
});
var baseStyleHeader2 = defineStyle({
  px: 3,
  py: 2,
  borderBottomWidth: "1px"
});
var baseStyleBody2 = defineStyle({
  px: 3,
  py: 2
});
var baseStyleFooter2 = defineStyle({
  px: 3,
  py: 2,
  borderTopWidth: "1px"
});
var baseStyleCloseButton3 = defineStyle({
  position: "absolute",
  borderRadius: "md",
  top: 1,
  insetEnd: 2,
  padding: 2
});
var baseStyle26 = definePartsStyle17({
  popper: baseStylePopper,
  content: baseStyleContent,
  header: baseStyleHeader2,
  body: baseStyleBody2,
  footer: baseStyleFooter2,
  closeButton: baseStyleCloseButton3
});
var popoverTheme = defineMultiStyleConfig17({
  baseStyle: baseStyle26
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-VWP3ZVQT.mjs
var { definePartsStyle: definePartsStyle18, defineMultiStyleConfig: defineMultiStyleConfig18 } = createMultiStyleConfigHelpers(drawerAnatomy.keys);
var $bg12 = cssVar("drawer-bg");
var $bs = cssVar("drawer-box-shadow");
function getSize3(value) {
  if (value === "full") {
    return definePartsStyle18({
      dialog: { maxW: "100vw", h: "100vh" }
    });
  }
  return definePartsStyle18({
    dialog: { maxW: value }
  });
}
var baseStyleOverlay2 = defineStyle({
  bg: "blackAlpha.600",
  zIndex: "modal"
});
var baseStyleDialogContainer2 = defineStyle({
  display: "flex",
  zIndex: "modal",
  justifyContent: "center"
});
var baseStyleDialog2 = defineStyle((props) => {
  const { isFullHeight } = props;
  return {
    ...isFullHeight && { height: "100vh" },
    zIndex: "modal",
    maxH: "100vh",
    color: "inherit",
    [$bg12.variable]: "colors.white",
    [$bs.variable]: "shadows.lg",
    _dark: {
      [$bg12.variable]: "colors.gray.700",
      [$bs.variable]: "shadows.dark-lg"
    },
    bg: $bg12.reference,
    boxShadow: $bs.reference
  };
});
var baseStyleHeader3 = defineStyle({
  px: "6",
  py: "4",
  fontSize: "xl",
  fontWeight: "semibold"
});
var baseStyleCloseButton4 = defineStyle({
  position: "absolute",
  top: "2",
  insetEnd: "3"
});
var baseStyleBody3 = defineStyle({
  px: "6",
  py: "2",
  flex: "1",
  overflow: "auto"
});
var baseStyleFooter3 = defineStyle({
  px: "6",
  py: "4"
});
var baseStyle27 = definePartsStyle18((props) => ({
  overlay: baseStyleOverlay2,
  dialogContainer: baseStyleDialogContainer2,
  dialog: runIfFn(baseStyleDialog2, props),
  header: baseStyleHeader3,
  closeButton: baseStyleCloseButton4,
  body: baseStyleBody3,
  footer: baseStyleFooter3
}));
var sizes18 = {
  xs: getSize3("xs"),
  sm: getSize3("md"),
  md: getSize3("lg"),
  lg: getSize3("2xl"),
  xl: getSize3("4xl"),
  full: getSize3("full")
};
var drawerTheme = defineMultiStyleConfig18({
  baseStyle: baseStyle27,
  sizes: sizes18,
  defaultProps: {
    size: "xs"
  }
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-D6DZ26HA.mjs
var { definePartsStyle: definePartsStyle19, defineMultiStyleConfig: defineMultiStyleConfig19 } = createMultiStyleConfigHelpers(editableAnatomy.keys);
var baseStylePreview = defineStyle({
  borderRadius: "md",
  py: "1",
  transitionProperty: "common",
  transitionDuration: "normal"
});
var baseStyleInput = defineStyle({
  borderRadius: "md",
  py: "1",
  transitionProperty: "common",
  transitionDuration: "normal",
  width: "full",
  _focusVisible: { boxShadow: "outline" },
  _placeholder: { opacity: 0.6 }
});
var baseStyleTextarea = defineStyle({
  borderRadius: "md",
  py: "1",
  transitionProperty: "common",
  transitionDuration: "normal",
  width: "full",
  _focusVisible: { boxShadow: "outline" },
  _placeholder: { opacity: 0.6 }
});
var baseStyle28 = definePartsStyle19({
  preview: baseStylePreview,
  input: baseStyleInput,
  textarea: baseStyleTextarea
});
var editableTheme = defineMultiStyleConfig19({
  baseStyle: baseStyle28
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-O6GGGS4Y.mjs
var { definePartsStyle: definePartsStyle20, defineMultiStyleConfig: defineMultiStyleConfig20 } = createMultiStyleConfigHelpers(formAnatomy.keys);
var $fg4 = cssVar("form-control-color");
var baseStyleRequiredIndicator = defineStyle({
  marginStart: "1",
  [$fg4.variable]: "colors.red.500",
  _dark: {
    [$fg4.variable]: "colors.red.300"
  },
  color: $fg4.reference
});
var baseStyleHelperText = defineStyle({
  mt: "2",
  [$fg4.variable]: "colors.gray.600",
  _dark: {
    [$fg4.variable]: "colors.whiteAlpha.600"
  },
  color: $fg4.reference,
  lineHeight: "normal",
  fontSize: "sm"
});
var baseStyle29 = definePartsStyle20({
  container: {
    width: "100%",
    position: "relative"
  },
  requiredIndicator: baseStyleRequiredIndicator,
  helperText: baseStyleHelperText
});
var formTheme = defineMultiStyleConfig20({
  baseStyle: baseStyle29
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-SRBDDT7F.mjs
var { definePartsStyle: definePartsStyle21, defineMultiStyleConfig: defineMultiStyleConfig21 } = createMultiStyleConfigHelpers(formErrorAnatomy.keys);
var $fg5 = cssVar("form-error-color");
var baseStyleText = defineStyle({
  [$fg5.variable]: `colors.red.500`,
  _dark: {
    [$fg5.variable]: `colors.red.300`
  },
  color: $fg5.reference,
  mt: "2",
  fontSize: "sm",
  lineHeight: "normal"
});
var baseStyleIcon6 = defineStyle({
  marginEnd: "0.5em",
  [$fg5.variable]: `colors.red.500`,
  _dark: {
    [$fg5.variable]: `colors.red.300`
  },
  color: $fg5.reference
});
var baseStyle30 = definePartsStyle21({
  text: baseStyleText,
  icon: baseStyleIcon6
});
var formErrorTheme = defineMultiStyleConfig21({
  baseStyle: baseStyle30
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-VHM7WLW6.mjs
var baseStyle31 = defineStyle({
  fontSize: "md",
  marginEnd: "3",
  mb: "2",
  fontWeight: "medium",
  transitionProperty: "common",
  transitionDuration: "normal",
  opacity: 1,
  _disabled: {
    opacity: 0.4
  }
});
var formLabelTheme = defineStyleConfig({
  baseStyle: baseStyle31
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-WXARPSDQ.mjs
var baseStyle32 = defineStyle({
  fontFamily: "heading",
  fontWeight: "bold"
});
var sizes19 = {
  "4xl": defineStyle({
    fontSize: ["6xl", null, "7xl"],
    lineHeight: 1
  }),
  "3xl": defineStyle({
    fontSize: ["5xl", null, "6xl"],
    lineHeight: 1
  }),
  "2xl": defineStyle({
    fontSize: ["4xl", null, "5xl"],
    lineHeight: [1.2, null, 1]
  }),
  xl: defineStyle({
    fontSize: ["3xl", null, "4xl"],
    lineHeight: [1.33, null, 1.2]
  }),
  lg: defineStyle({
    fontSize: ["2xl", null, "3xl"],
    lineHeight: [1.33, null, 1.2]
  }),
  md: defineStyle({
    fontSize: "xl",
    lineHeight: 1.2
  }),
  sm: defineStyle({
    fontSize: "md",
    lineHeight: 1.2
  }),
  xs: defineStyle({
    fontSize: "sm",
    lineHeight: 1.2
  })
};
var headingTheme = defineStyleConfig({
  baseStyle: baseStyle32,
  sizes: sizes19,
  defaultProps: {
    size: "xl"
  }
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-FU5DDBRC.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig22, definePartsStyle: definePartsStyle22 } = createMultiStyleConfigHelpers(breadcrumbAnatomy.keys);
var $decor = cssVar("breadcrumb-link-decor");
var baseStyleLink = defineStyle({
  transitionProperty: "common",
  transitionDuration: "fast",
  transitionTimingFunction: "ease-out",
  outline: "none",
  color: "inherit",
  textDecoration: $decor.reference,
  [$decor.variable]: "none",
  "&:not([aria-current=page])": {
    cursor: "pointer",
    _hover: {
      [$decor.variable]: "underline"
    },
    _focusVisible: {
      boxShadow: "outline"
    }
  }
});
var baseStyle33 = definePartsStyle22({
  link: baseStyleLink
});
var breadcrumbTheme = defineMultiStyleConfig22({
  baseStyle: baseStyle33
});
var baseStyle34 = defineStyle({
  lineHeight: "1.2",
  borderRadius: "md",
  fontWeight: "semibold",
  transitionProperty: "common",
  transitionDuration: "normal",
  _focusVisible: {
    boxShadow: "outline"
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed",
    boxShadow: "none"
  },
  _hover: {
    _disabled: {
      bg: "initial"
    }
  }
});
var variantGhost = defineStyle((props) => {
  const { colorScheme: c, theme: theme3 } = props;
  if (c === "gray") {
    return {
      color: mode(`gray.800`, `whiteAlpha.900`)(props),
      _hover: {
        bg: mode(`gray.100`, `whiteAlpha.200`)(props)
      },
      _active: { bg: mode(`gray.200`, `whiteAlpha.300`)(props) }
    };
  }
  const darkHoverBg = transparentize(`${c}.200`, 0.12)(theme3);
  const darkActiveBg = transparentize(`${c}.200`, 0.24)(theme3);
  return {
    color: mode(`${c}.600`, `${c}.200`)(props),
    bg: "transparent",
    _hover: {
      bg: mode(`${c}.50`, darkHoverBg)(props)
    },
    _active: {
      bg: mode(`${c}.100`, darkActiveBg)(props)
    }
  };
});
var variantOutline3 = defineStyle((props) => {
  const { colorScheme: c } = props;
  const borderColor = mode(`gray.200`, `whiteAlpha.300`)(props);
  return {
    border: "1px solid",
    borderColor: c === "gray" ? borderColor : "currentColor",
    ".chakra-button__group[data-attached][data-orientation=horizontal] > &:not(:last-of-type)": { marginEnd: "-1px" },
    ".chakra-button__group[data-attached][data-orientation=vertical] > &:not(:last-of-type)": { marginBottom: "-1px" },
    ...runIfFn(variantGhost, props)
  };
});
var accessibleColorMap = {
  yellow: {
    bg: "yellow.400",
    color: "black",
    hoverBg: "yellow.500",
    activeBg: "yellow.600"
  },
  cyan: {
    bg: "cyan.400",
    color: "black",
    hoverBg: "cyan.500",
    activeBg: "cyan.600"
  }
};
var variantSolid2 = defineStyle((props) => {
  var _a6;
  const { colorScheme: c } = props;
  if (c === "gray") {
    const bg22 = mode(`gray.100`, `whiteAlpha.200`)(props);
    return {
      bg: bg22,
      color: mode(`gray.800`, `whiteAlpha.900`)(props),
      _hover: {
        bg: mode(`gray.200`, `whiteAlpha.300`)(props),
        _disabled: {
          bg: bg22
        }
      },
      _active: { bg: mode(`gray.300`, `whiteAlpha.400`)(props) }
    };
  }
  const {
    bg: bg2 = `${c}.500`,
    color: color2 = "white",
    hoverBg = `${c}.600`,
    activeBg = `${c}.700`
  } = (_a6 = accessibleColorMap[c]) != null ? _a6 : {};
  const background2 = mode(bg2, `${c}.200`)(props);
  return {
    bg: background2,
    color: mode(color2, `gray.800`)(props),
    _hover: {
      bg: mode(hoverBg, `${c}.300`)(props),
      _disabled: {
        bg: background2
      }
    },
    _active: { bg: mode(activeBg, `${c}.400`)(props) }
  };
});
var variantLink = defineStyle((props) => {
  const { colorScheme: c } = props;
  return {
    padding: 0,
    height: "auto",
    lineHeight: "normal",
    verticalAlign: "baseline",
    color: mode(`${c}.500`, `${c}.200`)(props),
    _hover: {
      textDecoration: "underline",
      _disabled: {
        textDecoration: "none"
      }
    },
    _active: {
      color: mode(`${c}.700`, `${c}.500`)(props)
    }
  };
});
var variantUnstyled3 = defineStyle({
  bg: "none",
  color: "inherit",
  display: "inline",
  lineHeight: "inherit",
  m: "0",
  p: "0"
});
var variants8 = {
  ghost: variantGhost,
  outline: variantOutline3,
  solid: variantSolid2,
  link: variantLink,
  unstyled: variantUnstyled3
};
var sizes20 = {
  lg: defineStyle({
    h: "12",
    minW: "12",
    fontSize: "lg",
    px: "6"
  }),
  md: defineStyle({
    h: "10",
    minW: "10",
    fontSize: "md",
    px: "4"
  }),
  sm: defineStyle({
    h: "8",
    minW: "8",
    fontSize: "sm",
    px: "3"
  }),
  xs: defineStyle({
    h: "6",
    minW: "6",
    fontSize: "xs",
    px: "2"
  })
};
var buttonTheme = defineStyleConfig({
  baseStyle: baseStyle34,
  variants: variants8,
  sizes: sizes20,
  defaultProps: {
    variant: "solid",
    size: "md",
    colorScheme: "gray"
  }
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-F7CKIHPM.mjs
var { definePartsStyle: definePartsStyle23, defineMultiStyleConfig: defineMultiStyleConfig23 } = createMultiStyleConfigHelpers(cardAnatomy.keys);
var $bg13 = cssVar("card-bg");
var $padding2 = cssVar("card-padding");
var $shadow4 = cssVar("card-shadow");
var $radius = cssVar("card-radius");
var $border3 = cssVar("card-border-width", "0");
var $borderColor = cssVar("card-border-color");
var baseStyle35 = definePartsStyle23({
  container: {
    [$bg13.variable]: "colors.chakra-body-bg",
    backgroundColor: $bg13.reference,
    boxShadow: $shadow4.reference,
    borderRadius: $radius.reference,
    color: "chakra-body-text",
    borderWidth: $border3.reference,
    borderColor: $borderColor.reference
  },
  body: {
    padding: $padding2.reference,
    flex: "1 1 0%"
  },
  header: {
    padding: $padding2.reference
  },
  footer: {
    padding: $padding2.reference
  }
});
var sizes21 = {
  sm: definePartsStyle23({
    container: {
      [$radius.variable]: "radii.base",
      [$padding2.variable]: "space.3"
    }
  }),
  md: definePartsStyle23({
    container: {
      [$radius.variable]: "radii.md",
      [$padding2.variable]: "space.5"
    }
  }),
  lg: definePartsStyle23({
    container: {
      [$radius.variable]: "radii.xl",
      [$padding2.variable]: "space.7"
    }
  })
};
var variants9 = {
  elevated: definePartsStyle23({
    container: {
      [$shadow4.variable]: "shadows.base",
      _dark: {
        [$bg13.variable]: "colors.gray.700"
      }
    }
  }),
  outline: definePartsStyle23({
    container: {
      [$border3.variable]: "1px",
      [$borderColor.variable]: "colors.chakra-border-color"
    }
  }),
  filled: definePartsStyle23({
    container: {
      [$bg13.variable]: "colors.chakra-subtle-bg"
    }
  }),
  unstyled: {
    body: {
      [$padding2.variable]: 0
    },
    header: {
      [$padding2.variable]: 0
    },
    footer: {
      [$padding2.variable]: 0
    }
  }
};
var cardTheme = defineMultiStyleConfig23({
  baseStyle: baseStyle35,
  variants: variants9,
  sizes: sizes21,
  defaultProps: {
    variant: "elevated",
    size: "md"
  }
});
var $size4 = cssVar$1("close-button-size");
var $bg14 = cssVar$1("close-button-bg");
var baseStyle36 = defineStyle({
  w: [$size4.reference],
  h: [$size4.reference],
  borderRadius: "md",
  transitionProperty: "common",
  transitionDuration: "normal",
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed",
    boxShadow: "none"
  },
  _hover: {
    [$bg14.variable]: "colors.blackAlpha.100",
    _dark: {
      [$bg14.variable]: "colors.whiteAlpha.100"
    }
  },
  _active: {
    [$bg14.variable]: "colors.blackAlpha.200",
    _dark: {
      [$bg14.variable]: "colors.whiteAlpha.200"
    }
  },
  _focusVisible: {
    boxShadow: "outline"
  },
  bg: $bg14.reference
});
var sizes22 = {
  lg: defineStyle({
    [$size4.variable]: "sizes.10",
    fontSize: "md"
  }),
  md: defineStyle({
    [$size4.variable]: "sizes.8",
    fontSize: "xs"
  }),
  sm: defineStyle({
    [$size4.variable]: "sizes.6",
    fontSize: "2xs"
  })
};
var closeButtonTheme = defineStyleConfig({
  baseStyle: baseStyle36,
  sizes: sizes22,
  defaultProps: {
    size: "md"
  }
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-K3RH7Y2L.mjs
var { variants: variants10, defaultProps } = badgeTheme;
var baseStyle37 = defineStyle({
  fontFamily: "mono",
  fontSize: "sm",
  px: "0.2em",
  borderRadius: "sm",
  bg: vars.bg.reference,
  color: vars.color.reference,
  boxShadow: vars.shadow.reference
});
var codeTheme = defineStyleConfig({
  baseStyle: baseStyle37,
  variants: variants10,
  defaultProps
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-TECE6HDR.mjs
var baseStyle38 = defineStyle({
  w: "100%",
  mx: "auto",
  maxW: "prose",
  px: "4"
});
var containerTheme = defineStyleConfig({
  baseStyle: baseStyle38
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-5S44M2O4.mjs
var baseStyle39 = defineStyle({
  opacity: 0.6,
  borderColor: "inherit"
});
var variantSolid3 = defineStyle({
  borderStyle: "solid"
});
var variantDashed = defineStyle({
  borderStyle: "dashed"
});
var variants11 = {
  solid: variantSolid3,
  dashed: variantDashed
};
var dividerTheme = defineStyleConfig({
  baseStyle: baseStyle39,
  variants: variants11,
  defaultProps: {
    variant: "solid"
  }
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-J7AGDWFO.mjs
var { definePartsStyle: definePartsStyle24, defineMultiStyleConfig: defineMultiStyleConfig24 } = createMultiStyleConfigHelpers(accordionAnatomy.keys);
var baseStyleContainer4 = defineStyle({
  borderTopWidth: "1px",
  borderColor: "inherit",
  _last: {
    borderBottomWidth: "1px"
  }
});
var baseStyleButton2 = defineStyle({
  transitionProperty: "common",
  transitionDuration: "normal",
  fontSize: "md",
  _focusVisible: {
    boxShadow: "outline"
  },
  _hover: {
    bg: "blackAlpha.50"
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed"
  },
  px: "4",
  py: "2"
});
var baseStylePanel = defineStyle({
  pt: "2",
  px: "4",
  pb: "5"
});
var baseStyleIcon7 = defineStyle({
  fontSize: "1.25em"
});
var baseStyle40 = definePartsStyle24({
  container: baseStyleContainer4,
  button: baseStyleButton2,
  panel: baseStylePanel,
  icon: baseStyleIcon7
});
var accordionTheme = defineMultiStyleConfig24({ baseStyle: baseStyle40 });
var { definePartsStyle: definePartsStyle25, defineMultiStyleConfig: defineMultiStyleConfig25 } = createMultiStyleConfigHelpers(alertAnatomy.keys);
var $fg6 = cssVar("alert-fg");
var $bg15 = cssVar("alert-bg");
var baseStyle41 = definePartsStyle25({
  container: {
    bg: $bg15.reference,
    px: "4",
    py: "3"
  },
  title: {
    fontWeight: "bold",
    lineHeight: "6",
    marginEnd: "2"
  },
  description: {
    lineHeight: "6"
  },
  icon: {
    color: $fg6.reference,
    flexShrink: 0,
    marginEnd: "3",
    w: "5",
    h: "6"
  },
  spinner: {
    color: $fg6.reference,
    flexShrink: 0,
    marginEnd: "3",
    w: "5",
    h: "5"
  }
});
function getBg(props) {
  const { theme: theme3, colorScheme: c } = props;
  const darkBg = transparentize(`${c}.200`, 0.16)(theme3);
  return {
    light: `colors.${c}.100`,
    dark: darkBg
  };
}
var variantSubtle2 = definePartsStyle25((props) => {
  const { colorScheme: c } = props;
  const bg2 = getBg(props);
  return {
    container: {
      [$fg6.variable]: `colors.${c}.600`,
      [$bg15.variable]: bg2.light,
      _dark: {
        [$fg6.variable]: `colors.${c}.200`,
        [$bg15.variable]: bg2.dark
      }
    }
  };
});
var variantLeftAccent = definePartsStyle25((props) => {
  const { colorScheme: c } = props;
  const bg2 = getBg(props);
  return {
    container: {
      [$fg6.variable]: `colors.${c}.600`,
      [$bg15.variable]: bg2.light,
      _dark: {
        [$fg6.variable]: `colors.${c}.200`,
        [$bg15.variable]: bg2.dark
      },
      paddingStart: "3",
      borderStartWidth: "4px",
      borderStartColor: $fg6.reference
    }
  };
});
var variantTopAccent = definePartsStyle25((props) => {
  const { colorScheme: c } = props;
  const bg2 = getBg(props);
  return {
    container: {
      [$fg6.variable]: `colors.${c}.600`,
      [$bg15.variable]: bg2.light,
      _dark: {
        [$fg6.variable]: `colors.${c}.200`,
        [$bg15.variable]: bg2.dark
      },
      pt: "2",
      borderTopWidth: "4px",
      borderTopColor: $fg6.reference
    }
  };
});
var variantSolid4 = definePartsStyle25((props) => {
  const { colorScheme: c } = props;
  return {
    container: {
      [$fg6.variable]: `colors.white`,
      [$bg15.variable]: `colors.${c}.600`,
      _dark: {
        [$fg6.variable]: `colors.gray.900`,
        [$bg15.variable]: `colors.${c}.200`
      },
      color: $fg6.reference
    }
  };
});
var variants12 = {
  subtle: variantSubtle2,
  "left-accent": variantLeftAccent,
  "top-accent": variantTopAccent,
  solid: variantSolid4
};
var alertTheme = defineMultiStyleConfig25({
  baseStyle: baseStyle41,
  variants: variants12,
  defaultProps: {
    variant: "subtle",
    colorScheme: "blue"
  }
});
var { definePartsStyle: definePartsStyle26, defineMultiStyleConfig: defineMultiStyleConfig26 } = createMultiStyleConfigHelpers(avatarAnatomy.keys);
var $border4 = cssVar("avatar-border-color");
var $bg16 = cssVar("avatar-bg");
var $fs = cssVar("avatar-font-size");
var $size5 = cssVar("avatar-size");
var baseStyleBadge = defineStyle({
  borderRadius: "full",
  border: "0.2em solid",
  borderColor: $border4.reference,
  [$border4.variable]: "white",
  _dark: {
    [$border4.variable]: "colors.gray.800"
  }
});
var baseStyleExcessLabel = defineStyle({
  bg: $bg16.reference,
  fontSize: $fs.reference,
  width: $size5.reference,
  height: $size5.reference,
  lineHeight: "1",
  [$bg16.variable]: "colors.gray.200",
  _dark: {
    [$bg16.variable]: "colors.whiteAlpha.400"
  }
});
var baseStyleContainer5 = defineStyle((props) => {
  const { name, theme: theme3 } = props;
  const bg2 = name ? randomColor({ string: name }) : "colors.gray.400";
  const isBgDark = isDark(bg2)(theme3);
  let color2 = "white";
  if (!isBgDark)
    color2 = "gray.800";
  return {
    bg: $bg16.reference,
    fontSize: $fs.reference,
    color: color2,
    borderColor: $border4.reference,
    verticalAlign: "top",
    width: $size5.reference,
    height: $size5.reference,
    "&:not([data-loaded])": {
      [$bg16.variable]: bg2
    },
    [$border4.variable]: "colors.white",
    _dark: {
      [$border4.variable]: "colors.gray.800"
    }
  };
});
var baseStyleLabel5 = defineStyle({
  fontSize: $fs.reference,
  lineHeight: "1"
});
var baseStyle42 = definePartsStyle26((props) => ({
  badge: runIfFn(baseStyleBadge, props),
  excessLabel: runIfFn(baseStyleExcessLabel, props),
  container: runIfFn(baseStyleContainer5, props),
  label: baseStyleLabel5
}));
function getSize4(size2) {
  const themeSize = size2 !== "100%" ? sizes_default[size2] : void 0;
  return definePartsStyle26({
    container: {
      [$size5.variable]: themeSize != null ? themeSize : size2,
      [$fs.variable]: `calc(${themeSize != null ? themeSize : size2} / 2.5)`
    },
    excessLabel: {
      [$size5.variable]: themeSize != null ? themeSize : size2,
      [$fs.variable]: `calc(${themeSize != null ? themeSize : size2} / 2.5)`
    }
  });
}
var sizes23 = {
  "2xs": getSize4(4),
  xs: getSize4(6),
  sm: getSize4(8),
  md: getSize4(12),
  lg: getSize4(16),
  xl: getSize4(24),
  "2xl": getSize4(32),
  full: getSize4("100%")
};
var avatarTheme = defineMultiStyleConfig26({
  baseStyle: baseStyle42,
  sizes: sizes23,
  defaultProps: {
    size: "md"
  }
});

// ../../node_modules/@chakra-ui/theme/dist/chunk-P7SDT22G.mjs
var components = {
  Accordion: accordionTheme,
  Alert: alertTheme,
  Avatar: avatarTheme,
  Badge: badgeTheme,
  Breadcrumb: breadcrumbTheme,
  Button: buttonTheme,
  Checkbox: checkboxTheme,
  CloseButton: closeButtonTheme,
  Code: codeTheme,
  Container: containerTheme,
  Divider: dividerTheme,
  Drawer: drawerTheme,
  Editable: editableTheme,
  Form: formTheme,
  FormError: formErrorTheme,
  FormLabel: formLabelTheme,
  Heading: headingTheme,
  Input: inputTheme,
  Kbd: kbdTheme,
  Link: linkTheme,
  List: listTheme,
  Menu: menuTheme,
  Modal: modalTheme,
  NumberInput: numberInputTheme,
  PinInput: pinInputTheme,
  Popover: popoverTheme,
  Progress: progressTheme,
  Radio: radioTheme,
  Select: selectTheme,
  Skeleton: skeletonTheme,
  SkipLink: skipLinkTheme,
  Slider: sliderTheme,
  Spinner: spinnerTheme,
  Stat: statTheme,
  Switch: switchTheme,
  Table: tableTheme,
  Tabs: tabsTheme,
  Tag: tagTheme,
  Textarea: textareaTheme,
  Tooltip: tooltipTheme,
  Card: cardTheme,
  Stepper: stepperTheme
};

// ../../node_modules/@chakra-ui/theme/dist/chunk-5GOSZLB7.mjs
var semanticTokens = {
  colors: {
    "chakra-body-text": { _light: "gray.800", _dark: "whiteAlpha.900" },
    "chakra-body-bg": { _light: "white", _dark: "gray.800" },
    "chakra-border-color": { _light: "gray.200", _dark: "whiteAlpha.300" },
    "chakra-inverse-text": { _light: "white", _dark: "gray.800" },
    "chakra-subtle-bg": { _light: "gray.100", _dark: "gray.700" },
    "chakra-subtle-text": { _light: "gray.600", _dark: "gray.400" },
    "chakra-placeholder-color": { _light: "gray.500", _dark: "whiteAlpha.400" }
  }
};

// ../../node_modules/@chakra-ui/theme/dist/chunk-3F7U33P5.mjs
var styles = {
  global: {
    body: {
      fontFamily: "body",
      color: "chakra-body-text",
      bg: "chakra-body-bg",
      transitionProperty: "background-color",
      transitionDuration: "normal",
      lineHeight: "base"
    },
    "*::placeholder": {
      color: "chakra-placeholder-color"
    },
    "*, *::before, &::after": {
      borderColor: "chakra-border-color"
    }
  }
};

// ../../node_modules/@chakra-ui/theme/dist/index.mjs
var direction = "ltr";
var config = {
  useSystemColorMode: false,
  initialColorMode: "light",
  cssVarPrefix: "chakra"
};
var theme2 = {
  semanticTokens,
  direction,
  ...foundations,
  components,
  styles,
  config
};

// src/theme/components/index.ts
var components_exports = {};
__export(components_exports, {
  Accordion: () => accordion_default,
  Alert: () => alert_default,
  AlertExpandable: () => alert_expandable_default,
  Badge: () => badge_default,
  Breadcrumb: () => breadcrumb_default,
  Button: () => button_default,
  Card: () => card_default,
  CardSelect: () => card_select_default,
  Checkbox: () => checkbox_default,
  ChoiceChip: () => choice_chip_default,
  CloseButton: () => close_button_default,
  Code: () => code_default,
  Datepicker: () => datepicker_default,
  Divider: () => divider_default,
  Drawer: () => drawer_default,
  FloatingActionButton: () => fab_default,
  Form: () => form_default,
  FormLabel: () => form_label_default,
  InfoSelect: () => info_select_default,
  InfoTag: () => info_tag_default,
  Input: () => input_default,
  LineIcon: () => line_icon_default,
  Link: () => link_default,
  List: () => list_default,
  ListBox: () => listbox_default,
  MediaControllerButton: () => media_controller_button_default,
  Modal: () => modal_default,
  NumericStepper: () => numeric_stepper_default,
  Pagination: () => pagination_default,
  Popover: () => popover_default,
  PressableCard: () => pressable_card_default,
  ProgressBar: () => progress_bar_default,
  ProgressIndicator: () => progress_indicator_default,
  Radio: () => radio_default,
  RadioCard: () => radio_card_default,
  Select: () => select_default,
  Skeleton: () => skeleton_default,
  StaticCard: () => static_card_default,
  Stepper: () => stepper_default,
  Switch: () => switch_default,
  Table: () => table_default,
  Tabs: () => tabs_default,
  Textarea: () => textarea_default,
  Toast: () => toast_default,
  TravelTag: () => travel_tag_default
});
function brandBackground(state2, props) {
  switch (state2) {
    case "active":
      return {
        backgroundColor: mode(
          "brand.surface.active.light",
          "brand.surface.active.dark"
        )(props)
      };
    case "hover":
      return {
        backgroundColor: mode(
          "brand.surface.hover.light",
          "brand.surface.hover.dark"
        )(props)
      };
    case "default":
    default:
      return {
        backgroundColor: mode(
          "brand.surface.default.light",
          "brand.surface.default.dark"
        )(props)
      };
  }
}
function brandText(state2, props) {
  return {
    color: mode("brand.text.light", "brand.text.dark")(props)
  };
}
var focusVisibleStyles = (props) => ({
  _focusVisible: {
    outlineWidth: "2px",
    outlineColor: mode("outline.focus.light", "outline.focus.dark")(props),
    outlineStyle: "solid",
    outlineOffset: "1px"
  }
});
var surface = (surface2, props) => {
  switch (surface2) {
    case "default":
      return {
        backgroundColor: mode(
          "surface.default.light",
          "surface.default.dark"
        )(props)
      };
    case "secondary":
      return {
        backgroundColor: mode(
          "surface.secondary.light",
          "surface.secondary.dark"
        )(props)
      };
    case "tertiary":
      return {
        backgroundColor: mode(
          "surface.tertiary.light",
          "surface.tertiary.dark"
        )(props)
      };
    case "disabled":
      return {
        backgroundColor: mode(
          "surface.disabled.light",
          "surface.disabled.dark"
        )(props)
      };
  }
};

// src/theme/utils/base-utils.ts
function baseBackground(state2, props) {
  switch (state2) {
    case "active":
      return {
        backgroundColor: mode(
          "base.surface.active.light",
          "base.surface.active.dark"
        )(props)
      };
    case "selected":
      return brandBackground("default", props);
    case "disabled":
      return surface("disabled", props);
    case "hover":
    default:
      return { backgroundColor: "transparent" };
  }
}
function baseBorder(state2, props) {
  switch (state2) {
    case "hover":
      return {
        outline: "2px solid",
        outlineColor: mode(
          "base.outline.hover.light",
          "base.outline.hover.dark"
        )(props)
      };
    case "focus": {
      return focusVisibleStyles(props)._focusVisible;
    }
    case "disabled": {
      return {
        outline: "1px solid",
        outlineColor: mode(
          "outline.disabled.light",
          "outline.disabled.dark"
        )(props)
      };
    }
    case "active": {
      return {
        outline: "1px solid",
        outlineColor: mode(
          "base.outline.default.light",
          "base.outline.default.dark"
        )(props)
      };
    }
    case "invalid": {
      return {
        outline: "2px solid",
        outlineColor: mode("outline.error.light", "outline.error.dark")(props)
      };
    }
    case "default":
    default:
      return {
        outline: "1px solid",
        outlineColor: mode(
          "base.outline.default.light",
          "base.outline.default.dark"
        )(props)
      };
  }
}
function baseText(state2, props) {
  switch (state2) {
    case "selected":
      return {
        color: mode("brand.text.light", "brand.text.dark")(props)
      };
    case "disabled":
      return {
        color: mode("text.disabled.light", "text.disabled.dark")(props)
      };
    default:
      return {
        color: mode("base.text.light", "base.text.dark")(props)
      };
  }
}
function floatingBackground(state2, props) {
  switch (state2) {
    case "selected":
      return brandBackground("default", props);
    case "active":
      return {
        backgroundColor: mode(
          "floating.surface.active.light",
          "floating.surface.active.dark"
        )(props)
      };
    case "hover":
      return {
        backgroundColor: mode(
          "floating.surface.hover.light",
          `color-mix(in srgb, white 10%, var(--spor-colors-bg-default-dark))`
        )(props)
      };
    case "default":
      return {
        backgroundColor: mode(
          "white",
          `color-mix(in srgb, white 10%, var(--spor-colors-bg-default-dark))`
        )(props)
      };
  }
}
function floatingBorder(state2, props) {
  switch (state2) {
    case "hover":
      return {
        outline: "1px solid",
        outlineColor: mode(
          "floating.outline.hover.light",
          "floating.outline.hover.dark"
        )(props)
      };
    case "selected":
      return {
        outline: "1px solid",
        outlineColor: mode("outline.focus.light", "outline.focus.dark")(props)
      };
    case "active":
      return {
        outline: "1px solid",
        outlineColor: mode(
          "floating.outline.active.light",
          "floating.outline.active.dark"
        )(props)
      };
    default:
      return {
        outline: "1px solid",
        outlineColor: mode(
          "floating.outline.default.light",
          "floating.outline.default.dark"
        )(props)
      };
  }
}
function ghostBackground(state2, props) {
  switch (state2) {
    case "hover": {
      return {
        backgroundColor: mode(
          "ghost.surface.hover.light",
          "ghost.surface.hover.dark"
        )(props)
      };
    }
    case "active":
      return {
        backgroundColor: mode(
          "ghost.surface.active.light",
          "ghost.surface.active.dark"
        )(props)
      };
    case "selected": {
      return {
        backgroundColor: mode(
          "ghost.surface.selected.light",
          "ghost.surface.selected.dark"
        )(props)
      };
    }
    case "default":
      return {
        backgroundColor: "transparent"
      };
  }
}
function ghostText(state2, props) {
  switch (state2) {
    case "selected":
      return {
        color: mode("ghost.text.light", "ghost.text.dark")(props)
      };
    default:
      return {
        color: mode("ghost.text.light", "ghost.text.dark")(props)
      };
  }
}

// src/theme/components/accordion.ts
var helpers = createMultiStyleConfigHelpers(accordionAnatomy.keys);
var config2 = helpers.defineMultiStyleConfig({
  baseStyle: (props) => ({
    container: {
      borderRadius: "sm"
    },
    button: {
      transitionProperty: "background-color, color, border-radius, box-shadow, opacity",
      transitionDuration: "fast",
      borderRadius: "sm",
      display: "flex",
      justifyContent: "space-between",
      ...baseText("default", props),
      textAlign: "left",
      fontFamily: "body",
      fontWeight: "bold",
      outlineOffset: "-2px",
      ...focusVisibleStyles(props),
      _disabled: {
        pointerEvents: "none",
        opacity: 0.4
      }
    },
    panel: {
      paddingY: 2,
      borderBottomRadius: "sm"
    },
    icon: {
      fontSize: "1.25em"
    }
  }),
  variants: {
    ghost: (props) => ({
      button: {
        _hover: {
          ...ghostBackground("hover", props)
        },
        _active: {
          ...ghostBackground("active", props)
        }
      }
    }),
    base: (props) => ({
      container: {
        ...baseBorder("default", props)
      },
      button: {
        _expanded: {
          borderBottomRadius: "none"
        },
        _hover: {
          ...baseBorder("hover", props),
          outlineOffset: 0
        },
        _active: {
          ...baseBackground("active", props),
          ...baseBorder("default", props)
        }
      }
    }),
    floating: (props) => ({
      container: {
        ...floatingBackground("default", props),
        ...floatingBorder("default", props),
        boxShadow: "sm"
      },
      button: {
        _expanded: {
          borderBottomRadius: "none"
        },
        _hover: {
          ...floatingBackground("hover", props),
          ...floatingBorder("hover", props),
          outlineOffset: 1
        },
        _active: {
          ...ghostBackground("active", props),
          ...floatingBorder("default", props)
        }
      }
    })
  },
  sizes: {
    sm: {
      button: {
        fontSize: ["mobile.xs", null, "desktop.xs"],
        paddingX: 2,
        paddingY: 1,
        minHeight: 6
      },
      panel: {
        fontSize: ["mobile.xs", null, "desktop.xs"],
        paddingX: 2
      }
    },
    md: {
      button: {
        fontSize: ["mobile.sm", null, "desktop.sm"],
        paddingX: 3,
        paddingY: 1,
        minHeight: 7
      },
      panel: {
        fontSize: ["mobile.sm", null, "desktop.sm"],
        paddingX: 3
      }
    },
    lg: {
      button: {
        fontSize: ["mobile.sm", null, "desktop.sm"],
        paddingX: 3,
        paddingY: 2,
        minHeight: 8
      },
      panel: {
        fontSize: ["mobile.sm", null, "desktop.sm"],
        paddingX: 3
      }
    }
  },
  defaultProps: {
    variant: "ghost",
    size: "sm"
  }
});
var accordion_default = config2;

// src/theme/components/alert.ts
var parts = anatomy("alert").parts("container", "icon", "closeButton");
var helpers2 = createMultiStyleConfigHelpers(parts.keys);
var config3 = helpers2.defineMultiStyleConfig({
  baseStyle: {
    container: {
      borderRadius: "sm",
      color: "darkGrey",
      paddingX: 3,
      paddingY: 2,
      display: "flex",
      position: "relative",
      textStyle: "sm"
    },
    icon: {
      marginRight: 1
    },
    closeButton: {
      position: "absolute",
      top: 1,
      right: 1,
      color: "darkGrey"
    }
  },
  variants: {
    success: {
      container: {
        backgroundColor: "seaMist"
      }
    },
    info: {
      container: {
        backgroundColor: "lightBlue"
      }
    },
    warning: {
      container: {
        backgroundColor: "blonde"
      }
    },
    error: {
      container: {
        backgroundColor: "lightRed"
      }
    },
    "alt-transport": {
      container: {
        backgroundColor: "banana"
      }
    }
  },
  defaultProps: {
    variant: "info"
  }
});
var alert_default = config3;

// src/theme/components/alert-expandable.ts
var parts2 = anatomy("alertExpandable").parts("container");
var helpers3 = createMultiStyleConfigHelpers(parts2.keys);
var config4 = helpers3.defineMultiStyleConfig({
  baseStyle: {
    container: {
      paddingX: 3,
      paddingY: 2,
      fontSize: "inherit",
      transitionProperty: "outline, border-radius",
      transitionDuration: "fast",
      _expanded: {
        borderBottomRadius: "none"
      },
      _hover: {
        outline: "2px solid"
      }
    }
  },
  variants: {
    info: {
      container: {
        _hover: {
          outlineColor: "sky"
        },
        _active: {
          backgroundColor: "icyBlue"
        }
      }
    },
    success: {
      container: {
        _hover: {
          outlineColor: "blueGreen"
        },
        _active: {
          backgroundColor: "mint"
        }
      }
    },
    warning: {
      container: {
        _hover: {
          outlineColor: "sunshine"
        },
        _active: {
          backgroundColor: "cornSilk"
        }
      }
    },
    "alt-transport": {
      container: {
        _hover: {
          outlineColor: "golden"
        },
        _active: {
          backgroundColor: "sunshine"
        }
      }
    },
    error: {
      container: {
        _hover: {
          outlineColor: "apricot"
        },
        _active: {
          backgroundColor: "pink"
        }
      }
    }
  },
  defaultProps: {
    variant: "info"
  }
});
var alert_expandable_default = config4;
var config5 = defineStyleConfig$1({
  baseStyle: ({ colorScheme }) => ({
    borderStyle: "solid",
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    fontSize: ["mobile.xs", "desktop.xs"],
    borderRadius: "xl",
    fontWeight: "bold",
    paddingLeft: [2, 3],
    paddingRight: [2, 3],
    minHeight: [4, 5],
    ...getColorScheme(colorScheme)
  }),
  variants: {
    solid: {
      borderWidth: 0
    },
    outline: {
      borderWidth: 1
    }
  },
  defaultProps: {
    variant: "solid",
    colorScheme: "grey"
  }
});
var badge_default = config5;
function getColorScheme(colorScheme) {
  let styles3 = colorCombinations[colorScheme];
  if (!styles3 && process.env.NODE_ENV === "development") {
    console.warn(`Invalid color scheme ${colorScheme} provided.`);
    styles3 = colorCombinations.grey;
  }
  return styles3;
}
var colorCombinations = {
  yellow: {
    backgroundColor: "banana",
    borderColor: "darkGrey",
    color: "darkGrey"
  },
  "light-yellow": {
    backgroundColor: "blonde",
    borderColor: "golden",
    color: "darkGrey"
  },
  red: {
    backgroundColor: "lightRed",
    borderColor: "brightRed",
    color: "darkGrey"
  },
  "light-green": {
    backgroundColor: "seaMist",
    borderColor: "darkTeal",
    color: "darkTeal"
  },
  "dark-green": {
    backgroundColor: "celadon",
    borderColor: "blueGreen",
    color: "white"
  },
  orange: {
    backgroundColor: "champagne",
    borderColor: "pumpkin",
    color: "darkGrey"
  },
  "light-blue": {
    backgroundColor: "lightBlue",
    borderColor: "ocean",
    color: "darkBlue"
  },
  "dark-blue": {
    backgroundColor: "darkBlue",
    borderColor: "sky",
    color: "white"
  },
  grey: {
    backgroundColor: "platinum",
    borderColor: "darkGrey",
    color: "darkGrey"
  },
  white: {
    backgroundColor: "white",
    borderColor: "silver",
    color: "darkGrey"
  }
};

// src/theme/components/breadcrumb.ts
var { defineMultiStyleConfig: defineMultiStyleConfig27, definePartsStyle: definePartsStyle27 } = createMultiStyleConfigHelpers(breadcrumbAnatomy.keys);
var breadcrumb_default = defineMultiStyleConfig27({
  baseStyle: definePartsStyle27((props) => ({
    link: {
      transitionProperty: "common",
      transitionDuration: "fast",
      transitionTimingFunction: "ease-out",
      color: "inherit",
      textDecoration: "none",
      textStyle: "xs",
      paddingX: 0.5,
      borderRadius: "xs",
      "&:not([aria-current=page])": {
        cursor: "pointer",
        ...focusVisibleStyles(props)
      }
    },
    list: {
      flexWrap: "wrap",
      alignItems: "flex-start"
    }
  })),
  variants: {
    base: (props) => ({
      link: {
        "&:not([aria-current=page])": {
          _hover: {
            ...baseBorder("default", props)
          },
          _active: {
            ...baseBackground("active", props)
          }
        }
      }
    }),
    ghost: (props) => ({
      link: {
        "&:not([aria-current=page])": {
          _hover: {
            ...ghostBackground("hover", props)
          },
          _active: {
            ...ghostBackground("active", props)
          }
        }
      }
    })
  },
  defaultProps: {
    variant: "base"
  }
});
function accentBackground(state2, props) {
  switch (state2) {
    case "selected":
      return brandBackground("default", props);
    case "active":
      return {
        backgroundColor: mode(
          "accent.surface.active.light",
          "accent.surface.active.dark"
        )(props)
      };
    case "hover":
      return {
        backgroundColor: mode(
          "accent.surface.hover.light",
          "accent.surface.hover.dark"
        )(props)
      };
    default:
      return {
        backgroundColor: mode(
          "accent.surface.default.light",
          "accent.surface.default.dark"
        )(props)
      };
  }
}
function accentText(state2, props) {
  switch (state2) {
    case "selected":
      return {
        color: mode("brand.text.light", "brand.text.dark")(props)
      };
    default:
      return {
        color: mode("accent.text.light", "accent.text.dark")(props)
      };
  }
}

// src/theme/components/button.ts
var config6 = defineStyleConfig$1({
  baseStyle: (props) => ({
    border: 0,
    borderRadius: "xl",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    transitionProperty: "common",
    transitionDuration: "normal",
    textWrap: "wrap",
    paddingX: 3,
    paddingY: 1,
    ...focusVisibleStyles(props),
    _disabled: {
      cursor: "not-allowed",
      pointerEvents: "none",
      boxShadow: "none",
      ...surface("disabled", props),
      ...baseText("disabled", props)
    }
  }),
  variants: {
    primary: (props) => ({
      ...brandBackground("default", props),
      ...brandText("default", props),
      _hover: {
        ...brandBackground("hover", props)
      },
      _active: {
        ...brandBackground("active", props)
      }
    }),
    secondary: (props) => ({
      ...accentBackground("default", props),
      ...accentText("default", props),
      _hover: {
        ...accentBackground("hover", props)
      },
      _active: {
        ...accentBackground("active", props)
      }
    }),
    tertiary: (props) => ({
      ...baseBackground("default", props),
      ...baseText("default", props),
      ...baseBorder("default", props),
      _hover: {
        ...baseBorder("hover", props)
      },
      _active: {
        ...baseBorder("default", props),
        ...baseBackground("active", props)
      }
    }),
    ghost: (props) => ({
      ...ghostBackground("default", props),
      ...baseText("default", props),
      _hover: {
        ...ghostBackground("hover", props),
        _disabled: {
          ...baseText("disabled", props)
        }
      },
      _active: {
        ...ghostBackground("active", props)
      }
    }),
    floating: (props) => ({
      ...floatingBackground("default", props),
      ...floatingBorder("default", props),
      boxShadow: "sm",
      _hover: {
        ...floatingBackground("hover", props),
        ...floatingBorder("hover", props),
        boxShadow: "md"
      },
      _active: {
        ...floatingBackground("active", props),
        boxShadow: "sm"
      }
    })
  },
  sizes: {
    lg: {
      minHeight: 8,
      minWidth: 8,
      fontSize: "sm",
      fontWeight: "bold"
    },
    md: {
      minHeight: 7,
      minWidth: 7,
      fontSize: "sm",
      fontWeight: "bold"
    },
    sm: {
      minHeight: 6,
      minWidth: 6,
      fontSize: "xs",
      fontWeight: "normal"
    },
    xs: {
      minHeight: 5,
      minWidth: 5,
      paddingY: 0.5,
      fontSize: "xs",
      fontWeight: "normal"
    }
  },
  defaultProps: {
    variant: "primary",
    size: "md"
  }
});
var button_default = config6;

// src/theme/foundations/index.ts
var foundations_exports = {};
__export(foundations_exports, {
  borders: () => borders2,
  breakpoints: () => breakpoints2,
  colors: () => colors2,
  config: () => config7,
  fontSizes: () => fontSizes,
  fontWeights: () => fontWeights,
  fonts: () => fonts,
  lineHeights: () => lineHeights,
  radii: () => radii2,
  shadows: () => shadows2,
  sizes: () => sizes24,
  space: () => space2,
  spacing: () => spacing2,
  styles: () => styles2,
  textStyles: () => textStyles,
  zIndices: () => zIndices2
});
var borders2 = {
  none: "0",
  sm: `${tokens11__default.size.stroke.sm} solid`,
  "sm-dashed": `${tokens11__default.size.stroke.sm} dashed`,
  md: `${tokens11__default.size.stroke.md} solid`,
  "md-dashed": `${tokens11__default.size.stroke.md} dashed`,
  lg: `${tokens11__default.size.stroke.lg} solid`,
  "lg-dashed": `${tokens11__default.size.stroke.lg} dashed`
};
var breakpoints2 = {
  base: "0px",
  sm: tokens11__default.size.breakpoint.sm,
  md: tokens11__default.size.breakpoint.md,
  lg: tokens11__default.size.breakpoint.lg,
  xl: tokens11__default.size.breakpoint.xl,
  "2xl": tokens11__default.size.breakpoint.xl
};
var colors2 = {
  ...tokens11__default.color.alias,
  ...tokens11__default.color.palette,
  ...tokens11__default.color.vyDigital,
  linjetag: tokens11__default.color.linjetag
};

// src/theme/foundations/config.ts
var config7 = {
  cssVarPrefix: "spor",
  initialColorMode: "light",
  useSystemColorMode: false
};
var fonts = {
  body: `${tokens11__default.font.family.body}, arial, sans-serif`,
  heading: `${tokens11__default.font.family.heading}, arial, sans-serif`,
  mono: `${tokens11__default.font.family.monospace}, monospace`
};
var fontSizes = {
  "2xs": tokens11__default.size.font.xs.mobile,
  xs: tokens11__default.size.font.sm.mobile,
  sm: tokens11__default.size.font.md.mobile,
  md: tokens11__default.size.font.lg.mobile,
  lg: tokens11__default.size.font.xl.mobile,
  xl: tokens11__default.size.font.xxl.mobile,
  "2xl": tokens11__default.size.font.xl.desktop,
  "3xl": tokens11__default.size.font.xxl.desktop,
  mobile: {
    xs: tokens11__default.size.font.xs.mobile,
    sm: tokens11__default.size.font.sm.mobile,
    md: tokens11__default.size.font.md.mobile,
    lg: tokens11__default.size.font.lg.mobile,
    xl: tokens11__default.size.font.xl.mobile,
    xxl: tokens11__default.size.font.xxl.mobile
  },
  desktop: {
    xs: tokens11__default.size.font.xs.desktop,
    sm: tokens11__default.size.font.sm.desktop,
    md: tokens11__default.size.font.md.desktop,
    lg: tokens11__default.size.font.lg.desktop,
    xl: tokens11__default.size.font.xl.desktop,
    xxl: tokens11__default.size.font.xxl.desktop
  }
};

// src/theme/foundations/fontWeights.ts
var fontWeights = {
  light: 300,
  medium: 400,
  bold: 700
};
var lineHeights = {
  base: tokens11__default.font.style.lg["line-height"],
  normal: tokens11__default.font.style.lg["line-height"]
};
var radii2 = {
  none: tokens11__default.size["border-radius"].none,
  xs: tokens11__default.size["border-radius"].xs,
  sm: tokens11__default.size["border-radius"].sm,
  md: tokens11__default.size["border-radius"].md,
  lg: tokens11__default.size["border-radius"].lg,
  xl: tokens11__default.size["border-radius"].xl,
  "2xl": tokens11__default.size["border-radius"]["2xl"],
  round: "50%"
};
var shadows2 = {
  none: "none",
  sm: tokens11__default.depth.shadow.sm.value,
  md: tokens11__default.depth.shadow.md.value,
  lg: tokens11__default.depth.shadow.lg.value
};
var spacing2 = Object.entries(tokens11__default.size.spacing).reduce(
  (tokens16, [key, token]) => ({
    ...tokens16,
    [Number(key)]: token
  }),
  {}
);
var space2 = spacing2;

// src/theme/foundations/sizes.ts
var largeSizes2 = {
  max: "max-content",
  min: "min-content",
  full: "100%",
  "3xs": "14rem",
  "2xs": "16rem",
  xs: "20rem",
  sm: "24rem",
  md: "28rem",
  lg: "32rem",
  xl: "36rem",
  "2xl": "42rem",
  "3xl": "48rem",
  "4xl": "56rem",
  "5xl": "64rem",
  "6xl": "72rem",
  "7xl": "80rem",
  "8xl": "90rem"
};
var container2 = {
  sm: "640px",
  md: "768px",
  lg: "1024px",
  xl: "1280px"
};
var sizes24 = {
  ...spacing2,
  ...largeSizes2,
  container: container2
};
var textStyles = {
  "2xl": {
    fontSize: [
      tokens11__default.font.style.xxl["font-size"].mobile,
      null,
      null,
      tokens11__default.font.style.xxl["font-size"].desktop
    ],
    fontFamily: tokens11__default.font.style.xxl["font-family"],
    lineHeight: tokens11__default.font.style.xxl["line-height"]
  },
  "xl-display": {
    fontSize: [
      tokens11__default.font.style["xl-display"]["font-size"].mobile,
      null,
      null,
      tokens11__default.font.style["xl-display"]["font-size"].desktop
    ],
    fontFamily: tokens11__default.font.style["xl-display"]["font-family"],
    lineHeight: tokens11__default.font.style["xl-display"]["line-height"]
  },
  "xl-sans": {
    fontSize: [
      tokens11__default.font.style["xl-sans"]["font-size"].mobile,
      null,
      null,
      tokens11__default.font.style["xl-sans"]["font-size"].desktop
    ],
    fontFamily: tokens11__default.font.style["xl-sans"]["font-family"],
    lineHeight: tokens11__default.font.style["xl-sans"]["line-height"]
  },
  lg: {
    fontSize: [
      tokens11__default.font.style.lg["font-size"].mobile,
      null,
      null,
      tokens11__default.font.style.lg["font-size"].desktop
    ],
    fontFamily: tokens11__default.font.style.lg["font-family"],
    lineHeight: tokens11__default.font.style.lg["line-height"]
  },
  md: {
    fontSize: [
      tokens11__default.font.style.md["font-size"].mobile,
      null,
      null,
      tokens11__default.font.style.md["font-size"].desktop
    ],
    fontFamily: tokens11__default.font.style.md["font-family"],
    lineHeight: tokens11__default.font.style.md["line-height"]
  },
  sm: {
    fontSize: [
      tokens11__default.font.style.sm["font-size"].mobile,
      null,
      null,
      tokens11__default.font.style.sm["font-size"].desktop
    ],
    fontFamily: tokens11__default.font.style.sm["font-family"],
    lineHeight: tokens11__default.font.style.sm["line-height"]
  },
  xs: {
    fontSize: [
      tokens11__default.font.style.xs["font-size"].mobile,
      null,
      null,
      tokens11__default.font.style.xs["font-size"].desktop
    ],
    fontFamily: tokens11__default.font.style.xs["font-family"],
    lineHeight: tokens11__default.font.style.xs["line-height"]
  }
};
var zIndices2 = {
  hide: tokens11__default.depth["z-index"].hide,
  auto: "auto",
  base: tokens11__default.depth["z-index"].base,
  docked: tokens11__default.depth["z-index"].docked,
  dropdown: tokens11__default.depth["z-index"].dropdown,
  sticky: tokens11__default.depth["z-index"].sticky,
  banner: tokens11__default.depth["z-index"].banner,
  overlay: tokens11__default.depth["z-index"].overlay,
  modal: tokens11__default.depth["z-index"].modal,
  popover: tokens11__default.depth["z-index"].popover,
  skipLink: tokens11__default.depth["z-index"].skipLink,
  toast: tokens11__default.depth["z-index"].toast,
  tooltip: tokens11__default.depth["z-index"].tooltip
};
var styles2 = {
  global: (props) => ({
    "html, body": {
      color: mode("darkGrey", "lightGrey")(props)
    },
    svg: {
      display: "initial"
    }
  })
};

// src/theme/components/card.ts
var config8 = defineStyleConfig$1({
  baseStyle: (props) => ({
    appearance: "none",
    border: "none",
    overflow: "hidden",
    fontSize: "inherit",
    display: "block",
    transitionProperty: "common",
    transitionDuration: "fast",
    borderRadius: "md",
    // Except for white cards, all cards are light mode always
    color: "text.default.light",
    ...getColorSchemeBaseProps(props),
    "button&, a&, label&, &.is-clickable": {
      outline: "1px solid",
      ...getColorSchemeClickableProps(props),
      ...focusVisibleStyles(props),
      _hover: getColorSchemeHoverProps(props),
      _active: getColorSchemeActiveProps(props),
      _disabled: {
        ...baseBackground("disabled", props),
        ...baseBorder("disabled", props),
        ...baseText("disabled", props),
        pointerEvents: "none"
      }
    }
  }),
  sizes: {
    sm: {
      "button&, a&, label&, &.is-clickable": {
        boxShadow: "sm",
        _hover: {
          boxShadow: "md"
        },
        _active: {
          boxShadow: "none"
        }
      }
    },
    lg: {
      "button&, a&, label&, &.is-clickable": {
        boxShadow: "md",
        _hover: {
          boxShadow: "lg"
        },
        _active: {
          boxShadow: "sm"
        }
      }
    }
  }
});
var card_default = config8;
var getColorSchemeBaseProps = (props) => {
  var _a6;
  switch (props.colorScheme) {
    case "white":
      return {
        ...baseBorder("default", props),
        backgroundColor: mode(
          "white",
          `color-mix(in srgb, white 10%, var(--spor-colors-bg-default-dark))`
        )(props),
        color: "inherit"
      };
    case "grey":
      return {
        backgroundColor: "lightGrey"
      };
    case "green": {
      return {
        backgroundColor: "seaMist"
      };
    }
    case "red": {
      return {
        backgroundColor: "pink"
      };
    }
    default:
      return {
        backgroundColor: ((_a6 = colors2[props.colorScheme]) == null ? void 0 : _a6[100]) ?? "platinum"
      };
  }
};
function getColorSchemeClickableProps(props) {
  var _a6, _b5;
  switch (props.colorScheme) {
    case "white":
      return {
        ...floatingBorder("default", props)
      };
    case "grey":
      return {
        outlineColor: "steel"
      };
    default:
      return {
        backgroundColor: ((_a6 = colors2[props.colorScheme]) == null ? void 0 : _a6[100]) ?? "platinum",
        outlineColor: ((_b5 = colors2[props.colorScheme]) == null ? void 0 : _b5[200]) ?? "silver"
      };
  }
}
var getColorSchemeHoverProps = (props) => {
  var _a6, _b5;
  switch (props.colorScheme) {
    case "white":
      return {
        backgroundColor: mode(
          "white",
          `color-mix(in srgb, white 20%, var(--spor-colors-bg-default-dark))`
        )(props),
        ...floatingBorder("hover", props)
      };
    case "grey":
      return {
        outlineColor: "osloGrey"
      };
    default:
      return {
        backgroundColor: ((_a6 = colors2[props.colorScheme]) == null ? void 0 : _a6[200]) ?? "silver",
        outlineColor: ((_b5 = colors2[props.colorScheme]) == null ? void 0 : _b5[400]) ?? "silver"
      };
  }
};
var getColorSchemeActiveProps = (props) => {
  var _a6, _b5;
  const { colorScheme } = props;
  switch (colorScheme) {
    case "white":
      return {
        backgroundColor: mode("bg.tertiary.light", `bg.default.dark`)(props),
        ...floatingBorder("active", props)
      };
    case "grey":
      return {
        backgroundColor: "white",
        outlineColor: "steel"
      };
    default:
      return {
        backgroundColor: ((_a6 = colors2[colorScheme]) == null ? void 0 : _a6[50]) ?? "lightGrey",
        outlineColor: ((_b5 = colors2[colorScheme]) == null ? void 0 : _b5[100]) ?? "silver"
      };
  }
};
var parts3 = anatomy("card-select").parts("trigger", "card");
var helpers4 = createMultiStyleConfigHelpers(parts3.keys);
var config9 = helpers4.defineMultiStyleConfig({
  baseStyle: (props) => ({
    trigger: {
      appearance: "none",
      display: "flex",
      alignItems: "center",
      transitionProperty: "outline",
      transitionDuration: "fast",
      ...baseText("default", props),
      ...focusVisibleStyles(props)
    },
    card: {
      borderRadius: "sm",
      boxShadow: "md",
      padding: 3,
      ...baseText("default", props),
      backgroundColor: mode(
        "white",
        `color-mix(in srgb, white 10%, var(--spor-colors-bg-default-dark))`
      )(props)
    }
  }),
  variants: {
    base: (props) => ({
      trigger: {
        ...baseBorder("default", props),
        _hover: {
          ...baseBorder("hover", props)
        },
        _active: {
          ...baseBackground("active", props),
          ...baseBorder("default", props)
        },
        _expanded: {
          ...baseBackground("active", props)
        }
      }
    }),
    ghost: (props) => ({
      trigger: {
        _hover: {
          ...ghostBackground("hover", props)
        },
        _active: {
          ...ghostBackground("active", props)
        },
        _expanded: {
          ...ghostBackground("selected", props)
        }
      }
    }),
    floating: (props) => ({
      trigger: {
        boxShadow: "sm",
        ...floatingBackground("default", props),
        ...floatingBorder("default", props),
        transition: "all .1s ease-out",
        _hover: {
          ...floatingBackground("hover", props),
          ...floatingBorder("hover", props)
        },
        _active: {
          ...floatingBackground("active", props),
          ...floatingBorder("active", props)
        },
        _expanded: {
          ...floatingBackground("active", props)
        }
      },
      card: {}
    })
  },
  sizes: {
    sm: {
      trigger: {
        paddingX: 1.5,
        paddingY: 1,
        minHeight: "1.25rem",
        fontSize: "xs",
        borderRadius: "sm"
      }
    },
    md: {
      trigger: {
        paddingX: 2,
        paddingY: 1.5,
        minHeight: "2.625rem",
        fontSize: "sm",
        borderRadius: "sm"
      }
    },
    lg: {
      trigger: {
        paddingX: 3,
        paddingY: 2,
        minHeight: "3.375rem",
        fontSize: "sm",
        borderRadius: "sm"
      }
    }
  }
});
var card_select_default = config9;
var helpers5 = createMultiStyleConfigHelpers$1(checkboxAnatomy.keys);
var config10 = helpers5.defineMultiStyleConfig({
  baseStyle: (props) => ({
    container: {
      _hover: {
        "input:enabled:not([aria-invalid]) + .chakra-checkbox__control": {
          ...baseBackground("hover", props),
          borderColor: brandBackground("hover", props).backgroundColor
        },
        "input:enabled[aria-invalid] + .chakra-checkbox__control": {
          backgroundColor: mode("white", "inherit")(props),
          borderColor: mode("outline.error.light", "outline.error.dark")
        },
        "input:enabled:checked:not([aria-invalid]) + .chakra-checkbox__control": {
          ...brandBackground("hover", props),
          borderColor: brandBackground("hover", props).backgroundColor
        },
        "input:enabled:checked[aria-invalid] + .chakra-checkbox__control": {
          borderColor: mode("outline.error.light", "outline.error.dark"),
          backgroundColor: mode("outline.error.light", "outline.error.dark")
        }
      }
    },
    icon: {
      fontSize: "1em",
      transitionProperty: "transform",
      transitionDuration: "normal",
      strokeWidth: "1.5px !important"
      // Required to make the default icon look correct
    },
    control: {
      width: 4,
      height: 4,
      transitionProperty: "background, border-color",
      transitionDuration: "normal",
      border: "2px solid",
      borderColor: mode(
        "base.outline.default.light",
        "base.outline.default.dark"
      )(props),
      borderRadius: "xs",
      ...baseBackground("default", props),
      ...focusVisibleStyles(props),
      _checked: {
        ...brandText("default", props),
        ...brandBackground("default", props),
        borderColor: brandBackground("default", props).backgroundColor,
        _disabled: {
          ...baseBackground("disabled", props),
          ...baseText("disabled", props),
          borderColor: "currentColor"
        },
        _invalid: {
          backgroundColor: "brightRed",
          borderColor: "brightRed"
        }
      },
      _disabled: {
        ...baseBackground("disabled", props),
        borderColor: baseText("disabled", props).color
      },
      _invalid: {
        ...baseBackground("default", props),
        borderColor: "brightRed"
      }
    },
    label: {
      userSelect: "none",
      _disabled: { opacity: 0.4 }
    }
  })
});
var checkbox_default = config10;
var parts4 = anatomy$1("choice-chip").parts("container", "icon", "label");
var helpers6 = createMultiStyleConfigHelpers$1(parts4.keys);
var config11 = helpers6.defineMultiStyleConfig({
  baseStyle: (props) => ({
    container: {
      display: "inline-flex",
      alignItems: "center",
      fontSize: "xs",
      cursor: "pointer",
      transitionProperty: "all",
      borderRadius: "xl",
      transitionDuration: "fast",
      _checked: {
        outlineColor: "transparent",
        ...accentText("selected", props),
        ...accentBackground("selected", props),
        _hover: {
          ...brandBackground("hover", props),
          ...baseText("selected", props),
          outlineColor: "transparent"
        },
        _active: {
          ...baseText("selected", props),
          ...brandBackground("active", props)
        }
      },
      _disabled: {
        pointerEvents: "none",
        boxShadow: "none",
        ...baseText("disabled", props),
        ...baseBackground("disabled", props),
        _hover: {
          ...baseBackground("disabled", props),
          boxShadow: "none",
          ...baseText("disabled", props)
        },
        _checked: {
          cursor: "not-allowed",
          boxShadow: "none",
          ...baseText("disabled", props),
          ...baseBackground("disabled", props),
          _hover: {
            ...baseBackground("disabled", props),
            boxShadow: "none",
            ...baseText("disabled", props)
          }
        }
      },
      "input:focus-visible + &": focusVisibleStyles(props)._focusVisible
    },
    icon: {
      marginRight: props.hasLabel ? 1 : 0
    }
  }),
  variants: {
    base: (props) => ({
      container: {
        ...baseBorder("default", props),
        ...baseText("default", props),
        _hover: {
          ...baseText("default", props),
          ...baseBorder("hover", props)
        },
        _active: {
          ...baseBackground("active", props),
          ...baseBorder("default", props)
        }
      }
    }),
    accent: (props) => ({
      container: {
        ...accentBackground("default", props),
        ...accentText("default", props),
        _hover: {
          ...accentBackground("hover", props),
          ...accentText("default", props)
        },
        _active: {
          ...accentText("default", props),
          ...accentBackground("active", props)
        }
      },
      _active: {
        ...accentText("default", props),
        ...accentBackground("active", props)
      }
    }),
    floating: (props) => ({
      container: {
        ...floatingBackground("default", props),
        ...baseText("default", props),
        ...floatingBorder("default", props),
        boxShadow: "sm",
        _hover: {
          ...floatingBackground("hover", props),
          ...floatingBorder("hover", props),
          ...baseText("default", props),
          boxShadow: "md"
        },
        _active: {
          ...floatingBackground("active", props),
          ...floatingBorder("active", props),
          ...baseText("default", props)
        }
      }
    })
  },
  sizes: {
    xs: {
      container: {
        _checked: {
          borderRadius: "0.563rem"
        },
        height: 5,
        paddingX: 1.5
      }
    },
    sm: {
      container: {
        _checked: {
          borderRadius: "sm"
        },
        height: 6,
        paddingX: 2
      }
    },
    md: {
      container: {
        _checked: {
          borderRadius: "sm"
        },
        height: 7,
        paddingX: 2
      }
    },
    lg: {
      container: {
        _checked: {
          borderRadius: "md"
        },
        height: 8,
        paddingX: 3
      }
    }
  },
  defaultProps: {
    size: "sm"
  }
});
var choice_chip_default = config11;
var $size6 = cssVar$1("close-button-size");
var config12 = defineStyleConfig$1({
  baseStyle: (props) => ({
    w: [$size6.reference],
    h: [$size6.reference],
    transitionProperty: "common",
    transitionDuration: "normal",
    borderRadius: "md",
    backgroundColor: "transparent",
    color: mode("darkGrey", "white")(props),
    fontWeight: "normal",
    ...focusVisibleStyles(props),
    _hover: {
      ...ghostBackground("hover", props),
      _disabled: {
        color: "dimGrey"
      }
    },
    _active: {
      ...ghostBackground("active", props)
    }
  }),
  sizes: {
    lg: {
      [$size6.variable]: "40px",
      fontSize: "xs"
    },
    md: {
      [$size6.variable]: "32px",
      fontSize: "0.75rem"
    },
    sm: {
      [$size6.variable]: "24px",
      fontSize: "0.625rem"
    }
  },
  defaultProps: {
    size: "md"
  }
});
var close_button_default = config12;
var { variants: variants13, defaultProps: defaultProps2 } = badge_default;
var config13 = defineStyleConfig$1({
  baseStyle: {
    fontFamily: "monospace",
    fontSize: ["mobile.xs", "desktop.xs"],
    borderRadius: "xs",
    paddingX: 1
  },
  variants: variants13,
  defaultProps: defaultProps2
});
var code_default = config13;
var parts5 = anatomy$1("datepicker").parts(
  "wrapper",
  "calendarTriggerButton",
  "arrow",
  "calendarPopover",
  "calendar",
  "weekdays",
  "weekend",
  "dateCell",
  "inputLabel",
  "dateTimeSegment",
  "cell"
);
var $arrowBackground = cssVar$1("popper-arrow-bg");
var helpers7 = createMultiStyleConfigHelpers$1(parts5.keys);
var config14 = helpers7.defineMultiStyleConfig({
  baseStyle: (props) => ({
    wrapper: {
      transitionProperty: "box-shadow",
      transitionDuration: "fast",
      borderRadius: "sm",
      display: "flex",
      flex: 1,
      paddingY: 0.5,
      alignItems: "center",
      _hover: {
        zIndex: zIndices2.docked
      },
      _disabled: {
        pointerEvents: "none",
        ...baseBackground("disabled", props)
      },
      _focusWithin: {
        ...focusVisibleStyles(props)._focusVisible
      }
    },
    inputLabel: {
      fontSize: "mobile.xs",
      color: mode("darkGrey", "white")(props),
      margin: 0,
      cursor: "text"
    },
    dateTimeSegment: {
      color: mode(
        "darkGrey",
        props.isPlaceholder ? "whiteAlpha.400" : "white"
      )(props),
      _focus: {
        ...brandBackground("hover", props),
        color: "white"
      }
    },
    calendarTriggerButton: {
      width: 8,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      borderLeftRadius: "sm",
      transitionProperty: "box-shadow, background-color",
      transitionSpeed: "fast",
      position: "relative",
      paddingTop: 1,
      paddingBottom: 1,
      borderRadius: "sm",
      right: "9px",
      ...focusVisibleStyles(props),
      _hover: {
        ...ghostBackground("hover", props)
      },
      _active: {
        ...ghostBackground("active", props)
      },
      _invalid: {
        ...baseBorder("invalid", props)
      }
    },
    arrow: {
      [$arrowBackground.variable]: surface("default", props).backgroundColor
    },
    calendarPopover: {
      ...floatingBackground("default", props),
      ...baseText("default", props),
      ...floatingBorder("default", props),
      boxShadow: "md"
    },
    weekdays: {
      ...baseText("default", props)
    },
    weekend: {
      ...accentText("default", props)
    },
    cell: {
      '&[aria-selected="true"] + [aria-selected="true"] > button': {
        "&::before": {
          content: '""',
          display: "block",
          width: "100%",
          height: "100%",
          position: "absolute",
          left: "-50%",
          top: 0,
          bottom: 0,
          zIndex: -1,
          ...brandBackground("default", props)
        }
      }
    },
    dateCell: {
      ...ghostBackground("default", props),
      ...baseText("default", props),
      borderRadius: "50%",
      position: "relative",
      transition: ".1s ease-in-out",
      userSelect: "none",
      width: [6, 7],
      height: [6, 7],
      transitionProperty: "common",
      transitionSpeed: "fast",
      _hover: {
        ...ghostBackground("hover", props)
      },
      ...focusVisibleStyles(props),
      _active: {
        ...ghostBackground("active", props)
      },
      _disabled: {
        ...baseBackground("disabled", props),
        ...baseText("disabled", props),
        pointerEvents: "none"
      },
      _selected: {
        ...brandBackground("default", props),
        ...brandText("default", props),
        _active: {
          ...brandBackground("active", props),
          ...brandText("active", props)
        }
      },
      "&[data-today]": {
        ...baseBorder("default", props)
      },
      "&[data-unavailable]": {
        pointerEvents: "none",
        ...baseBackground("disabled", props),
        ...baseText("disabled", props)
      }
    }
  }),
  variants: {
    base: (props) => ({
      wrapper: {
        ...baseBorder("default", props),
        ...baseBackground("default", props),
        _hover: {
          ...baseBorder("hover", props)
        },
        _invalid: {
          ...baseBorder("invalid", props)
        },
        _disabled: {
          ...baseBorder("disabled", props)
        }
      }
    }),
    floating: (props) => ({
      wrapper: {
        ...floatingBackground("default", props),
        ...floatingBorder("default", props),
        boxShadow: "sm",
        _hover: {
          ...floatingBorder("hover", props)
        },
        _invalid: {
          ...baseBorder("invalid", props)
        },
        _disabled: {
          ...baseBorder("disabled", props)
        }
      }
    }),
    ghost: (props) => ({
      wrapper: {
        _hover: {
          ...baseBorder("hover", props)
        },
        _invalid: {
          ...baseBorder("invalid", props)
        }
      }
    })
  }
});
var datepicker_default = config14;
var baseStyle43 = defineStyle((props) => ({
  borderColor: mode("blackAlpha.300", "whiteAlpha.300")(props)
}));
var variantSolid5 = defineStyle({
  borderStyle: "solid"
});
var variantDashed2 = defineStyle({
  borderStyle: "dashed"
});
var variants14 = {
  solid: variantSolid5,
  dashed: variantDashed2
};
var sizes25 = {
  sm: {
    borderWidth: "1px",
    borderRadius: "0.5px"
  },
  md: {
    borderWidth: "2px",
    borderRadius: "1px"
  },
  lg: {
    borderWidth: "3px",
    borderRadius: "1.5px"
  }
};
var divider_default = defineStyleConfig({
  baseStyle: baseStyle43,
  variants: variants14,
  sizes: sizes25,
  defaultProps: {
    variant: "solid",
    size: "md"
  }
});
var bg = (bg2, props) => {
  switch (bg2) {
    case "default":
      return {
        backgroundColor: mode("bg.default.light", "bg.default.dark")(props)
      };
    case "secondary":
      return {
        backgroundColor: mode("bg.secondary.light", "bg.secondary.dark")(props)
      };
    case "tertiary":
      return {
        backgroundColor: mode("bg.tertiary.light", "bg.tertiary.dark")(props)
      };
  }
};

// src/theme/components/drawer.ts
var helpers8 = createMultiStyleConfigHelpers$1(modalAnatomy.keys);
var config15 = helpers8.defineMultiStyleConfig({
  baseStyle: (props) => ({
    overlay: {
      backgroundColor: "blackAlpha.600",
      zIndex: "modal",
      color: "red"
    },
    dialogContainer: {
      display: "flex",
      zIndex: "modal",
      justifyContent: "center",
      alignItems: props.isCentered ? "center" : "flex-start",
      overflow: props.scrollBehavior === "inside" ? "hidden" : "auto"
    },
    dialog: {
      ...bg("default", props),
      ...baseText("default", props),
      zIndex: "modal",
      maxHeight: props.scrollBehavior === "inside" ? "calc(100% - 7.5rem)" : void 0,
      boxShadow: "md"
    },
    header: {
      paddingX: 3,
      paddingTop: 6,
      paddingBottom: 2,
      fontWeight: "bold",
      fontFamily: "body"
    },
    closeButton: {
      position: "absolute",
      top: 3,
      insetEnd: 3,
      zIndex: "modal"
    },
    body: {
      paddingX: 3,
      paddingBottom: 6,
      flex: 1,
      overflow: props.scrollBehavior === "inside" ? "auto" : void 0
    },
    footer: {
      paddingX: 3,
      paddingBottom: 3
    }
  }),
  sizes: {
    xs: getSize5("xs"),
    sm: getSize5("sm"),
    md: getSize5("md"),
    lg: getSize5("lg"),
    xl: getSize5("xl"),
    "2xl": getSize5("2xl"),
    "3xl": getSize5("3xl"),
    "4xl": getSize5("4xl"),
    "5xl": getSize5("5xl"),
    "6xl": getSize5("6xl"),
    full: getSize5("full")
  },
  defaultProps: {
    size: "md"
  }
});
function getSize5(value) {
  if (value === "full") {
    return {
      dialog: {
        maxWidth: "100vw",
        minHeight: "100vh",
        "@supports(min-height: -webkit-fill-available)": {
          minHeight: "-webkit-fill-available"
        },
        marginY: 0
      }
    };
  }
  return {
    dialog: { maxWidth: value }
  };
}
var drawer_default = config15;
var parts6 = anatomy$1("fab").parts("container", "icon", "text");
var helpers9 = createMultiStyleConfigHelpers$1(parts6.keys);
var config16 = helpers9.defineMultiStyleConfig({
  baseStyle: (props) => ({
    container: {
      display: "flex",
      alignItems: "center",
      paddingY: 2,
      paddingLeft: 2,
      paddingRight: props.isTextVisible ? 3 : 2,
      cursor: "pointer",
      overflowX: "hidden",
      whiteSpace: "nowrap",
      borderRadius: "xl",
      boxShadow: "md",
      transitionDuration: "fast",
      transitionProperty: "common",
      position: "fixed",
      zIndex: "sticky",
      ...getPositionProps(props),
      ...focusVisibleStyles(props),
      _disabled: {
        ...surface("disabled", props),
        ...baseText("disabled", props),
        pointerEvents: "none"
      }
    },
    icon: {
      marginRight: props.isTextVisible ? 1 : 0
    },
    text: {
      display: "flex",
      flex: "none",
      alignItems: "center",
      fontWeight: "bold",
      textStyle: "sm"
    }
  }),
  variants: {
    brand: (props) => ({
      container: {
        ...brandBackground("default", props),
        ...brandText("default", props),
        _hover: {
          ...brandBackground("hover", props)
        },
        _active: {
          ...brandBackground("active", props)
        }
      }
    }),
    base: (props) => ({
      container: {
        ...baseBackground("default", props),
        ...baseBorder("default", props),
        ...baseText("default", props),
        _hover: {
          ...baseBackground("hover", props),
          ...baseBorder("hover", props)
        },
        _active: {
          ...baseBorder("default", props),
          ...baseBackground("active", props)
        }
      }
    }),
    accent: (props) => ({
      container: {
        ...accentBackground("default", props),
        ...accentText("default", props),
        _hover: {
          ...accentBackground("hover", props),
          ...accentText("default", props)
        },
        _active: {
          ...accentBackground("active", props)
        }
      }
    })
  },
  defaultProps: {
    variant: "brand"
  }
});
var fab_default = config16;
var getPositionProps = (props) => {
  switch (props.placement) {
    case "top left":
      return { top: "1em", left: "1em" };
    case "top right":
      return { top: "1em", right: "1em" };
    case "bottom left":
      return { bottom: "1em", left: "1em" };
    case "bottom right":
      return { bottom: "1em", right: "1em" };
  }
};
var helpers10 = createMultiStyleConfigHelpers$1(formAnatomy.keys);
var config17 = helpers10.defineMultiStyleConfig({
  baseStyle: (props) => ({
    container: {
      width: "100%",
      position: "relative",
      transitionProperty: "common",
      transitionDuration: "fast"
    },
    requiredIndicator: {
      marginStart: 1,
      color: mode("brightRed", "lightRed")(props)
    },
    helperText: {
      marginTop: 2,
      color: mode("dimGrey", "whiteAlpha.600")(props),
      lineHeight: "normal",
      fontSize: "sm"
    }
  })
});
var form_default = config17;
var config18 = defineStyleConfig$1({
  baseStyle: {
    fontSize: "mobile.sm",
    marginEnd: 3,
    marginBottom: 2,
    transitionProperty: "common",
    transitionDuration: "normal",
    opacity: 1,
    _disabled: {
      opacity: 0.4
    }
  }
});
var form_label_default = config18;

// src/theme/utils/sr-utils.ts
var srOnly2 = {
  border: "0 !important",
  clip: "rect(1px, 1px, 1px, 1px) !important",
  clipPath: "inset(50%) !important",
  height: "1px !important",
  margin: "-1px !important",
  overflow: "hidden !important",
  padding: "0 !important",
  position: "absolute !important",
  width: "1px !important",
  whiteSpace: "nowrap !important"
};

// src/theme/components/info-select.ts
var parts7 = anatomy("InfoSelect").parts(
  "container",
  "label",
  "button",
  "arrowIcon"
);
var helpers11 = createMultiStyleConfigHelpers$1(parts7.keys);
var config19 = helpers11.defineMultiStyleConfig({
  baseStyle: (props) => ({
    container: {},
    label: {
      position: "relative",
      fontSize: ["mobile.xs", "desktop.sm"],
      ...props.isLabelSrOnly ? srOnly2 : {}
    },
    innerButton: {
      display: "flex",
      flexDir: "column",
      alignItems: "start",
      justifyContent: "start"
    },
    button: {
      display: "flex",
      appearance: "none",
      width: "100%",
      height: 8,
      borderTopRadius: "sm",
      borderBottomRadius: props.isOpen ? 0 : "sm",
      paddingY: 1.5,
      paddingX: 3,
      justifyContent: "space-between",
      alignItems: "center",
      fontSize: "mobile.md",
      ...baseBorder("default", props),
      _hover: {
        ...baseBorder("hover", props)
      },
      ...focusVisibleStyles(props),
      _disabled: {
        pointerEvents: "none",
        ...baseText("disabled", props),
        ...baseBackground("disabled", props)
      },
      _active: {
        ...baseBackground("active", props)
      },
      _invalid: {
        ...baseBorder("invalid", props)
      }
    },
    placeholder: {},
    arrowIcon: {}
  }),
  variants: {
    base: () => ({}),
    floating: (props) => ({
      button: {
        ...floatingBackground("default", props),
        ...floatingBorder("default", props),
        _hover: {
          ...floatingBorder("hover", props),
          ...floatingBackground("hover", props)
        },
        _active: {
          ...floatingBorder("active", props),
          ...floatingBackground("active", props)
        }
      }
    })
  },
  defaultProps: {
    variant: "base"
  }
});
var info_select_default = config19;
var parts8 = anatomy$1("travel-tag").parts(
  "container",
  "iconContainer",
  "icon",
  "textContainer",
  "title",
  "description",
  "deviationIcon"
);
var helpers12 = createMultiStyleConfigHelpers$1(parts8.keys);
var config20 = helpers12.defineMultiStyleConfig({
  baseStyle: (props) => ({
    container: {
      position: "relative",
      display: "flex",
      alignItems: "center",
      padding: 0.5,
      width: "fit-content",
      ...getDeviationContainerStyle(props),
      transitionDuration: "fast",
      transitionProperty: "common",
      _disabled: {
        backgroundColor: "silver"
      },
      "button&, a&": {
        boxShadow: "sm",
        _hover: {
          boxShadow: "md"
        },
        ...focusVisibleStyles(props),
        _active: {
          opacity: 0.5,
          boxShadow: "none"
        }
      }
    },
    iconContainer: {
      padding: 0.5,
      "[aria-disabled=true] &": {
        backgroundColor: "osloGrey",
        color: "white"
      }
    },
    textContainer: {
      color: "darkGrey",
      paddingRight: 0.5,
      whiteSpace: "nowrap",
      "[aria-disabled=true] &": {
        color: "dimGrey"
      }
    },
    title: {
      fontWeight: "bold"
    },
    description: {
      fontWeight: "normal"
    },
    deviationIcon: {
      ...getDeviationIconStyle(props)
    }
  }),
  variants: {
    "local-train": {
      container: {
        backgroundColor: "linjetag.lokaltogLight"
      }
    },
    "region-train": {
      container: {
        backgroundColor: "linjetag.regiontogLight"
      }
    },
    "region-express-train": {
      container: {
        backgroundColor: "linjetag.regionEkspressLight"
      }
    },
    "long-distance-train": {
      container: {
        backgroundColor: "linjetag.fjerntogLight"
      }
    },
    "airport-express-train": {
      container: {
        backgroundColor: "linjetag.flytogLight"
      }
    },
    "vy-bus": {
      container: {
        backgroundColor: "linjetag.vyBussLight"
      }
    },
    "local-bus": {
      container: {
        backgroundColor: "linjetag.lokalbussLight"
      }
    },
    ferry: {
      container: {
        backgroundColor: "linjetag.fergeLight"
      }
    },
    subway: {
      container: {
        backgroundColor: "linjetag.tbaneLight"
      }
    },
    tram: {
      container: {
        backgroundColor: "linjetag.trikkLight"
      }
    },
    "alt-transport": {
      container: {
        backgroundColor: "linjetag.altTransportLight"
      }
    },
    walk: (props) => ({
      container: {
        backgroundColor: mode("white", "transparent")(props),
        _disabled: {
          backgroundColor: "white"
        }
      },
      iconContainer: {
        border: "none",
        position: "relative",
        left: -1,
        backgroundColor: mode("white", "transparent")(props),
        "[aria-disabled=true] &": {
          backgroundColor: "transparent",
          color: "osloGrey"
        }
      },
      textContainer: {
        position: "absolute",
        left: 2,
        bottom: -0.5,
        "[aria-disabled=true] &": {
          color: "osloGrey"
        }
      },
      title: {
        fontSize: "mobile.xs",
        fontWeight: "normal",
        color: mode("black", "white")(props)
      },
      description: {
        display: "none"
      }
    }),
    custom: (props) => ({
      container: {
        backgroundColor: props.foregroundColor
      }
    })
  },
  sizes: {
    sm: {
      container: {
        borderRadius: "sm"
      },
      iconContainer: {
        borderRadius: "xs"
      },
      textContainer: {
        marginLeft: 1,
        fontSize: "mobile.sm"
      }
    },
    md: {
      container: {
        borderRadius: "sm"
      },
      iconContainer: {
        borderRadius: "0.5625rem"
        // 9px
      },
      textContainer: {
        marginLeft: 1.5,
        fontSize: "mobile.sm"
      }
    },
    lg: {
      container: {
        borderRadius: "sm"
      },
      iconContainer: {
        borderRadius: "0.5625rem"
        // 9px
      },
      textContainer: {
        marginLeft: 2,
        fontSize: "mobile.md"
      }
    }
  },
  defaultProps: {
    size: "md"
  }
});
var travel_tag_default = config20;
var getDeviationContainerStyle = (props) => {
  switch (props.deviationLevel) {
    case "critical":
      return {
        border: "1px solid",
        borderColor: getDeviationBorderColor(props)
      };
    case "major":
      return {
        border: "1px solid",
        borderColor: getDeviationBorderColor(props)
      };
    default:
      return {};
  }
};
var getDeviationBorderColor = (props) => {
  switch (props.deviationLevel) {
    case "critical":
      return "brightRed";
    case "major":
      return "golden";
    default:
      return "transparent";
  }
};
var getDeviationIconStyle = (props) => {
  return {
    position: "absolute",
    top: "0",
    right: "0",
    transform: "translate(50%, -50%)",
    zIndex: "banner",
    stroke: "white",
    color: deviationIconColor[props.deviationLevel] || "inherit"
  };
};
var deviationIconColor = {
  critical: "brightRed",
  major: "golden",
  minor: "golden",
  info: "ocean"
};

// src/theme/components/info-tag.ts
var parts9 = anatomy$1("info-tag").parts(
  "container",
  "iconContainer",
  "icon",
  "textContainer",
  "title",
  "description"
);
var helpers13 = createMultiStyleConfigHelpers$1(parts9.keys);
var config21 = helpers13.defineMultiStyleConfig({
  baseStyle: (props) => ({
    ...travel_tag_default.baseStyle(props),
    iconContainer: {
      ...travel_tag_default.baseStyle(props).iconContainer,
      padding: 1
    },
    textContainer: {
      color: mode("darkGrey", "white")(props)
    }
  }),
  sizes: {
    ...travel_tag_default.sizes,
    sm: {
      ...travel_tag_default.sizes.sm,
      iconContainer: {
        borderRadius: "0.375rem"
      }
    },
    md: {
      ...travel_tag_default.sizes.md,
      iconContainer: {
        borderRadius: "0.375rem"
      }
    },
    lg: {
      ...travel_tag_default.sizes.lg,
      iconContainer: {
        borderRadius: "sm"
      }
    }
  },
  defaultProps: {
    size: "md"
  },
  variants: {
    walk: (props) => ({
      iconContainer: {
        backgroundColor: mode("white", "transparent")(props),
        boxShadow: mode(
          `${props.theme.shadows.md}, inset 0 0 0 2px ${props.theme.colors.black[200]}`,
          `${props.theme.shadows.md}, inset 0 0 0 2px ${props.theme.colors.whiteAlpha[400]}`
        )(props)
      }
    })
  }
});
var info_tag_default = config21;
var helpers14 = createMultiStyleConfigHelpers$1(inputAnatomy.keys);
var config22 = helpers14.defineMultiStyleConfig({
  baseStyle: (props) => ({
    field: {
      appearance: "none",
      width: "100%",
      outline: "none",
      border: 0,
      borderRadius: "sm",
      transitionProperty: "common",
      transitionDuration: "fast",
      position: "relative",
      paddingX: 3,
      height: 8,
      fontSize: "mobile.md",
      ...baseBackground("default", props),
      ...baseBorder("default", props),
      _hover: {
        ...baseBorder("hover", props)
      },
      _active: {
        ...baseBackground("active", props),
        ...baseBorder("default", props)
      },
      _focusVisible: {
        ...focusVisibleStyles(props)._focusVisible,
        outlineOffset: 0
      },
      _disabled: {
        ...surface("disabled", props),
        ...baseBorder("disabled", props),
        pointerEvents: "none"
      },
      _invalid: {
        ...baseBorder("invalid", props),
        _hover: {
          ...baseBorder("hover", props)
        }
      },
      " + label": {
        fontSize: ["mobile.sm", "desktop.sm"],
        top: "2px",
        left: props.paddingLeft || props.pl || 3,
        zIndex: 2,
        position: "absolute",
        marginY: 2,
        transition: ".1s ease-out",
        transformOrigin: "top left",
        cursor: "text"
      },
      "&:not(:placeholder-shown)": {
        paddingTop: "1rem",
        "& + label": {
          transform: "scale(0.825) translateY(-10px)"
        }
      }
    },
    element: {
      height: "100%"
    },
    group: {
      ":has(:disabled)": {
        ...baseText("disabled", props)
      }
    }
  })
});
var input_default = config22;
var parts10 = anatomy$1("line-tag").parts("iconContainer", "icon");
var helpers15 = createMultiStyleConfigHelpers$1(parts10.keys);
var config23 = helpers15.defineMultiStyleConfig({
  baseStyle: {
    iconContainer: {
      display: "flex",
      justifyContent: "center",
      alignItems: "center"
    },
    icon: {
      color: "white"
    }
  },
  variants: {
    "local-train": {
      iconContainer: {
        backgroundColor: "linjetag.lokaltog"
      }
    },
    "region-train": {
      iconContainer: {
        backgroundColor: "linjetag.regiontog"
      }
    },
    "region-express-train": {
      iconContainer: {
        backgroundColor: "linjetag.regionEkspress"
      }
    },
    "long-distance-train": {
      iconContainer: {
        backgroundColor: "linjetag.fjerntog"
      }
    },
    "airport-express-train": {
      iconContainer: {
        backgroundColor: "linjetag.flytog"
      }
    },
    "vy-bus": {
      iconContainer: {
        backgroundColor: "linjetag.vyBuss"
      }
    },
    "local-bus": {
      iconContainer: {
        backgroundColor: "linjetag.lokalbuss"
      }
    },
    ferry: {
      iconContainer: {
        backgroundColor: "linjetag.ferge"
      }
    },
    subway: {
      iconContainer: {
        backgroundColor: "linjetag.tbane"
      }
    },
    tram: {
      iconContainer: {
        backgroundColor: "linjetag.trikk"
      }
    },
    "alt-transport": {
      iconContainer: {
        backgroundColor: "linjetag.altTransport"
      },
      icon: {
        color: "darkGrey",
        "[aria-disabled=true] &": {
          color: "white"
        }
      }
    },
    walk: (props) => ({
      iconContainer: {
        backgroundColor: "white",
        borderWidth: 1,
        borderStyle: "solid",
        borderColor: "blackAlpha.200"
      },
      icon: {
        color: mode("darkGrey", "white")(props),
        "[aria-disabled=true] &": {
          color: "osloGrey"
        }
      }
    }),
    custom: (props) => ({
      iconContainer: {
        backgroundColor: props.backgroundColor
      }
    })
  },
  sizes: {
    sm: {
      iconContainer: {
        borderRadius: "0.5625rem",
        padding: 1
      }
    },
    md: {
      iconContainer: {
        borderRadius: "0.5625rem",
        padding: 1
      }
    },
    lg: {
      iconContainer: {
        borderRadius: "sm",
        padding: 1
      }
    }
  },
  defaultProps: {
    size: "md"
  }
});
var line_icon_default = config23;
var config24 = defineStyleConfig$1({
  baseStyle: (props) => ({
    transitionProperty: "common",
    transitionDuration: "fast",
    transitionTimingFunction: "ease-out",
    cursor: "pointer",
    backgroundImage: "linear-gradient(currentColor, currentColor)",
    backgroundSize: "100% 1px",
    backgroundPosition: "0 100%",
    backgroundRepeat: "no-repeat",
    borderRadius: "none",
    padding: "2px",
    color: "inherit",
    display: "inline",
    position: "relative",
    boxDecorationBreak: "clone",
    "&:focus, &:focus-visible, &:active, &:hover": {
      backgroundImage: "none",
      backgroundSize: "100%",
      outline: "none",
      borderRadius: "xs"
    },
    ...focusVisibleStyles(props),
    svg: {
      display: "inline-block",
      width: "1.125em",
      height: "1.125em",
      position: "relative",
      bottom: "-0.2em"
    }
  }),
  variants: {
    primary: (props) => ({
      ...baseText("default", props),
      _hover: {
        ...brandText("hover", props),
        ...brandBackground("hover", props)
      },
      _active: {
        ...brandText("active", props),
        ...brandBackground("active", props)
      }
    }),
    secondary: (props) => ({
      backgroundImage: `linear-gradient(${mode(
        "blackAlpha.400",
        "whiteAlpha.400"
      )(props)}, ${mode("blackAlpha.400", "whiteAlpha.400")(props)})`,
      ...baseText("default", props),
      "&:focus, &:focus-visible, &:active, &:hover": {
        outline: "1px solid"
      },
      ...baseBackground("default", props),
      _hover: {
        ...baseBorder("hover", props),
        // TODO: This is also weird
        ...baseBackground("hover", props),
        outlineWidth: 1
      },
      _active: {
        ...baseBackground("active", props)
      }
    })
  },
  defaultProps: {
    variant: "primary"
  }
});
var link_default = config24;

// src/theme/components/list.ts
var { defineMultiStyleConfig: defineMultiStyleConfig28, definePartsStyle: definePartsStyle28 } = createMultiStyleConfigHelpers(listAnatomy.keys);
var baseStyle44 = definePartsStyle28({
  container: {
    fontSize: ["mobile.sm", "desktop.sm"]
  },
  item: {
    fontFamily: "body"
  },
  icon: {
    marginEnd: "2",
    display: "inline",
    verticalAlign: "text-bottom"
  }
});
var list_default = defineMultiStyleConfig28({
  baseStyle: baseStyle44
});
function outlineBorder(state2, props) {
  switch (state2) {
    case "error":
      return {
        outlineColor: mode("outline.error.light", "outline.error.dark")(props)
      };
    case "focus":
      return {
        outlineColor: mode("outline.focus.light", "outline.focus.dark")(props)
      };
    default:
      return {
        outlineColor: mode(
          "outline.default.light",
          "outline.default.dark"
        )(props)
      };
  }
}

// src/theme/components/listbox.ts
var parts11 = anatomy("ListBox").parts(
  "container",
  "item",
  "label",
  "description"
);
var helpers16 = createMultiStyleConfigHelpers$1(parts11.keys);
var config25 = helpers16.defineMultiStyleConfig({
  baseStyle: (props) => ({
    container: {
      ...surface("default", props),
      boxShadow: "sm",
      overflowY: "auto",
      maxHeight: "50vh",
      width: "100%",
      listStyle: "none",
      borderBottomRadius: "sm",
      ...baseBorder("default", props)
    },
    item: {
      paddingX: 2,
      paddingY: 1,
      marginY: 1,
      marginX: 1,
      borderRadius: "sm",
      ...ghostText("default", props),
      cursor: "pointer",
      outline: "none",
      _active: {
        ...ghostBackground("active", props)
      },
      _focusVisible: {
        ...outlineBorder("focus", props)
      },
      _hover: {
        ...ghostBackground("hover", props)
      },
      _selected: {
        ...ghostBackground("active", props)
      }
    },
    label: {},
    description: {
      fontSize: ["mobile.xs", "desktop.xs"],
      ...ghostText("default", props),
      "[aria-selected='true'] &": {
        ...ghostText("selected", props)
      }
    }
  })
});
var listbox_default = config25;
var parts12 = anatomy$1("media-controller-button").parts("container", "icon");
var helpers17 = createMultiStyleConfigHelpers$1(parts12.keys);
var config26 = helpers17.defineMultiStyleConfig({
  baseStyle: (props) => ({
    container: {
      fontSize: 30,
      transitionProperty: "common",
      transitionDuration: "fast",
      borderRadius: "round",
      appearance: "none",
      background: "transparent",
      border: "none",
      cursor: "pointer",
      display: "flex",
      padding: 1,
      alignSelf: "center",
      // The SVG icon color is set to the brand background color, due to how SVGs work
      color: brandBackground("default", props).backgroundColor,
      ...focusVisibleStyles(props)
    },
    icon: {
      flex: "0 0 auto",
      display: "block",
      width: "1em",
      height: "1em"
    }
  }),
  variants: {
    play: (props) => ({
      container: {
        padding: 0,
        ...brandText("default", props),
        ...brandBackground("default", props),
        _hover: {
          ...brandText("default", props),
          ...brandBackground("hover", props)
        },
        _active: {
          ...brandText("default", props),
          ...brandBackground("active", props)
        },
        _disabled: {
          pointerEvents: "none",
          color: mode("icon.disabled.light", "icon.disabled.dark")(props),
          ...surface("disabled", props)
        }
      }
    }),
    jumpSkip: (props) => ({
      container: {
        _hover: {
          ...ghostBackground("hover", props)
        },
        _active: {
          ...ghostBackground("active", props)
        },
        _disabled: {
          pointerEvents: "none",
          ...surface("disabled", props),
          ...baseText("disabled", props)
        }
      },
      icon: {
        width: "0.71em",
        height: "0.71em"
      }
    })
  },
  sizes: {
    sm: (props) => ({
      container: {
        fontSize: props.variant === "play" ? 24 : 42,
        width: props.variant === "play" ? "2.625rem" : void 0,
        height: props.variant === "play" ? "2.625rem" : void 0
      }
    }),
    lg: (props) => ({
      container: {
        fontSize: props.variant === "play" ? 38 : 60,
        width: props.variant === "play" ? "3.75rem" : void 0,
        height: props.variant === "play" ? "3.75rem" : void 0
      }
    })
  }
});
var media_controller_button_default = config26;
var helpers18 = createMultiStyleConfigHelpers$1(modalAnatomy.keys);
var config27 = helpers18.defineMultiStyleConfig({
  baseStyle: (props) => ({
    overlay: {
      backgroundColor: "blackAlpha.600",
      zIndex: "modal"
    },
    dialogContainer: {
      display: "flex",
      zIndex: "modal",
      justifyContent: "center",
      alignItems: props.isCentered ? "center" : "flex-start",
      overflow: props.scrollBehavior === "inside" ? "hidden" : "auto"
    },
    dialog: {
      borderRadius: "md",
      ...bg("default", props),
      ...baseText("default", props),
      marginY: "3.75rem",
      zIndex: "modal",
      maxHeight: props.scrollBehavior === "inside" ? "calc(100% - 7.5rem)" : void 0,
      boxShadow: "md"
    },
    header: {
      paddingX: 5,
      paddingTop: 6,
      paddingBottom: 2,
      fontWeight: "bold",
      fontFamily: "body"
    },
    closeButton: {
      position: "absolute",
      color: "inherit",
      top: 3,
      insetEnd: 3
    },
    body: {
      paddingX: 5,
      paddingBottom: 6,
      flex: 1,
      overflow: props.scrollBehavior === "inside" ? "auto" : void 0
    },
    footer: {
      paddingX: 3,
      paddingBottom: 3
    }
  }),
  sizes: {
    xs: getSize6("xs"),
    sm: getSize6("sm"),
    md: getSize6("md"),
    lg: getSize6("lg"),
    xl: getSize6("xl"),
    "2xl": getSize6("2xl"),
    "3xl": getSize6("3xl"),
    "4xl": getSize6("4xl"),
    "5xl": getSize6("5xl"),
    "6xl": getSize6("6xl"),
    full: getSize6("full")
  },
  defaultProps: {
    size: "md"
  }
});
var modal_default = config27;
function getSize6(value) {
  if (value === "full") {
    return {
      dialog: {
        maxWidth: "100vw",
        minHeight: "100vh",
        "@supports(min-height: -webkit-fill-available)": {
          minHeight: "-webkit-fill-available"
        },
        marginY: 0
      }
    };
  }
  return {
    dialog: { maxWidth: value }
  };
}
var parts13 = anatomy("NumericStepper").parts(
  "container",
  "button",
  "text",
  "input"
);
var helpers19 = createMultiStyleConfigHelpers$1(parts13.keys);
var config28 = helpers19.defineMultiStyleConfig({
  baseStyle: (props) => ({
    container: {
      display: "flex",
      flexDirection: "row",
      alignItems: "center"
    },
    input: {
      fontSize: "sm",
      fontWeight: "bold",
      marginX: 1,
      paddingX: 1,
      borderRadius: "xs",
      textAlign: "center",
      transitionProperty: "common",
      transitionDuration: "fast",
      ...baseText("default", props),
      ...baseBackground("default", props),
      _disabled: {
        pointerEvents: "none",
        opacity: 0.5
      },
      _hover: {
        ...baseBorder("default", props)
      },
      _active: {
        ...baseBackground("active", props)
      },
      ...focusVisibleStyles(props)
    },
    text: {
      fontSize: "sm",
      fontWeight: "bold",
      marginX: 1,
      paddingX: 1,
      textAlign: "center",
      width: "4ch",
      ...baseText("default", props)
    },
    button: {
      minWidth: "24px",
      minHeight: "24px"
    }
  })
});
var numeric_stepper_default = config28;
var parts14 = anatomy$1("Pagination").parts(
  "listItem",
  "link",
  "activeButton",
  "disabled",
  "icon"
);
var helpers20 = createMultiStyleConfigHelpers$1(parts14.keys);
var config29 = helpers20.defineMultiStyleConfig({
  baseStyle: (props) => ({
    activeButton: {
      fontWeight: "bold",
      ...commonStyles,
      ...ghostBackground("active", props),
      _hover: {
        ...ghostBackground("hover", props),
        borderRadius: 50
      },
      _active: {
        borderRadius: 50,
        ...ghostBackground("active", props)
      }
    },
    disabled: {
      ...commonStyles,
      cursor: "not-allowed",
      pointerEvents: "none",
      boxShadow: "none",
      ...baseText("disabled", props)
    },
    listItem: {
      display: "flex"
    },
    link: {
      ...commonStyles,
      ...ghostBackground("default", props),
      ...baseText("default", props),
      _hover: {
        ...ghostBackground("hover", props),
        borderRadius: 50,
        _disabled: {
          ...baseText("disabled", props)
        }
      },
      _active: {
        borderRadius: 50,
        ...ghostBackground("active", props)
      }
    },
    icon: {
      bottom: "-0.03em !important"
    }
  })
});
var commonStyles = {
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  width: 5,
  height: 5,
  backgroundImage: "none",
  borderRadius: 50,
  fontSize: "xs"
};
var pagination_default = config29;
var $popperBg2 = cssVar$1("popper-bg");
var $arrowBg3 = cssVar$1("popper-arrow-bg");
var $arrowShadowColor2 = cssVar$1("popper-arrow-shadow-color");
var helpers21 = createMultiStyleConfigHelpers$1(popoverAnatomy.keys);
var config30 = helpers21.defineMultiStyleConfig({
  baseStyle: (props) => ({
    popper: {
      zIndex: "popover"
    },
    content: {
      [$popperBg2.variable]: mode(
        "colors.surface.tertiary.light",
        "colors.surface.tertiary.dark"
      )(props),
      backgroundColor: $popperBg2.reference,
      [$arrowBg3.variable]: $popperBg2.reference,
      [$arrowShadowColor2.variable]: "colors.blackAlpha.300",
      color: "white",
      // TODO: Should this be a semantic token? Where does it fit in?
      borderRadius: "sm",
      padding: 1.5,
      zIndex: "inherit",
      maxWidth: "20em"
    },
    arrow: {
      backgroundColor: "transparent",
      boxShadow: "none",
      clipPath: "path('M 0 0 Q 2.4 6 0 12 Q 6 9.6 12 12 Q 9.6 6 12 0 Q 6 2.4 0 0 z')"
    },
    closeButton: {
      position: "absolute",
      color: "white",
      ...focusVisibleStyles(props),
      _hover: {
        backgroundColor: "whiteAlpha.100"
      },
      _active: {
        backgroundColor: "whiteAlpha.200"
      },
      borderRadius: "sm",
      top: 2,
      right: 1
    }
  }),
  sizes: {
    sm: {
      content: {
        paddingX: 1.5,
        paddingY: 1
      }
    },
    lg: {
      content: {
        paddingX: 3,
        paddingY: 2
      }
    }
  }
});
var popover_default = config30;
var parts15 = anatomy("progressBar").parts(
  "container",
  "background",
  "progress",
  "description"
);
var helpers22 = createMultiStyleConfigHelpers(parts15.keys);
var config31 = helpers22.defineMultiStyleConfig({
  baseStyle: (props) => ({
    container: {
      minWidth: "100px"
    },
    background: {
      display: "flex",
      backgroundColor: mode(
        "brand.surface.default.dark",
        "brand.surface.default.light"
      )(props),
      borderRadius: "sm",
      justifyContent: "flex-start",
      marginX: "auto"
    },
    progress: {
      backgroundColor: mode(
        "brand.surface.active.light",
        "brand.surface.active.dark"
      )(props),
      borderRadius: "sm",
      maxWidth: "100%",
      transition: "width .2s ease-out"
    },
    description: {
      textAlign: "center",
      marginTop: 2,
      marginX: "auto",
      fontWeight: "bold"
    }
  })
});
var progress_bar_default = config31;
var parts16 = anatomy$1("progress-indicator").parts(
  "root",
  "container",
  "progressDot"
);
var helpers23 = createMultiStyleConfigHelpers$1(parts16.keys);
var config32 = helpers23.defineMultiStyleConfig({
  baseStyle: (props) => ({
    root: {
      width: "100%"
    },
    container: {
      display: "flex",
      alignItems: "center",
      gap: 1,
      justifyContent: ["space-between", "center"]
    },
    progressDot: {
      height: 1,
      width: 1,
      "&[aria-current='step']": {
        circle: {
          fill: mode(
            "brand.surface.default.light",
            "brand.surface.default.dark"
          )(props)
        }
      },
      circle: {
        fill: mode("icon.disabled.light", "icon.disabled.dark")(props)
      }
    }
  }),
  defaultProps: {
    variant: "base"
  }
});
var progress_indicator_default = config32;
var parts17 = anatomy$1("radio-card").parts(
  "container",
  "checked",
  "radioInput",
  "focused",
  "focusedChecked"
);
var helpers24 = createMultiStyleConfigHelpers$1(parts17.keys);
var config33 = helpers24.defineMultiStyleConfig({
  baseStyle: (props) => ({
    container: {
      overflow: "hidden",
      fontSize: "inherit",
      display: "block",
      cursor: "pointer",
      borderRadius: "sm",
      transitionProperty: "common",
      transitionDuration: "fast",
      _disabled: {
        pointerEvents: "none",
        ...baseBackground("disabled", props),
        ...baseBorder("disabled", props),
        ...baseText("disabled", props)
      }
    },
    checked: {
      outline: "2px solid",
      ...outlineBorder("focus", props),
      ...floatingBackground("active", props)
    },
    radioInput: {
      appearance: "none",
      position: "absolute",
      opacity: 0,
      zIndex: -1
    }
  }),
  variants: {
    base: (props) => ({
      container: {
        ...baseText("default", props),
        ...baseBackground("default", props),
        ...baseBorder("default", props),
        _hover: {
          ...baseBackground("hover", props),
          ...baseBorder("hover", props)
        },
        _active: {
          ...baseBackground("active", props),
          ...baseBorder("active", props)
        }
      },
      checked: {
        _hover: {
          ...baseBorder("hover", props)
        },
        _active: {
          ...baseBackground("active", props),
          ...baseBorder("active", props)
        }
      },
      focusedChecked: {
        outline: "4px solid",
        outlineStyle: "double",
        ...outlineBorder("focus", props),
        outlineOffset: "-1px"
      },
      focused: {
        outline: "2px solid",
        ...outlineBorder("focus", props),
        outlineOffset: "1px",
        boxShadow: `inset 0 0 0 1px rgba(0, 0, 0, 0.40)`,
        _hover: {
          ...baseBorder("hover", props),
          boxShadow: "none",
          outlineOffset: "0px"
        }
      }
    }),
    floating: (props) => ({
      container: {
        ...floatingBackground("default", props),
        ...floatingBorder("default", props),
        boxShadow: "sm",
        _hover: {
          ...floatingBackground("hover", props),
          ...floatingBorder("hover", props),
          boxShadow: "md"
        },
        _active: {
          ...floatingBackground("active", props),
          ...floatingBorder("active", props)
        }
      },
      checked: {
        _hover: {
          ...floatingBorder("hover", props),
          boxShadow: "md"
        },
        _active: {
          ...floatingBackground("active", props),
          ...floatingBorder("active", props)
        }
      },
      focusedChecked: {
        outline: "4px solid",
        outlineStyle: "double",
        ...outlineBorder("focus", props),
        outlineOffset: "-1px"
      },
      focused: {
        outline: "2px solid",
        ...outlineBorder("focus", props),
        outlineOffset: "1px",
        boxShadow: `inset 0 0 0 1px rgba(0, 0, 0, 0.10)`,
        _hover: {
          ...floatingBorder("hover", props),
          boxShadow: "md",
          outlineOffset: "0px"
        }
      }
    })
  }
});
var radio_card_default = config33;
var helpers25 = createMultiStyleConfigHelpers$1(radioAnatomy.keys);
var config34 = helpers25.defineMultiStyleConfig({
  baseStyle: (props) => ({
    container: {
      _hover: {
        "input:enabled + .chakra-radio__control": {
          backgroundColor: "inherit",
          borderColor: mode("text.default.light", "text.default.dark")(props)
        },
        "input:enabled:checked + .chakra-radio__control": {
          color: brandBackground("hover", props).backgroundColor,
          borderColor: brandBackground("hover", props).backgroundColor
        }
      }
    },
    label: {
      userSelect: "none",
      _disabled: { opacity: 0.4 }
    },
    control: {
      width: 4,
      height: 4,
      backgroundColor: "inherit",
      border: "2px solid",
      borderColor: baseBorder("default", props).outlineColor,
      borderRadius: "50%",
      ...focusVisibleStyles(props),
      _disabled: {
        ...baseBackground("disabled", props),
        ...baseBorder("disabled", props),
        ...baseText("disabled", props)
      },
      _checked: {
        color: mode(
          "brand.surface.default.light",
          "brand.surface.default.dark"
        )(props),
        borderColor: "currentColor",
        _before: {
          content: `""`,
          display: "inline-block",
          position: "relative",
          width: "50%",
          height: "50%",
          borderRadius: "50%",
          background: "currentColor"
        },
        _disabled: {
          pointerEvents: "none",
          ...baseBackground("disabled", props),
          ...baseBorder("disabled", props),
          ...baseText("disabled", props)
        }
      }
    }
  })
});
var radio_default = config34;
var parts18 = selectAnatomy.extend("root");
var helpers26 = createMultiStyleConfigHelpers$1(parts18.keys);
var config35 = helpers26.defineMultiStyleConfig({
  baseStyle: (props) => ({
    root: {
      width: "100%",
      height: "fit-content",
      position: "relative",
      "& + label": {
        fontSize: ["mobile.sm", "desktop.sm"],
        top: "2px",
        left: 3,
        zIndex: 2,
        position: "absolute",
        marginY: 2,
        transformOrigin: "top left",
        transform: [
          "scale(0.825) translateY(-12px)",
          "scale(0.825) translateY(-14px)"
        ]
      }
    },
    field: {
      ...input_default.baseStyle(props).field,
      appearance: "none",
      paddingTop: "1rem",
      "option, optgroup": {}
    },
    icon: {
      width: 5,
      height: 5,
      insetEnd: "0.5rem",
      position: "relative",
      color: "currentColor",
      strokeLinecap: "round",
      fontSize: "sm",
      _disabled: {
        ...baseText("disabled", props)
      }
    }
  })
});
var select_default = config35;
var fade = (startColor, endColor) => keyframes({
  from: { borderColor: startColor, background: startColor },
  to: { borderColor: endColor, background: endColor }
});
var $startColor2 = cssVar$1("skeleton-start-color");
var $endColor2 = cssVar$1("skeleton-end-color");
var config36 = defineStyleConfig$1({
  baseStyle: (props) => {
    const defaultStartColor = mode("blackAlpha.300", "whiteAlpha.300")(props);
    const defaultEndColor = mode("blackAlpha.100", "whiteAlpha.100")(props);
    const {
      startColor = defaultStartColor,
      endColor = defaultEndColor,
      speed,
      theme: theme3
    } = props;
    const start = getColor(theme3, startColor);
    const end = getColor(theme3, endColor);
    return {
      [$startColor2.variable]: start,
      [$endColor2.variable]: end,
      opacity: 1,
      borderRadius: "xs",
      borderColor: start,
      background: end,
      animation: `${speed}s linear infinite alternate ${fade(start, end)}`
    };
  }
});
var skeleton_default = config36;
var parts19 = anatomy$1("stepper").parts(
  "root",
  "container",
  "innerContainer",
  "title",
  "stepCounter",
  "stepContainer",
  "stepButton",
  "stepNumber",
  "stepTitle",
  "closeButton"
);
var helpers27 = createMultiStyleConfigHelpers$1(parts19.keys);
var config37 = helpers27.defineMultiStyleConfig({
  baseStyle: {
    root: {
      display: "flex",
      alignItems: "center",
      justifyContent: ["space-between", null, "center"],
      minHeight: ["48px", null, "60px"],
      overflowX: "auto",
      width: "100%"
    },
    container: {
      paddingX: [2, null, null, 0],
      maxWidth: "container.lg",
      marginX: "auto",
      width: "100%"
    },
    innerContainer: {
      overflow: "hidden",
      display: ["flex", null, "none"],
      alignItems: "center",
      justifyContent: "space-between",
      gap: 3
    },
    title: {
      overflow: "hidden",
      fontWeight: "bold",
      WebkitLineClamp: 2,
      display: "-webkit-box",
      WebkitBoxOrient: "vertical",
      textAlign: "center",
      maxWidth: "80%"
    },
    stepContainer: {
      display: "flex",
      alignItems: "center"
    },
    stepTitle: {
      textStyle: "sm",
      whiteSpace: "nowrap"
    }
  },
  variants: {
    base: () => ({
      root: {
        backgroundColor: "transparent"
      }
    }),
    accent: (props) => ({
      root: {
        backgroundColor: mode("accent.bg.light", "accent.bg.dark")(props),
        ...accentText("default", props)
      },
      stepButton: {
        color: props.state === "disabled" ? baseText("disabled", props).color : props.state === "completed" ? baseText("default", props).color : brandText("default", props).color,
        _hover: {
          backgroundColor: props.state === "disabled" ? "transparent" : accentBackground("hover", props).backgroundColor
        }
      },
      backButton: {
        _hover: {
          ...brandBackground("hover", props)
        }
      }
    })
  },
  defaultProps: {
    variant: "base"
  }
});
var stepper_default = config37;
var $width2 = cssVar$1("switch-track-width");
var $height3 = cssVar$1("switch-track-height");
var $diff2 = cssVar$1("switch-track-diff");
var diffValue2 = calc$1.subtract($width2, $height3);
var $translateX2 = cssVar$1("switch-thumb-x");
var helpers28 = createMultiStyleConfigHelpers$1(switchAnatomy.keys);
var config38 = helpers28.defineMultiStyleConfig({
  baseStyle: (props) => ({
    container: {
      [$diff2.variable]: diffValue2,
      [$translateX2.variable]: $diff2.reference,
      _rtl: {
        [$translateX2.variable]: calc$1($diff2).negate().toString()
      }
    },
    track: {
      width: [$width2.reference],
      height: [$height3.reference],
      transitionProperty: "common",
      transitionDuration: "fast",
      ...baseBorder("default", props),
      ...focusVisibleStyles(props),
      ...baseBackground("default", props),
      _hover: {
        ...baseBorder("hover", props)
      },
      _checked: {
        ...brandBackground("default", props),
        outlineColor: "transparent",
        _hover: {
          ...baseBackground("default", props),
          ...brandBackground("hover", props)
        }
      },
      _disabled: {
        pointerEvents: "none",
        ...baseBackground("default", props),
        ...baseBorder("disabled", props),
        _checked: {
          ...baseBackground("disabled", props),
          ...baseBorder("disabled", props)
        }
      }
    },
    thumb: {
      transitionProperty: "transform",
      transitionDuration: "normal",
      borderRadius: "50%",
      width: [$height3.reference],
      height: [$height3.reference],
      backgroundColor: mode("base.icon.light", "base.icon.dark")(props),
      "[data-disabled] &": {
        backgroundColor: mode(
          "icon.disabled.light",
          "icon.disabled.dark"
        )(props)
      },
      _checked: {
        backgroundColor: mode("brand.icon.light", "brand.icon.dark")(props),
        transform: `translateX(${$translateX2.reference})`
      }
    }
  }),
  sizes: {
    sm: {
      container: {
        [$width2.variable]: "54px",
        [$height3.variable]: "24px"
      },
      track: {
        borderRadius: "24px",
        padding: "2px"
      }
    },
    md: {
      container: {
        [$width2.variable]: "66px",
        [$height3.variable]: "30px"
      },
      track: {
        borderRadius: "30px",
        padding: "3px"
      }
    },
    lg: {
      container: {
        [$width2.variable]: "78px",
        [$height3.variable]: "36px"
      },
      track: {
        borderRadius: "36px",
        padding: "3px"
      }
    }
  },
  defaultProps: {
    size: "md"
  }
});
var switch_default = config38;
var helpers29 = createMultiStyleConfigHelpers$1(tableAnatomy.keys);
var numericStyles2 = {
  "&[data-is-numeric=true]": {
    textAlign: "end"
  }
};
var config39 = helpers29.defineMultiStyleConfig({
  baseStyle: (props) => ({
    table: {
      borderCollapse: "collapse",
      ...baseText("default", props),
      width: "100%"
    },
    th: {
      fontWeight: "bold",
      textAlign: "start"
    },
    td: {
      textAlign: "start"
    },
    tfoot: {
      tr: {
        "&:last-of-type": {
          th: { borderBottomWidth: 0 }
        }
      }
    },
    caption: {
      marginTop: 4,
      fontFamily: "heading",
      textAlign: "center",
      fontWeight: "bold",
      color: "currentColor"
    }
  }),
  variants: {
    simple: (props) => ({
      th: {
        borderBottom: "sm",
        borderColor: mode(`blackAlpha.200`, `whiteAlpha.300`)(props),
        ...numericStyles2
      },
      td: {
        borderBottom: "sm",
        borderColor: mode(`blackAlpha.200`, `whiteAlpha.300`)(props),
        ...numericStyles2
      }
    }),
    outline: (props) => ({
      tbody: {
        tr: {
          transitionDuration: "fast",
          transitionProperty: "background-color, box-shadow",
          _hover: {
            ...baseBorder("hover", props),
            outlineOffset: "-2px",
            backgroundColor: mode(
              props.colorScheme === "grey" ? "mint" : "coralGreen",
              "whiteAlpha.200"
            )(props)
          },
          _last: {
            borderBottomRadius: "md"
          }
        }
      },
      th: {
        border: mode("none", "md"),
        borderColor: mode("transparent", `whiteAlpha.200`)(props),
        backgroundColor: mode(`${props.colorScheme}.100`, "darkTeal")(props),
        ...numericStyles2
      },
      td: {
        border: mode("sm", "md"),
        borderColor: mode(
          props.colorScheme === "grey" ? "silver" : "blackAlpha.200",
          "whiteAlpha.200"
        )(props),
        ...numericStyles2,
        _first: {
          borderLeft: "none"
        }
      },
      tr: {
        _last: {
          td: {
            borderBottom: "none"
          }
        }
      }
    }),
    unstyled: {}
  },
  sizes: {
    sm: {
      table: {
        fontSize: ["mobile.xs", "desktop.xs"]
      },
      th: {
        paddingX: 3,
        paddingY: 1.5
      },
      td: {
        paddingX: 3,
        paddingY: 1.5
      },
      caption: {
        paddingX: 3,
        paddingY: 1.5
      }
    },
    md: {
      table: {
        fontSize: ["mobile.sm", "desktop.sm"]
      },
      th: {
        paddingX: 3,
        paddingY: 1.5
      },
      td: {
        paddingX: 3,
        paddingY: 1.5
      },
      caption: {
        paddingX: 3,
        paddingY: 1.5
      }
    },
    lg: {
      table: {
        fontSize: ["mobile.sm", "desktop.sm"]
      },
      th: {
        paddingX: 3,
        paddingY: "15px"
      },
      td: {
        paddingX: 3,
        paddingY: "15px"
      },
      caption: {
        paddingX: 3,
        paddingY: "15px"
      }
    }
  },
  defaultProps: {
    variant: "simple",
    size: "md",
    colorScheme: "grey"
  }
});
var table_default = config39;
var helpers30 = createMultiStyleConfigHelpers$1(tabsAnatomy.keys);
var config40 = helpers30.defineMultiStyleConfig({
  baseStyle: (props) => ({
    root: {
      display: "flex",
      flexDirection: "column"
    },
    tablist: {
      display: "flex",
      alignItems: "center",
      gap: 0.5,
      width: props.isFitted ? "fit-content" : "100%",
      borderRadius: "xl"
    },
    tab: {
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      transitionProperty: "common",
      transitionDuration: "normal",
      width: props.isFitted ? "fit-content" : "100%",
      height: "100%",
      whiteSpace: "nowrap",
      borderRadius: "xl",
      ...focusVisibleStyles(props),
      _disabled: {
        ...baseBackground("disabled", props),
        ...baseText("disabled", props)
      },
      _selected: {
        pointerEvents: "none",
        ...brandBackground("default", props),
        ...brandText("default", props),
        _hover: {
          ...brandBackground("hover", props),
          ...brandText("hover", props)
        },
        _active: {
          ...brandBackground("active", props),
          ...brandText("active", props)
        }
      }
    }
  }),
  variants: {
    base: (props) => ({
      tablist: {
        ...baseBackground("default", props),
        ...baseText("default", props),
        ...baseBorder("default", props)
      },
      tab: {
        ...baseText("default", props),
        _hover: {
          ...baseBorder("hover", props),
          outlineOffset: "-2px"
        },
        _accent: {
          ...baseBackground("active", props)
        }
      }
    }),
    accent: (props) => ({
      tablist: {
        backgroundColor: mode("accent.bg.light", "accent.bg.dark")(props),
        ...accentText("default", props)
      },
      tab: {
        ...accentText("default", props),
        _hover: {
          ...accentBackground("hover", props)
        },
        _accent: {
          ...accentBackground("active", props)
        }
      }
    })
  },
  sizes: {
    xs: {
      tablist: {
        height: 5,
        padding: "2px"
      },
      tab: {
        paddingX: 2,
        paddingY: 0
      }
    },
    sm: {
      tablist: {
        height: 6,
        padding: 0.5
      },
      tab: {
        paddingX: 2
      }
    },
    md: {
      tablist: {
        height: 7,
        padding: 0.5
      },
      tab: {
        fontWeight: "bold",
        paddingX: 2
      }
    },
    lg: {
      tablist: {
        height: 8,
        padding: "4px"
      },
      tab: {
        fontWeight: "bold",
        paddingX: 3
      }
    }
  },
  defaultProps: {
    size: "sm",
    variant: "base"
  }
});
var tabs_default = config40;
var config41 = defineStyleConfig$1({
  baseStyle: (props) => ({
    ...input_default.baseStyle(props).field,
    minHeight: "5rem",
    verticalAlign: "top",
    appearance: "none",
    paddingTop: 2,
    "&:not(:placeholder-shown)": {
      "&:has(+ label)": {
        paddingTop: 4
      },
      "& + label": {
        transform: "scale(0.825) translateY(-10px)"
      }
    }
  })
});
var textarea_default = config41;
var config42 = defineStyleConfig$1({
  baseStyle: {
    display: "flex",
    alignItems: "center",
    width: "fit-content",
    maxWidth: "60ch",
    minWidth: "40ch",
    paddingX: 2,
    paddingY: 1.5,
    boxShadow: "sm",
    borderRadius: "sm"
  },
  variants: {
    success: {
      backgroundColor: "seaMist"
    },
    info: {
      backgroundColor: "lightBlue"
    },
    error: {
      backgroundColor: "lightRed"
    }
  }
});
var toast_default = config42;
var config43 = defineStyleConfig$1({
  baseStyle: (props) => ({
    appearance: "none",
    border: "none",
    overflow: "hidden",
    fontSize: "inherit",
    display: "block",
    borderRadius: "md",
    color: "text.default.light",
    ...focusVisibleStyles(props),
    ...getColorSchemeBaseProps2(props)
  })
});
var static_card_default = config43;
var getColorSchemeBaseProps2 = (props) => {
  var _a6;
  switch (props.colorScheme) {
    case "white":
      return {
        ...floatingBackground("default", props),
        color: mode("text.default.light", "text.default.dark")(props)
      };
    case "grey":
      return {
        backgroundColor: "lightGrey"
      };
    case "green": {
      return {
        backgroundColor: "seaMist"
      };
    }
    case "red": {
      return {
        backgroundColor: "pink"
      };
    }
    case "darkBlue": {
      return {
        backgroundColor: "darkBlue",
        color: "white"
      };
    }
    case "darkGreen": {
      return {
        backgroundColor: "pine",
        color: "white"
      };
    }
    case "darkYellow": {
      return {
        backgroundColor: "banana"
      };
    }
    default:
      return {
        backgroundColor: ((_a6 = colors2[props.colorScheme]) == null ? void 0 : _a6[100]) ?? "default"
      };
  }
};
var config44 = defineStyleConfig$1({
  baseStyle: (props) => ({
    appearance: "none",
    border: "none",
    overflow: "hidden",
    fontSize: "inherit",
    display: "block",
    borderRadius: "md",
    cursor: "pointer",
    transitionProperty: "common",
    transitionDuration: "fast",
    "button&, a&, label&, &.is-clickable": {
      ...focusVisibleStyles(props)
    },
    _disabled: {
      ...baseBackground("disabled", props),
      ...baseBorder("disabled", props),
      ...baseText("disabled", props),
      outline: "none",
      pointerEvents: "none"
    }
  }),
  variants: {
    base: (props) => ({
      cursor: "pointer",
      ...baseBorder("default", props),
      _hover: {
        ...baseBorder("hover", props)
      },
      _active: {
        ...baseBackground("active", props),
        ...baseBorder("active", props)
      }
    }),
    accent: (props) => ({
      ...accentText("default", props),
      ...accentBackground("default", props),
      boxShadow: "sm",
      _hover: {
        ...accentBackground("hover", props),
        boxShadow: "md"
      },
      _active: {
        ...accentBackground("active", props),
        boxShadow: "none"
      }
    }),
    floating: (props) => ({
      ...floatingBackground("default", props),
      ...floatingBorder("default", props),
      boxShadow: "sm",
      _hover: {
        ...floatingBackground("hover", props),
        ...floatingBorder("hover", props),
        boxShadow: "md"
      },
      _active: {
        ...floatingBorder("default", props),
        ...floatingBackground("active", props),
        boxShadow: "none"
      }
    })
  }
});
var pressable_card_default = config44;
var fontFaces = `
@font-face {
  font-family: ${tokens11__default.asset.font["vy-sans"]["light"].name};
  src: url("https://www.vy.no/styles/font/VySans-Light.woff2") format("woff2"),
    url("https://www.vy.no/styles/font/VySans-Light.woff") format("woff");
  font-style: normal;
  font-weight: 300;
  font-display: swap
}
@font-face {
  font-family: ${tokens11__default.asset.font["vy-sans"]["light-italic"].name};
  src: url("https://www.vy.no/styles/font/VySans-LightItalic.woff2")
      format("woff2"),
    url("https://www.vy.no/styles/font/VySans-LightItalic.woff") format("woff");
  font-style: italic;
  font-weight: 300;
  font-display: swap
}
@font-face {
  font-family: ${tokens11__default.asset.font["vy-sans"]["medium"].name};
  src: url("https://www.vy.no/styles/font/VySans-Regular.woff2") format("woff2"),
    url("https://www.vy.no/styles/font/VySans-Regular.woff") format("woff");
  font-style: normal;
  font-weight: 400;
  font-display: swap
}
@font-face {
  font-family: ${tokens11__default.asset.font["vy-sans"]["medium-italic"].name};
  src: url("https://www.vy.no/styles/font/VySans-RegularItalic.woff2")
      format("woff2"),
    url("https://www.vy.no/styles/font/VySans-RegularItalic.woff")
      format("woff");
  font-style: italic;
  font-weight: 400;
  font-display: swap
}
@font-face {
  font-family: ${tokens11__default.asset.font["vy-sans"]["bold"].name};
  src: url("https://www.vy.no/styles/font/VySans-Bold.woff2") format("woff2"),
    url("https://www.vy.no/styles/font/VySans-Bold.woff") format("woff");
  font-style: normal;
  font-weight: 700;
  font-display: swap
}
@font-face {
  font-family: ${tokens11__default.asset.font["vy-sans"]["bold-italic"].name};
  src: url("https://www.vy.no/styles/font/VySans-BoldItalic.woff2")
      format("woff2"),
    url("https://www.vy.no/styles/font/VySans-BoldItalic.woff") format("woff");
  font-style: italic;
  font-weight: 700;
  font-display: swap
}
@font-face {
  font-family: ${tokens11__default.asset.font["vy-display"].name};
  src: url("https://www.vy.no/styles/font/VyDisplay-Medium.woff2")
      format("woff2"),
    url("https://www.vy.no/styles/font/VyDisplay-Medium.woff") format("woff");
  font-style: normal;
  font-weight: 400;
  font-display: swap
}
  body {
    font-family: "Vy Sans", sans-serif;
  }
`;

// src/theme/index.ts
var Brand = /* @__PURE__ */ ((Brand2) => {
  Brand2["VyDigital"] = "VyDigital";
  Brand2["VyUtvikling"] = "VyUtvikling";
  Brand2["CargoNet"] = "CargoNet";
  return Brand2;
})(Brand || {});
var theme = {
  ...theme2,
  ...foundations_exports,
  components: {
    ...theme2.components,
    ...components_exports
  }
};
var brandTheme = {
  ["VyDigital" /* VyDigital */]: {},
  ["VyUtvikling" /* VyUtvikling */]: {
    colors: {
      bg: {
        default: {
          dark: colors2.darkGrey
        }
      },
      surface: {
        default: {
          dark: colors2.darkGrey
        }
      }
    }
  },
  ["CargoNet" /* CargoNet */]: {
    colors: tokens11__default.color.cargonet
  }
};
var BaseToast = ({ children, variant, id }) => {
  const styles3 = useStyleConfig("Toast", { variant });
  return /* @__PURE__ */ React86__default.createElement(Flex, { sx: styles3, id }, /* @__PURE__ */ React86__default.createElement(ToastIcon, { variant }), children);
};
var ToastIcon = ({ variant }) => {
  const Icon = getIcon3(variant);
  const { t: t2 } = useTranslation();
  return /* @__PURE__ */ React86__default.createElement(
    Icon,
    {
      flexShrink: 0,
      "aria-label": t2(texts26[variant]),
      marginRight: 1,
      marginY: 1.5,
      color: "darkGrey"
    }
  );
};
var getIcon3 = (variant) => {
  switch (variant) {
    case "info":
      return InformationOutline24Icon;
    case "success":
      return SuccessOutline24Icon;
    case "error":
      return ErrorOutline24Icon;
  }
};
var texts26 = createTexts({
  info: {
    nb: "Informasjon",
    nn: "Informasjon",
    sv: "Information",
    en: "Information"
  },
  success: {
    nb: "Suksess",
    nn: "Suksess",
    sv: "Succ\xE9",
    en: "Success"
  },
  error: {
    nb: "Feil",
    nn: "Feil",
    sv: "Error",
    en: "Error"
  }
});

// src/toast/ActionToast.tsx
var ActionToast = ({
  children,
  onClick,
  variant,
  buttonText,
  id
}) => {
  return /* @__PURE__ */ React86__default.createElement(BaseToast, { variant, id }, /* @__PURE__ */ React86__default.createElement(Box, { marginRight: 2, flexGrow: "1" }, children), /* @__PURE__ */ React86__default.createElement(Button2, { variant: "tertiary", size: "sm", onClick }, buttonText));
};
var ClosableToast = ({
  children,
  onClose,
  variant,
  id
}) => {
  const styles3 = useMultiStyleConfig("Toast", { variant });
  const { t: t2 } = useTranslation();
  return /* @__PURE__ */ React86__default.createElement(BaseToast, { variant, id }, /* @__PURE__ */ React86__default.createElement(Box, { flexGrow: "1" }, children), /* @__PURE__ */ React86__default.createElement(
    IconButton,
    {
      sx: styles3.dismissButton,
      variant: "ghost",
      "aria-label": t2(texts27.dismiss),
      icon: /* @__PURE__ */ React86__default.createElement(CloseFill18Icon, null),
      onClick: onClose
    }
  ));
};
var texts27 = createTexts({
  dismiss: {
    nb: "Lukk",
    nn: "Lukk",
    sv: "D\xF6lj",
    en: "Dismiss"
  }
});

// src/toast/useToast.tsx
var useToast = () => {
  const toast = useToast$1();
  const wrappedToast = useCallback((opts) => {
    const Toast = getToastComponent(opts);
    toast({
      ...opts,
      render: Toast
    });
  }, []);
  return wrappedToast;
};
var getToastComponent = (opts) => {
  if ("isClosable" in opts && opts.isClosable) {
    return ({ onClose, id }) => /* @__PURE__ */ React86__default.createElement(
      ClosableToast,
      {
        id,
        variant: opts.variant,
        onClose: () => {
          if (opts.onClose) {
            opts.onClose();
          }
          onClose();
        }
      },
      opts.text
    );
  }
  if ("buttonText" in opts) {
    return ({ id }) => /* @__PURE__ */ React86__default.createElement(
      ActionToast,
      {
        id,
        variant: opts.variant,
        buttonText: opts.buttonText,
        onClick: opts.onClick
      },
      opts.text
    );
  }
  return ({ id }) => /* @__PURE__ */ React86__default.createElement(BaseToast, { id, variant: opts.variant }, opts.text);
};
var Tooltip = ({
  children,
  content,
  onClose,
  isOpen,
  defaultIsOpen,
  placement = "bottom",
  size: size2 = "sm",
  withCloseButton = false,
  ...props
}) => {
  return /* @__PURE__ */ React86__default.createElement(
    Popover$1,
    {
      onClose,
      isOpen,
      defaultIsOpen,
      placement,
      size: size2,
      arrowSize: 12,
      arrowShadowColor: "none",
      ...props
    },
    /* @__PURE__ */ React86__default.createElement(PopoverTrigger, null, children),
    /* @__PURE__ */ React86__default.createElement(PopoverContent, null, /* @__PURE__ */ React86__default.createElement(PopoverArrow, null), withCloseButton && /* @__PURE__ */ React86__default.createElement(PopoverCloseButton, null), /* @__PURE__ */ React86__default.createElement(PopoverBody, null, content))
  );
};

// ../../node_modules/@zag-js/element-size/dist/track-size.mjs
function trackElementSize(element, callback) {
  if (!element) {
    callback(void 0);
    return;
  }
  callback({ width: element.offsetWidth, height: element.offsetHeight });
  const win = element.ownerDocument.defaultView ?? window;
  const observer = new win.ResizeObserver((entries) => {
    if (!Array.isArray(entries) || !entries.length)
      return;
    const [entry] = entries;
    let width;
    let height;
    if ("borderBoxSize" in entry) {
      const borderSizeEntry = entry["borderBoxSize"];
      const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;
      width = borderSize["inlineSize"];
      height = borderSize["blockSize"];
    } else {
      width = element.offsetWidth;
      height = element.offsetHeight;
    }
    callback({ width, height });
  });
  observer.observe(element, { box: "border-box" });
  return () => observer.unobserve(element);
}
var useSafeLayoutEffect = Boolean(globalThis == null ? void 0 : globalThis.document) ? useLayoutEffect : useEffect;
function trackMutation(el, cb) {
  var _a6, _b5;
  if (!el || !el.parentElement)
    return;
  const win = (_b5 = (_a6 = el.ownerDocument) == null ? void 0 : _a6.defaultView) != null ? _b5 : window;
  const observer = new win.MutationObserver(() => {
    cb();
  });
  observer.observe(el.parentElement, { childList: true });
  return () => {
    observer.disconnect();
  };
}
function useSizes({
  getNodes,
  observeMutation = true
}) {
  const [sizes26, setSizes] = useState([]);
  const [count, setCount] = useState(0);
  useSafeLayoutEffect(() => {
    const elements = getNodes();
    const cleanups = elements.map(
      (element, index) => trackElementSize(element, (size2) => {
        setSizes((sizes27) => {
          return [
            ...sizes27.slice(0, index),
            size2,
            ...sizes27.slice(index + 1)
          ];
        });
      })
    );
    if (observeMutation) {
      const firstNode = elements[0];
      cleanups.push(
        trackMutation(firstNode, () => {
          setCount((count2) => count2 + 1);
        })
      );
    }
    return () => {
      cleanups.forEach((cleanup) => {
        cleanup == null ? void 0 : cleanup();
      });
    };
  }, [count]);
  return sizes26;
}
function isRef(ref) {
  return typeof ref === "object" && ref !== null && "current" in ref;
}
function useSize(subject) {
  const [size2] = useSizes({
    observeMutation: false,
    getNodes() {
      const node = isRef(subject) ? subject.current : subject;
      return [node];
    }
  });
  return size2;
}

// src/util/slugify.tsx
function slugify(text, maxLength = 50) {
  if (!text) {
    return text;
  }
  if (Array.isArray(text)) {
    text = text.join(" ");
  }
  if (maxLength < 1) {
    throw new Error("The maxLength parameter must be a positive number");
  }
  return text.normalize("NFD").replace(/[\u0300-\u036f]/g, "").replace(/[\u00C6\u00E6]/g, "ae").replace(/[\u00D8\u00F8]/g, "oe").replace(/[\u00C5\u00E5]/g, "aa").toLowerCase().replace(/\s+/g, "-").replace(/[^\w-]+/g, "").replace(/--+/g, "-").replace(/^-+/, "").replace(/-+$/, "").substring(0, maxLength);
}

export { Accordion, AttachedInputs, Badge, Brand, Breadcrumb, BreadcrumbItem, BreadcrumbLink, Button2 as Button, ButtonGroup, Card2 as Card, CardSelect, CargonetLogo, Checkbox, CheckboxGroup, ChoiceChip, ClosableAlert, CloseButton, Code, ColorInlineLoader, ColorSpinner, Combobox, ContentLoader, DarkFullScreenLoader, DarkInlineLoader, DarkSpinner, DatePicker, DateRangePicker, Divider, Drawer, DrawerContent, Expandable, ExpandableAlert, ExpandableItem, FloatingActionButton, FormControl, FormErrorMessage, FormLabel, FullScreenDrawer, Heading2 as Heading, IconButton, InfoSelect, InfoTag, Input, InputLeftElement2 as InputLeftElement, InputRightElement2 as InputRightElement, ItemDescription, ItemLabel, JumpButton, Language, LanguageProvider, LightFullScreenLoader, LightInlineLoader, LightSpinner, LineIcon, ListBox, ModalHeader, NativeSelect, Nudge, NumericStepper, Pagination, PasswordInput, PhoneNumberInput, PlayPauseButton, PressableCard, ProgressBar, ProgressIndicator, ProgressLoader, Radio, RadioCard, RadioCardGroup, RadioCardGroupContext, RadioGroup, SearchInput, SimpleDrawer, Skeleton, SkeletonCircle, SkeletonText, SkipButton, SporProvider, Stack, StaticAlert, StaticCard, Stepper, StepperStep, Switch, Table, Tabs, Text4 as Text, TextLink, Textarea, TimePicker, Tooltip, TravelTag, VyLogo, VyLogoPride, WizardNudge, brandTheme, createTexts, fontFaces, slugify, theme, useSize, useToast, useTranslation };
